%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 343 251
%%HiResBoundingBox: 0 0 342.0024 250.9258
%%CropBox: 0 0 342.0024 250.9258
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 5664 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD8EFFA8A8A8FFA8FFA8A8FD77FFA87DA8765252527D527D%7DA8A1A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A1A87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA8A1A87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA8FD0FFF527D5276FD0452277D7DA8A8CF%FD07A87D7DFD0AA8FF7DFD0CA87D7DFD0BA87DFD0CA87D7DFD0AA8FF7DFD%0BA87D7DFD0BA87D52FD0FFFFD04A8FFA8FFA87DCFFFA8A9A8FD62FFA8FD%17FF7DA8FFFFFFA97EA9A8FD5FFF7DFD17FFA8A8FD05FFA9A9A8FD5DFFA8%A8FD17FF7DA8FD08FF7EA9A8FD5BFF7DFD17FFA8A8FD09FFA9A97EA9FD58%FFA8A8FD17FF7DFD0DFFA8A8A8FD56FFA87DFD17FFA8A8FD0EFFA97EA9FD%54FFA8A8FD0FFFA8FD07FF7DFD11FFA8A8A8FD53FF7DFD0EFFA87D7D7D52%7D527D527DA8FD12FFA97EFD51FFA87DFD0FFF52522752275227524BA8FD%14FF7EA8A8FD4EFFA87DFD0FFF7D7DA8A8A87DA8A17DFD16FFA9A984FD4D%FFCAA8FD17FF7DA8FD17FFAF7EA9AFFD4BFF7DFD17FFA8A8FD19FFA8A9A8%FD49FFA8A8FD17FF7DFD1BFFA9A97EA9FD47FFA87DFD17FFA8A8FD1DFFA8%A9FD46FFA8A8FD17FF7DFD1FFFA8A9A8FD44FFA87DFD17FFA8A8FD20FFA9%7EFD43FFA8A8FD17FF7DCAFD22FF7EA8A8FD41FF7DFD10FFFD057DA87D7D%A8FD23FFA8A9A9FD3FFFA8A8FD10FF52F8524B52275252A8FD24FFAFA97E%FD3EFFA87DFD10FF7D7D7DA87DA87D7DFD28FF7EA9FD3CFFA8A8FD0FFFA8%FD07FF7DFD29FF7EA8A8FD3AFFA87DFD17FFA8A8FD29FFA8A9A9FD39FFA8%A8FD17FF7DFD2BFFA9A97EFD38FFA87DFD17FFA8A8FD2DFF7EFD37FFA8A8%FD0BFF7DA8FD0AFF7DA8FD2EFF7EA9FD36FF7DFD0AFF7D527DFD0AFFA8A8%FD2FFFA8A9FD34FFA8A8FD0AFFA8277DFD0AFF7DA8FD30FFA8A8A8FD33FF%7DFD0AFF7D527DFFFFFFA8A87DA87DA87DA1A8FD32FFA9A8FD31FFA8A8FD%09FFA87D52A8FFFFFF5227522752275252A8FD33FFA97EFD30FFA852FD0A%FF52527DFFFFFF7D76527D527D527DFD35FFAF7EFD2FFFA8A8FD0AFFA8A8%FD0BFF7DFD37FF7EA9FD2DFFA87DFD0AFFA87DA8FD0AFFA8A8FD37FF7EA9%FD2CFFA8A8FD0AFFA127A8FD0AFF7DA8FD38FF7EA8FD2CFF7DFD0AFFA852%7DFD0AFFA8A8FD39FFA9A9FD2AFFA8A8FD0AFFA8277DFD0AFF7DA8FD3AFF%A87EA8FD29FF7DFD0AFF767D7DFD0AFFA8A8FD3CFFA8A8FD27FFA8A8FD0A%FF7D27A8FD0AFF7DFD3EFFA87EFD26FFA87DFD0AFFA8527DFD05FFA8FFA8%FFA8A8FD3FFFA9A8FD25FFA8A8FD0AFF7D52A8FFFFFF7D27FD0652A8FD3F%FFA97EFD24FFA87DFD0AFF7D527DFFFFFFFD05527D527DA8FD40FFA97EFD%23FFA8A1FD0BFF277DFD06FFA8FFA8FF7DCAFD41FFA97EFD23FF7DFD0AFF%7D527DFD0AFFA8A8FD43FF7EFD21FFA8A8FD0AFFA82752FD0AFF7DA8FD44%FF7EFD21FF7DFD0AFFA8527DFD0AFFA8A8FD45FF7EFD1FFFA8A8FD0AFF7D%52FD0BFF7DFD47FF7EA9FD1DFFA87DFD0AFF4B52FD0BFFA8A8FD47FF7EFD%1DFFA8A8FD0BFF7DFD0BFF7DFD49FF7EFD1CFFA87DFD0AFFA87DA8FFFFFF%A8FD06FFA8A8FD49FF7EFD1BFFA8A8FD0AFF7D4BA8FFFFFFA8FD0752FD4B%FF7EFD1AFFA87DFD0AFFA8527DFFFFFF7DFD07527DFD4BFF7EFD19FFA17D%FD0AFF7D527DFFFFFF7D7DFD05A87DFD4DFF7EFD19FF7DFD0AFF527DFD0B%FFA8A8FD4DFF7EFD17FFA8A8FD0AFF5227A8FD0AFF7DFD4FFF7EFD16FFA8%7DFD17FFA8A8FD4FFF7EFD15FFA8A8FD17FF7DFD51FF7EFD14FFA87DFD17%FFA8A8FD51FF7EFD13FFA8A8FD17FF7DA8FD51FFA97EFD13FF7DFD17FFA8%A8FD52FFA97EFD11FFA8A8FD15FFA87D7DFD54FFA87EFD11FF7DFD15FFA8%27527DFD54FFA9A8FD0FFF7D7DFD15FFA87D7DA8FD55FF84A8FD0EFFA87D%FD17FFA8A8FD56FFA9FD0EFFA8A8FD17FF7DFD57FFA8A8FD0DFFA87DFD17%FFA8A8FD57FFA8A9FD0CFFA8A8FD17FF7DA8FD58FFA8A8FD0CFF7DFD17FF%A8A8FD59FFA8A9FD0AFFA8A8FD17FF7DA8FD5AFF7EA9FD0AFF7DFD17FFA8%A8FD5BFF7EFD09FFA8A8FD10FFA8FD067D52FD5DFF7EFD09FF7DFD0EFF7D%A17DFD0752A8FD5CFFA97EFD07FFA87DFD0EFFA8A87D527D527D7D7D52A8%FD5DFFA884FD06FFA87DFD17FFA8A8FD5EFFA9A8FD05FFA8A8FD17FF7DA8%FD5FFF84A8FD05FF7DFD17FFA8A8FD65FFA8A8FD17FF7DA8FD66FF7DFD17%FFA8A8FD65FFA8A8FD17FF7DFD66FFA87DFD17FFA8A8FD65FFA8A8FD11FF%FD06A87DFD33FFA8FD33FF7DFD0EFFA8A87D525252277652527DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA8A87D7DA87DA87DA87DA87DA87DA87D%A8A8A87DA87DA87DA87DA8A87D7DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87D7DFD0EFFA87D7D4B7652525276527DFD0BA87D7DFFFD%0AA87D7DFD0CA87DFD0BA87DFD0BA87DA87DFD0AA8FD047DFD09A87DA87D%FD0AA87DA8A8A8FD15FF7D52FD0BFF7D7DFD0BFF5252FD0BFF4B7DFD0BFF%5252FD0AFF7D76527DFD09FF527D527DFD09FF7D7D527DFD09FF76A827A8%FD15FF5252A8FD0AFF7652FD0BFF5252FD0BFF5252FD0BFF2752FD0AFF7D%52527DFD09FF7D52527DFD09FF527D52A1FD09FF7652527DFD22FFA8FD33%FFA8FD0BFFA8FFA8FD0BFFA8FD0BFFA8FD49FFA8277D7DA17D7DA8FD79FF%7D5252524B52FD7AFFA8A87DA87DA8FDFCFFFD39FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T16:43:54+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T16:43:55+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T16:43:55+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>188</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FVKa7tYW4zTRxtx&#xA;Z6OwU8EFWbc9F7nFVg1HTzGJRdQmMxG4DiReJhHWStfsf5XTFVVJ4HkaNJFaRApdFIJAb7JIHStN&#xA;sVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqx&#xA;bzf5Ovtc1LT760u7O2axiu4it3Ym9Egu4GhKt+/gHpjlUoQeWKsLh/5x/jV7WaTVbeWa3SJmrYH0&#xA;5Z4bhrj94huD/o8pc+rApALVKlRRQptStvybOha3o/pa/dJBeMmnzPZB7K6dIdMb+8uY5CXQSWSN&#xA;GnH4B8PxYQaKGZ/4YurL+/N9qUA/3bbanqEVwBT9qKS59Nvcq49kyyonlsiyirHSfLV67RwXmo+v&#xA;GKyW0mpanHMg8WiedXUe5GRlAjmkFWvPJtjLaTxW97qVvPJGyxXA1LUHMbspCvxa4o3E70OQVW/w&#xA;lpX+/wDUf+4nqP8A2UYq7/CWlf7/ANR/7ieo/wDZRirv8JaV/v8A1H/uJ6j/ANlGKqNr5NsYomWa&#xA;91KdzJIwc6lqC0R5GZEoLj9hCFr3pXFVb/CWlf7/ANR/7ieo/wDZRirv8JaV/v8A1H/uJ6j/ANlG&#xA;KqK+TbEXckrXupNA8cax2/6S1ABHVnLvy+sVPMMop24++Kq3+EtK/wB/6j/3E9R/7KMVd/hLSv8A&#xA;f+o/9xPUf+yjFVGfybYvLbtHe6lEkUhaZP0lqDeqhjZQlTcfD8bK1R/LTviqt/hLSv8Af+o/9xPU&#xA;f+yjFXf4S0r/AH/qP/cT1H/soxVRvPJtjLaTxW97qVvPJGyxXA1LUHMbspCvxa4o3E70OKq3+EtK&#xA;/wB/6j/3E9R/7KMVd/hLSv8Af+o/9xPUf+yjFXf4S0r/AH/qP/cT1H/soxVRtfJtjFEyzXupTuZJ&#xA;GDnUtQWiPIzIlBcfsIQte9K4qrf4S0r/AH/qP/cT1H/soxV3+EtK/wB/6j/3E9R/7KMVUYPJtikt&#xA;w0l7qUqSyBoU/SWoL6SCNVKVFx8XxqzVP81O2Kq3+EtK/wB/6j/3E9R/7KMVd/hLSv8Af+o/9xPU&#xA;f+yjFUDBpUenec7Bba6vGgn06+M1vcXl1cxs8c9n6b8J5ZFVlEjioFfixVk+KuxV2KuxV2KpNr3/&#xA;AB1fLf8A20ZP+6dd4qnOKoa+0yxvlQXUIkaM1ik3WSNj+1HItHQ+6kHJRmRyQQg/qut2IJtJxqEA&#xA;6W12eEoHglwoNaeEiEnu+TuJ57e79X49y7q9prNpcTi1kD2l6QT9TuAEkIHUpQlJAO5jZgMjLGQL&#xA;5hbR2QS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk13/wAplpf/AGztQ/5P&#xA;2WKpzirsVdirDPP35hr5Su7RHit7hLi1v7gW7T+lcySWdu08ccSFWqJCnCu+5G2KsQP58X4uEt/0&#xA;bYnmPT+ui8YW297JaC+D+lvYgR8zL7098UrtH/Ne+8y+aNCtDopjKPHepBDOrXC+tpUjkSLMIECN&#xA;9ZJjbn8SoTSu2KvYMUOxV2KqF7Y2V9bm3vIEuIG3McihhUdCK9COxyUZEGwtIA2OrWC102f63Av/&#xA;AB43jsTTwjuTycf89A/hVRk+KMue3mP1IpXs9as7i4+qOHtb4DkbO4ASXiOrLQssi/5UbMMjLGQL&#xA;5hbR+QS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkV1I589aZF6ThBpd+wnqvAk3&#xA;FmCgHLnUUqarTfr1xVPcVdirsVdirsVSbXv+Or5b/wC2jJ/3TrvFU5xV2KuxV2KuxVQvbGzvYDBd&#xA;wrNFWoVhWjDoynqrDsRuMlGRBsLSX+hrOnEfVmOp2Q628zAXSDb+7maiyU8JKHxfJ3GXPY/Z+Pd8&#xA;kbozT9Vsr8N6DkSx09a3kBjmjJ3AkjajLXttv2yEoGPNQUXkUuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KpNd/wDKZaX/ANs7UP8Ak/ZYqnOKuxV2KtMyqpZiFVRVmOwAHc4qpC+sinMXERQR&#xA;+sWDrT0v561+zt16YqlWuyRtrHl5FYF01F+aggkV067IqO1cVTvFXYq7FXYq7FXYq7FUHf6TZ3pS&#xA;SRSlzED6F3EeE0df5XG9PFTVT3BycZke5BCE+v6jpnw6mv1mzHTUoV3UD/lohWpX3dKr3IQZLhEv&#xA;p2Pd+r8fNbpNIZoZ4kmgkWWGQBo5EIZWB6EEbEZWRXNK/ArsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdiqTXf/KZaX/2ztQ/5P2WKpzirsVdiqWeZ9GOueW9V0UTm1/SdpPafWAofh68bR8uBK8qculR&#xA;8xirzDT/APnHr6kEprUMxj4MqzWBdGdLqK5EcoNzykt/3HExFq1Jbn2xSq6H+UEHlbX9FlfVZb1J&#xA;547QGNZLSciDT7o85Z4pS8h+AKn2eKfDvir13FDsVdirsVdirsVdirsVdiqVT6NLBM93pEi2s7kv&#xA;NbMCbaZj1LoPsOf9+Jv/ADBumWjJe0t/vRStZatHPN9UuIzaago5NayEfEB1aJx8Mie67j9oKdsj&#xA;KFbjcLaPyCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkV1Ag89aZPV+baXfoRzbhRbizIoleAPxb&#xA;sBU/QMVT3FXYqk+qecPLulara6TfXZiv7z0/q8IilevrTLbx1ZEZV5SuFHIjuegOKpxirsVSbXv+&#xA;Or5b/wC2jJ/3TrvFU5xV2KuxV2KuxV2KuxV2KuxV2KqF7YWl7CIrmMSKrB0NSrI46OjqQyMOzKa5&#xA;KMiOS0l31u/0j4dQZrvTh01AL+9iH/LwiihUf78Uf6wFORnwiXLY936v1I5JtHJHLGssTB43AZHU&#xA;gqykVBBHUHKiKSuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpNd/8plpf/bO1D/k/ZYqnOKuxV435+u0&#xA;u/zX0NPVEUlhd2UCP6Zm4L68E05qYG9EzG6t4eayr1Cty58QpepeZtZ/QflzVNZ9Brr9G2k939WU&#xA;8TJ6EZk4BqGnLjStNsUPLbf8/LyT92+l2kcnBVknkvOMMTtdx2rTyOkcq/VEM286sVYqabENilU0&#xA;H827nzX5i0eBdEeH0J47pLaOZGuV9bTrnkkySiBEPx8k+L4lFeu2KvYMUOxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVKJdLurCR7nRuIViWn0xzxhkJNWaI/7qkPt8LHqKnllomJbS+aK7kbp+p2t/G5iLJLEe&#xA;FxbyDjLE9K8XXt7HoRuCRvkJQMVBRWRS7FXYq7FXYq7FXYq7FXYq7FXYqkV1I589aZF6ThBpd+wn&#xA;qvAk3FmCgHLnUUqarTfr1xVPcVdirz3zXqltY/mLo1kdO0z/AHKLB62oTxWkl27xXAMcYMt1ayoE&#xA;IDRuEl+P7K8hTFXoWKrRHGF4hQFoF4gCnEdB8sVSfXVUat5cYAAtqL1Pc0067xVOsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVQOoaTHcyLdQyG11GJeMN2gBPHrwkU7SRk9VPzBB3ycZ1sdwghTsdVkac&#xA;WGoRi21GhKKCTFOq9XgY0rT9pT8S99qEmUNrG4UFMsrS7FXYq7FXYq7FXYq7FXYq7FUmu/8AlMtL&#xA;/wC2dqH/ACfssVTnFXYq8d8/zQJ+bnl+O+lkRmlsW04khoaG5CukyRWMz0Mij0fVnWkhqGA6KXsW&#xA;KFIXdqUMgmQoE9QuGFOH81a/Z264qlOuujav5dVWBZNRcMAdxXTrsiuKp3irsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVQ9/p9rf2/oXK8lBDo6kq6Ov2XRhurL2IyUZGJsKQgIL+7sJ0stVYPHIQlpqd&#xA;AqyMTRY5gNklPQEfC56cSeOTMRIXH5ItN8qS7FXYq7FXYq7FXYq7FXYqk13/AMplpf8A2ztQ/wCT&#xA;9liqc4q7FXk35hxwQ/mf5ZZJXkuZri0lMUytJbxILgQ8hILmP0GYMRH+4YO5pXc0UvSfMGly6tol&#xA;7pkV5Lp73kTQ/XIOPqxhxRinIEA8aivUdt8UPK7b/nHuS2iEY1qC4WG3ghhSewBST0JraQQ3CrMA&#xA;9rSyUel/MxavYqUToX5Sx+V9c0p5dTkvI7u7SAPGJLW4YQWF4/OeaOXlI1W4rSnFNt64q9bxQ7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsnghnheCdFlhlUpJG4DKysKEEHqDhBrcKk6yz6EwjuXa&#xA;bRiaRXTmr2opss7E1aPwkO6/t/zZbQny+r7/AHfqY8k7BBFRuDlLJ2KuxV2KuxV2KuxV2KpFdQIP&#xA;PWmT1fm2l36Ec24UW4syKJXgD8W7AVP0DFU9xV2KvGfPqaD5i/ODStCuprON7GGE3CXxtk9Ws8cn&#xA;oQh1knlkkjlARVMYU1YM5UqFL2bFDsVSbXv+Or5b/wC2jJ/3TrvFU5xV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KtMqspVgCpFCDuCDiqSSc/LwMqBpdDrWSMfE1kP5kA3MA7r+x2+HZbh6/wCt&#xA;9/7fvY8k7R0kRZI2Do4DI6moIO4IIykhk3irsVdirsVdirsVSa7/AOUy0v8A7Z2of8n7LFU5xV2K&#xA;vNvN3nnW9L/MnRdDNxFaaVdvbKEWsk85uJvT5ODDKEj5D09mX4iKsOS4pZ7rWoJpukXuoPJDCtpB&#xA;JMZbpzFAvBSwMsgDlU2+IhTQdjih5TF+fl27RRvpFrbvNBA6vLfUjja4nihWeYiIlLUC4BZz8Ssr&#xA;IVBGKV+hfm+nmnzDosUuky2McEyXYVDJdXC+vp1yOEsEcXJKl6oRWqgttir1/FDsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVSV4zoPKaBC2i7tNbRqSbbuZIlXcx/zIPs9R3GXXx8/q+9HJ&#xA;OIpYpoklidZIpFDxyIQysrCoII2IIyoikrsCuxV2KuxV2KpFdTofPWmQUfmul37k8G4Ua4swKPTg&#xA;T8O6g1H0jFU9xV2KsA1Lyf5qufzHj1p0t7zy+hjaKKTVL+3lhZfQbmtrFE9vIEeBm4MwDlgTSm6r&#xA;PZYopY2ilRZI3FHRgGUg9iDiqnHZWUcXpR28aRFTGY1RQvA1JWgFKbnbFUr11VGreXGAALai9T3N&#xA;NOu8VTrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUkkQ6A5mgQnRZXLXMK/8erO&#xA;atMg/wB9E7uv7P2ulcuHr5/V9/7WPJOlZWUMpBUioI3BBylk3irsVdirsVSa7/5TLS/+2dqH/J+y&#xA;xVOcVdirsVdirsVSXXWU6t5cUEErqL1HcV067xVOsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdiqSU/QEjMSTocjD4f+WNmNNqf7oYn/nn/qfYu+v+t9/7fv8AfzjyTvKWTsVdirsV&#xA;Sa7/AOUy0v8A7Z2of8n7LFU5xV2KuxV2KuxV5jJ+Xc+m/mBDryao0Z1jUpOHoQosyg2V3KfVkl9Z&#xA;JOP92nwDim3XfFL07FDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaZVdSjgMrC&#xA;jKdwQeoIxVJrUtotxFYSsTpUzCPT5m/3S52W2f8AyT/upj/qHfjyul6xf8XX9f6/mx5J1lLJ2Kux&#xA;VIrqNx560yX1XKHS79RBReAIuLMlwePOprQ1am3Triqe4q7FXYq7FXYqk2vf8dXy3/20ZP8AunXe&#xA;KpzirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqldWtvd20ttcxiWCZSksbd&#xA;CpFCMMSQbCpfp9zcWd0NKvpDIxBawu36zIu5jY/79jXr/MPiH7XGyQBHEPj+O5ATXKkuxVJrv/lM&#xA;tL/7Z2of8n7LFU5xV2KuxVJdZ81WOmtcwMkouYYHmWae3u47AcIzJWa/SCWCJPh+NiTx8K7Yq84i&#xA;/P8Ad5LaI6TbK1zHCVna+4xAz3HoJO1YOSWqj4pJGHJCeLJUYppU0n83U8x+ZtCtpdLe0iikS8/d&#xA;PJdzqZtLkfhJBFCGUH6yPTYV5KpaijFXruKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYqhtR0+G/tTBKWQgh4ZkNHjkU1SRDv8Sn6D0NRUZKEjE2ghQ0rUZpjJZ3qrHqVrT10&#xA;XZZENeE0YJJ4PT6DVe2SnGtxyKgphlaUiup0PnrTIKPzXS79yeDcKNcWYFHpwJ+HdQaj6Riqe4q7&#xA;FXYqtkjjkjaORQ8bgq6MAQQRQgg9QcVUo7Cxij9OO2iSPiY+CooXgxJZaAdCTuMVSvXUQav5dcKA&#xA;7ai4ZgNzTTrylTiqd4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgN&#xA;V0+W4EdzZusWo2tTbStXiQftRSU3MclN/A0YbgZOEq2PIoIR4rQV2PcDfIJSa7/5TLS/+2dqH/J+&#xA;yxVOcVdirsVdirsVSbXv+Or5b/7aMn/dOu8VTnFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FUmu/+Uy0v/tnah/yfssVTnFXYq7FUl1ny/qeoNcm38wX+nJPA8KQW&#xA;y2fpxs8ZQSqz27T8lJ5j971HhirzK2/5x8u7ZLdV1i3nW0ijSNLi0LiVYbprhbWakgDWsinjIlNz&#xA;v7YpSTzP5Kf8vpNL1ebUJbqSsFrb3NswsZ+dtYek/KZ1uhK5ihdLaHj+2Ry23Veyf4T/AO1zqn/S&#xA;T/zbih3+E/8Atc6p/wBJP/NuKpV5q8vwWXlrVLq41u9W3htpWma7vWhgEfA8jJIkUrKvHwUnFK3y&#xA;jYSa/wCWtO1mTUdTtXvoRMbdbz1QtfB/TQnx3UEdCAdsVTf/AAn/ANrnVP8ApJ/5txQ7/Cf/AGud&#xA;U/6Sf+bcVYb+WtzB5nj15YbrWNPj0vVJbaKKa4cSSRyxx3QndWjXg0jTseHUClcUsy/wn/2udU/6&#xA;Sf8Am3FDv8J/9rnVP+kn/m3FWFQXkLfmtc+Uxd6pFILBJXv3vTylKfvFWOJY2oiCZquzAFthuN1L&#xA;Nf8ACf8A2udU/wCkn/m3FDv8J/8Aa51T/pJ/5txVg/5i6jD5X1fytayXWp3h1W/EKym+MXocmS2M&#xA;gAik5kC76bfxClnH+E/+1zqn/ST/AM24od/hP/tc6p/0k/8ANuKsd852UGlW+n29zql9Na6xeRaZ&#xA;OJdQ9BlW6/dlkX0n9Sld1qu3fFKH/Li8bzjok2pNf6hamKZIwkN/9YUiW1gulBf0oqPGLn05Fp8L&#xA;qwxVlX+E/wDtc6p/0k/824oS3zJpTaN5f1HVl1XUZjYW0tyIpb30Uf0lLcTJ6cnGtKV4nFLGPJWp&#xA;W2ta9Jo9nqN2tv8Ao+HVpJINTM0kUl9xnaGZDBGoYmdmHBm+EAtx5qMVZz/hP/tc6p/0k/8ANuKH&#xA;f4T/AO1zqn/ST/zbiryzTfOMT6zY6elxqLXOra5d6df3FveyTW8QtT9XicTCBQ0kojQhNvhqx7VU&#xA;vU/8J/8Aa51T/pJ/5txQ7/Cf/a51T/pJ/wCbcVYB5m81W/k3zFrF8ZJ9W1HSLC0hsLa41BGQpq90&#xA;FlknRoUaD0ntI6nmwIZfslsUvU9J1BdR0qy1BF4peQRXCrvsJUDgfEEbv3UfLFCKxV2KuxV2KrXj&#xA;jkADqHCkMAwBoymoO/cHFV2KuxVbLFFLG0UqLJG4o6MAykHsQcVahhhhiWKFFiiQUSNAFUD2A2xV&#xA;firsVWrHGrOyqFaQ8nIABY0C1PiaKBiq7FXYqt9OP1PV4j1KcedBy41rSvhiq7FVO5jllt5Y4pTB&#xA;K6Msc6hWZGIoHAcMpKnfcUxV5G3m783LGO3XUdCXVJpIp7kTJYzsIZ4RNDGkaRnb+4SU82DP6xCH&#xA;4QCpZt+X+u+b9asrm88xaamk8fqyW1p6cqSlmtYpbiRjKfs+tKyKoX4eJqSeihlWKqc9rbXHD14U&#xA;l9Ng8fNQ3Fh0YV6HFVyRxxqVRQikliFAAqxLMdu5JqcVXYqtliiljaKVFkjcUdGAZSD2IOKqUGn2&#xA;FvIZLe2ihkKhC8aKrFRQBagdBQbYqr4q7FVGGys4V4wwRxrz9SiIqjmRTnsPtU74qrYq7FVBrCxe&#xA;WSZraJpZV4SyFFLMm3wsaVI2G2Kq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:8A17B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8A17B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8A17B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T16:43:55+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -250.926 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 250.926 li
342.002 250.926 li
342.002 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 250.926 mo
342.002 250.926 li
342.002 0 li
0 0 li
0 250.926 li
cp
clp
50.5581 227.258 mo
327.134 227.258 li
327.134 13.1353 li
50.5581 13.1353 li
50.5581 227.258 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
50.5576 227.258 mo
327.134 227.258 li
327.134 13.1353 li
50.5576 13.1353 li
50.5576 227.258 li
cp
clp
.61957 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
50.5576 13.1353 mo
67.8438 20.3618 li
85.1299 28.1665 li
102.416 36.5957 li
119.702 45.6992 li
136.988 55.5313 li
154.274 66.1494 li
171.56 77.6177 li
188.846 90.0029 li
206.132 103.379 li
223.417 117.825 li
240.704 133.426 li
257.99 150.276 li
275.276 168.475 li
292.562 188.128 li
309.848 209.354 li
.884 .769 0 0 cmyk
@
grestore
50.5576 227.258 mo
50.5576 224.779 li
50.5576 227.258 li
cp
.75 .68 .67 .902 cmyk
f
.309785 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
50.5576 227.258 mo
50.5576 224.78 li
@
50.5576 15.6133 mo
50.5576 13.1353 li
50.5576 15.6133 li
cp
f
50.5576 13.1353 mo
50.5576 15.6133 li
@
gsave
0 0 mo
342.002 0 li
342.002 250.926 li
0 250.926 li
0 0 li
cp
clp
51.0488 230.318 mo
50.6694 230.318 50.3872 230.504 50.1938 230.876 cv
50.0005 231.248 49.9111 231.805 49.9111 232.549 cv
49.9111 233.292 50.0005 233.85 50.1938 234.222 cv
50.3872 234.594 50.6694 234.779 51.0488 234.779 cv
51.4277 234.779 51.7104 234.594 51.9038 234.222 cv
52.0898 233.85 52.1865 233.292 52.1865 232.549 cv
52.1865 231.805 52.0898 231.248 51.9038 230.876 cv
51.7104 230.504 51.4277 230.318 51.0488 230.318 cv
51.0488 229.738 mo
51.6509 229.738 52.1118 229.983 52.439 230.459 cv
52.7588 230.943 52.9224 231.642 52.9224 232.549 cv
52.9224 233.463 52.7588 234.162 52.439 234.638 cv
52.1118 235.113 51.6509 235.352 51.0488 235.352 cv
50.439 235.352 49.9707 235.113 49.6509 234.638 cv
49.3315 234.162 49.1753 233.463 49.1753 232.549 cv
49.1753 231.642 49.3315 230.943 49.6509 230.459 cv
49.9707 229.983 50.439 229.738 51.0488 229.738 cv
f
85.1299 227.258 mo
85.1299 224.78 li
f
85.1299 227.258 mo
85.1299 224.78 li
@
85.1299 13.1353 mo
85.1299 15.6133 li
f
85.1299 13.1353 mo
85.1299 15.6133 li
@
84.834 234.638 mo
87.3916 234.638 li
87.3916 235.255 li
83.9492 235.255 li
83.9492 234.638 li
84.2246 234.355 84.6035 233.969 85.0869 233.478 cv
85.563 232.995 85.8677 232.683 85.9941 232.541 cv
86.2319 232.281 86.3955 232.058 86.4849 231.872 cv
86.5737 231.693 86.626 231.508 86.626 231.329 cv
86.626 231.047 86.522 230.809 86.3213 230.631 cv
86.1206 230.451 85.8604 230.355 85.5332 230.355 cv
85.3027 230.355 85.0571 230.4 84.8042 230.475 cv
84.5518 230.556 84.2764 230.675 83.9863 230.838 cv
83.9863 230.095 li
84.2842 229.977 84.5591 229.887 84.812 229.827 cv
85.0645 229.769 85.3027 229.738 85.5181 229.738 cv
86.0757 229.738 86.522 229.879 86.8564 230.162 cv
87.1909 230.444 87.3618 230.816 87.3618 231.285 cv
87.3618 231.508 87.3174 231.723 87.2354 231.916 cv
87.1538 232.117 87.0049 232.355 86.7822 232.623 cv
86.7227 232.697 86.5293 232.898 86.2021 233.232 cv
85.875 233.566 85.4214 234.035 84.834 234.638 cv
f
119.702 227.258 mo
119.702 224.78 li
f
119.702 227.258 mo
119.702 224.78 li
@
119.702 13.1353 mo
119.702 15.6133 li
f
119.702 13.1353 mo
119.702 15.6133 li
@
120.538 230.377 mo
118.686 233.27 li
120.538 233.27 li
120.538 230.377 li
120.344 229.738 mo
121.266 229.738 li
121.266 233.27 li
122.04 233.27 li
122.04 233.879 li
121.266 233.879 li
121.266 235.158 li
120.538 235.158 li
120.538 233.879 li
118.091 233.879 li
118.091 233.173 li
120.344 229.738 li
cp
f
154.274 227.258 mo
154.274 224.78 li
f
154.274 227.258 mo
154.274 224.78 li
@
154.274 13.1353 mo
154.274 15.6133 li
f
154.274 13.1353 mo
154.274 15.6133 li
@
154.859 232.252 mo
154.532 232.252 154.271 232.369 154.078 232.594 cv
153.885 232.816 153.788 233.129 153.788 233.516 cv
153.788 233.909 153.885 234.222 154.078 234.444 cv
154.271 234.667 154.532 234.779 154.859 234.779 cv
155.186 234.779 155.446 234.667 155.64 234.444 cv
155.833 234.222 155.93 233.909 155.93 233.516 cv
155.93 233.129 155.833 232.816 155.64 232.594 cv
155.446 232.369 155.186 232.252 154.859 232.252 cv
156.316 229.954 mo
156.316 230.623 li
156.13 230.533 155.944 230.467 155.758 230.422 cv
155.565 230.378 155.379 230.354 155.201 230.354 cv
154.71 230.354 154.338 230.52 154.085 230.846 cv
153.833 231.174 153.684 231.671 153.654 232.326 cv
153.796 232.117 153.974 231.954 154.19 231.842 cv
154.405 231.73 154.643 231.671 154.903 231.671 cv
155.446 231.671 155.877 231.842 156.19 232.17 cv
156.502 232.496 156.666 232.95 156.666 233.516 cv
156.666 234.072 156.495 234.52 156.167 234.854 cv
155.84 235.188 155.402 235.352 154.859 235.352 cv
154.234 235.352 153.751 235.113 153.424 234.638 cv
153.089 234.162 152.926 233.463 152.926 232.548 cv
152.926 231.693 153.126 231.01 153.536 230.504 cv
153.937 229.998 154.487 229.738 155.171 229.738 cv
155.35 229.738 155.536 229.76 155.729 229.789 cv
155.915 229.828 156.108 229.879 156.316 229.954 cv
f
188.846 227.258 mo
188.846 224.78 li
f
188.846 227.258 mo
188.846 224.78 li
@
188.846 13.1353 mo
188.846 15.6133 li
f
188.846 13.1353 mo
188.846 15.6133 li
@
189.351 232.683 mo
189.002 232.683 188.727 232.779 188.526 232.965 cv
188.326 233.15 188.229 233.403 188.229 233.73 cv
188.229 234.059 188.326 234.318 188.526 234.504 cv
188.727 234.689 189.002 234.779 189.351 234.779 cv
189.694 234.779 189.968 234.689 190.169 234.496 cv
190.371 234.311 190.474 234.059 190.474 233.73 cv
190.474 233.403 190.371 233.15 190.176 232.965 cv
189.976 232.779 189.701 232.683 189.351 232.683 cv
188.615 232.369 mo
188.303 232.296 188.057 232.147 187.879 231.932 cv
187.701 231.715 187.619 231.456 187.619 231.144 cv
187.619 230.712 187.767 230.371 188.08 230.117 cv
188.384 229.864 188.808 229.738 189.351 229.738 cv
189.886 229.738 190.311 229.864 190.624 230.117 cv
190.927 230.371 191.083 230.712 191.083 231.144 cv
191.083 231.456 190.995 231.715 190.816 231.932 cv
190.637 232.147 190.4 232.296 190.087 232.369 cv
190.437 232.452 190.711 232.615 190.914 232.854 cv
191.106 233.091 191.209 233.389 191.209 233.73 cv
191.209 234.259 191.046 234.66 190.727 234.936 cv
190.4 235.218 189.946 235.352 189.351 235.352 cv
188.749 235.352 188.288 235.218 187.969 234.936 cv
187.649 234.66 187.493 234.259 187.493 233.73 cv
187.493 233.389 187.589 233.091 187.79 232.854 cv
187.983 232.615 188.258 232.452 188.615 232.369 cv
188.347 231.21 mo
188.347 231.492 188.43 231.715 188.608 231.871 cv
188.786 232.027 189.032 232.102 189.351 232.102 cv
189.664 232.102 189.909 232.027 190.087 231.871 cv
190.266 231.715 190.355 231.492 190.355 231.21 cv
190.355 230.928 190.266 230.712 190.087 230.556 cv
189.909 230.399 189.664 230.318 189.351 230.318 cv
189.032 230.318 188.786 230.399 188.608 230.556 cv
188.43 230.712 188.347 230.928 188.347 231.21 cv
f
223.417 227.258 mo
223.417 224.78 li
f
223.417 227.258 mo
223.417 224.78 li
@
223.417 13.1353 mo
223.417 15.6133 li
f
223.417 13.1353 mo
223.417 15.6133 li
@
220.259 234.638 mo
221.457 234.638 li
221.457 230.504 li
220.156 230.764 li
220.156 230.095 li
221.449 229.834 li
222.184 229.834 li
222.184 234.638 li
223.382 234.638 li
223.382 235.255 li
220.259 235.255 li
220.259 234.638 li
cp
f
226.43 230.318 mo
226.051 230.318 225.769 230.504 225.576 230.876 cv
225.382 231.248 225.292 231.805 225.292 232.549 cv
225.292 233.292 225.382 233.85 225.576 234.222 cv
225.769 234.594 226.051 234.779 226.43 234.779 cv
226.809 234.779 227.091 234.594 227.286 234.222 cv
227.471 233.85 227.568 233.292 227.568 232.549 cv
227.568 231.805 227.471 231.248 227.286 230.876 cv
227.091 230.504 226.809 230.318 226.43 230.318 cv
226.43 229.738 mo
227.033 229.738 227.494 229.983 227.821 230.459 cv
228.14 230.943 228.303 231.642 228.303 232.549 cv
228.303 233.463 228.14 234.162 227.821 234.638 cv
227.494 235.113 227.033 235.352 226.43 235.352 cv
225.821 235.352 225.352 235.113 225.033 234.638 cv
224.713 234.162 224.557 233.463 224.557 232.549 cv
224.557 231.642 224.713 230.943 225.033 230.459 cv
225.352 229.983 225.821 229.738 226.43 229.738 cv
f
257.99 227.258 mo
257.99 224.78 li
f
257.99 227.258 mo
257.99 224.78 li
@
257.99 13.1353 mo
257.99 15.6133 li
f
257.99 13.1353 mo
257.99 15.6133 li
@
254.958 234.638 mo
256.154 234.638 li
256.154 230.504 li
254.853 230.764 li
254.853 230.095 li
256.147 229.834 li
256.883 229.834 li
256.883 234.638 li
258.08 234.638 li
258.08 235.255 li
254.958 235.255 li
254.958 234.638 li
cp
f
260.192 234.638 mo
262.75 234.638 li
262.75 235.255 li
259.306 235.255 li
259.306 234.638 li
259.582 234.355 259.961 233.969 260.444 233.478 cv
260.92 232.995 261.225 232.683 261.351 232.541 cv
261.589 232.281 261.752 232.058 261.842 231.872 cv
261.931 231.693 261.983 231.508 261.983 231.329 cv
261.983 231.047 261.879 230.809 261.678 230.631 cv
261.478 230.451 261.217 230.355 260.89 230.355 cv
260.66 230.355 260.414 230.4 260.162 230.475 cv
259.909 230.556 259.634 230.675 259.344 230.838 cv
259.344 230.095 li
259.641 229.977 259.917 229.887 260.169 229.827 cv
260.422 229.769 260.66 229.738 260.875 229.738 cv
261.433 229.738 261.879 229.879 262.213 230.162 cv
262.548 230.444 262.719 230.816 262.719 231.285 cv
262.719 231.508 262.674 231.723 262.593 231.916 cv
262.511 232.117 262.363 232.355 262.139 232.623 cv
262.08 232.697 261.886 232.898 261.559 233.232 cv
261.232 233.566 260.778 234.035 260.192 234.638 cv
f
292.562 227.258 mo
292.562 224.78 li
f
292.562 227.258 mo
292.562 224.78 li
@
292.562 13.1353 mo
292.562 15.6133 li
f
292.562 13.1353 mo
292.562 15.6133 li
@
289.365 234.541 mo
290.561 234.541 li
290.561 230.407 li
289.26 230.667 li
289.26 229.998 li
290.554 229.738 li
291.291 229.738 li
291.291 234.541 li
292.487 234.541 li
292.487 235.158 li
289.365 235.158 li
289.365 234.541 li
cp
f
295.981 230.377 mo
294.13 233.27 li
295.981 233.27 li
295.981 230.377 li
295.788 229.738 mo
296.71 229.738 li
296.71 233.27 li
297.484 233.27 li
297.484 233.879 li
296.71 233.879 li
296.71 235.158 li
295.981 235.158 li
295.981 233.879 li
293.536 233.879 li
293.536 233.173 li
295.788 229.738 li
cp
f
327.134 227.258 mo
327.134 224.78 li
f
327.134 227.258 mo
327.134 224.78 li
@
327.134 13.1353 mo
327.134 15.6133 li
f
327.134 13.1353 mo
327.134 15.6133 li
@
323.965 234.638 mo
325.163 234.638 li
325.163 230.504 li
323.862 230.764 li
323.862 230.095 li
325.155 229.834 li
325.891 229.834 li
325.891 234.638 li
327.088 234.638 li
327.088 235.255 li
323.965 235.255 li
323.965 234.638 li
cp
f
330.226 232.252 mo
329.899 232.252 329.638 232.369 329.445 232.594 cv
329.252 232.816 329.155 233.129 329.155 233.516 cv
329.155 233.909 329.252 234.222 329.445 234.444 cv
329.638 234.667 329.899 234.779 330.226 234.779 cv
330.552 234.779 330.813 234.667 331.006 234.444 cv
331.2 234.222 331.296 233.909 331.296 233.516 cv
331.296 233.129 331.2 232.816 331.006 232.594 cv
330.813 232.369 330.552 232.252 330.226 232.252 cv
331.683 229.954 mo
331.683 230.623 li
331.498 230.533 331.311 230.467 331.125 230.422 cv
330.932 230.378 330.747 230.354 330.568 230.354 cv
330.078 230.354 329.706 230.52 329.453 230.846 cv
329.2 231.174 329.051 231.671 329.021 232.326 cv
329.163 232.117 329.34 231.954 329.557 231.842 cv
329.772 231.73 330.009 231.671 330.27 231.671 cv
330.813 231.671 331.245 231.842 331.556 232.17 cv
331.869 232.496 332.033 232.95 332.033 233.516 cv
332.033 234.072 331.862 234.52 331.534 234.854 cv
331.208 235.188 330.769 235.352 330.226 235.352 cv
329.601 235.352 329.118 235.113 328.791 234.638 cv
328.457 234.162 328.292 233.463 328.292 232.548 cv
328.292 231.693 328.494 231.01 328.902 230.504 cv
329.304 229.998 329.854 229.738 330.539 229.738 cv
330.716 229.738 330.903 229.76 331.095 229.789 cv
331.282 229.828 331.475 229.879 331.683 229.954 cv
f
180.962 238.461 mo
181.744 238.461 li
183.246 240.691 li
184.741 238.461 li
185.528 238.461 li
183.61 241.301 li
183.61 243.881 li
182.874 243.881 li
182.874 241.301 li
180.962 238.461 li
cp
f
189.692 241.68 mo
189.692 242.007 li
186.622 242.007 li
186.651 242.467 186.785 242.824 187.038 243.063 cv
187.283 243.301 187.625 243.42 188.071 243.42 cv
188.324 243.42 188.576 243.39 188.815 243.33 cv
189.052 243.271 189.297 243.174 189.536 243.041 cv
189.536 243.672 li
189.297 243.776 189.052 243.858 188.799 243.902 cv
188.546 243.947 188.286 243.977 188.034 243.977 cv
187.379 243.977 186.866 243.791 186.487 243.42 cv
186.108 243.048 185.922 242.535 185.922 241.888 cv
185.922 241.227 186.101 240.698 186.458 240.305 cv
186.814 239.918 187.304 239.717 187.915 239.717 cv
188.465 239.717 188.896 239.896 189.215 240.244 cv
189.528 240.602 189.692 241.078 189.692 241.68 cv
189.023 241.486 mo
189.014 241.122 188.911 240.832 188.718 240.608 cv
188.517 240.394 188.25 240.282 187.922 240.282 cv
187.55 240.282 187.252 240.394 187.03 240.602 cv
186.807 240.811 186.673 241.107 186.643 241.486 cv
189.023 241.486 li
f
192.636 241.836 mo
192.093 241.836 191.721 241.902 191.512 242.021 cv
191.305 242.148 191.201 242.356 191.201 242.654 cv
191.201 242.892 191.276 243.085 191.431 243.219 cv
191.587 243.359 191.802 243.427 192.071 243.427 cv
192.442 243.427 192.74 243.301 192.962 243.033 cv
193.186 242.772 193.297 242.424 193.297 241.984 cv
193.297 241.836 li
192.636 241.836 li
193.966 241.561 mo
193.966 243.881 li
193.297 243.881 li
193.297 243.264 li
193.141 243.516 192.948 243.694 192.725 243.807 cv
192.502 243.918 192.219 243.977 191.892 243.977 cv
191.476 243.977 191.141 243.865 190.896 243.635 cv
190.651 243.404 190.532 243.092 190.532 242.698 cv
190.532 242.244 190.68 241.902 190.993 241.665 cv
191.297 241.435 191.75 241.315 192.361 241.315 cv
193.297 241.315 li
193.297 241.248 li
193.297 240.943 193.193 240.705 192.993 240.535 cv
192.792 240.371 192.509 240.281 192.145 240.281 cv
191.907 240.281 191.684 240.312 191.461 240.371 cv
191.238 240.431 191.03 240.512 190.83 240.617 cv
190.83 240 li
191.067 239.91 191.305 239.836 191.536 239.791 cv
191.766 239.746 191.989 239.717 192.211 239.717 cv
192.799 239.717 193.238 239.873 193.528 240.178 cv
193.818 240.482 193.966 240.943 193.966 241.561 cv
f
197.699 240.438 mo
197.625 240.394 197.542 240.363 197.454 240.342 cv
197.365 240.326 197.268 240.313 197.164 240.313 cv
196.784 240.313 196.495 240.438 196.293 240.684 cv
196.085 240.929 195.989 241.277 195.989 241.739 cv
195.989 243.881 li
195.32 243.881 li
195.32 239.813 li
195.989 239.813 li
195.989 240.445 li
196.123 240.2 196.309 240.014 196.532 239.896 cv
196.754 239.776 197.03 239.717 197.357 239.717 cv
197.402 239.717 197.454 239.725 197.513 239.725 cv
197.565 239.731 197.625 239.739 197.699 239.754 cv
197.699 240.438 li
f
50.5576 227.258 mo
53.0361 227.258 li
f
50.5576 227.258 mo
53.0361 227.258 li
@
327.134 227.258 mo
324.656 227.258 li
f
327.134 227.258 mo
324.656 227.258 li
@
33.2275 225.184 mo
31.376 228.076 li
33.2275 228.076 li
33.2275 225.184 li
33.0342 224.545 mo
33.9561 224.545 li
33.9561 228.076 li
34.729 228.076 li
34.729 228.686 li
33.9561 228.686 li
33.9561 229.965 li
33.2275 229.965 li
33.2275 228.686 li
30.7813 228.686 li
30.7813 227.979 li
33.0342 224.545 li
cp
f
37.5098 225.027 mo
37.1309 225.027 36.8481 225.213 36.6548 225.585 cv
36.4614 225.957 36.3726 226.515 36.3726 227.258 cv
36.3726 228.002 36.4614 228.559 36.6548 228.931 cv
36.8481 229.303 37.1309 229.488 37.5098 229.488 cv
37.8892 229.488 38.1719 229.303 38.3647 228.931 cv
38.5508 228.559 38.6475 228.002 38.6475 227.258 cv
38.6475 226.515 38.5508 225.957 38.3647 225.585 cv
38.1719 225.213 37.8892 225.027 37.5098 225.027 cv
37.5098 224.447 mo
38.1123 224.447 38.5732 224.693 38.9004 225.169 cv
39.2197 225.652 39.3833 226.352 39.3833 227.258 cv
39.3833 228.172 39.2197 228.871 38.9004 229.348 cv
38.5732 229.823 38.1123 230.061 37.5098 230.061 cv
36.9004 230.061 36.4321 229.823 36.1123 229.348 cv
35.7925 228.871 35.6362 228.172 35.6362 227.258 cv
35.6362 226.352 35.7925 225.652 36.1123 225.169 cv
36.4321 224.693 36.9004 224.447 37.5098 224.447 cv
f
42.2383 225.027 mo
41.8594 225.027 41.5767 225.213 41.3833 225.585 cv
41.1899 225.957 41.1011 226.515 41.1011 227.258 cv
41.1011 228.002 41.1899 228.559 41.3833 228.931 cv
41.5767 229.303 41.8594 229.488 42.2383 229.488 cv
42.6177 229.488 42.8999 229.303 43.0933 228.931 cv
43.2793 228.559 43.376 228.002 43.376 227.258 cv
43.376 226.515 43.2793 225.957 43.0933 225.585 cv
42.8999 225.213 42.6177 225.027 42.2383 225.027 cv
42.2383 224.447 mo
42.8408 224.447 43.3018 224.693 43.6289 225.169 cv
43.9482 225.652 44.1118 226.352 44.1118 227.258 cv
44.1118 228.172 43.9482 228.871 43.6289 229.348 cv
43.3018 229.823 42.8408 230.061 42.2383 230.061 cv
41.6289 230.061 41.1602 229.823 40.8408 229.348 cv
40.521 228.871 40.3647 228.172 40.3647 227.258 cv
40.3647 226.352 40.521 225.652 40.8408 225.169 cv
41.1602 224.693 41.6289 224.447 42.2383 224.447 cv
f
46.9668 225.027 mo
46.5879 225.027 46.3052 225.213 46.1118 225.585 cv
45.9185 225.957 45.8296 226.515 45.8296 227.258 cv
45.8296 228.002 45.9185 228.559 46.1118 228.931 cv
46.3052 229.303 46.5879 229.488 46.9668 229.488 cv
47.3462 229.488 47.6284 229.303 47.8218 228.931 cv
48.0078 228.559 48.1045 228.002 48.1045 227.258 cv
48.1045 226.515 48.0078 225.957 47.8218 225.585 cv
47.6284 225.213 47.3462 225.027 46.9668 225.027 cv
46.9668 224.447 mo
47.5688 224.447 48.0303 224.693 48.3574 225.169 cv
48.6768 225.652 48.8403 226.352 48.8403 227.258 cv
48.8403 228.172 48.6768 228.871 48.3574 229.348 cv
48.0303 229.823 47.5688 230.061 46.9668 230.061 cv
46.3574 230.061 45.8887 229.823 45.5693 229.348 cv
45.2495 228.871 45.0933 228.172 45.0933 227.258 cv
45.0933 226.352 45.2495 225.652 45.5693 225.169 cv
45.8887 224.693 46.3574 224.447 46.9668 224.447 cv
f
grestore
24.9756 228.049 mo
29.6294 228.049 li
29.6294 227.432 li
24.9756 227.432 li
24.9756 228.049 li
cp
f
50.5576 200.492 mo
53.0366 200.492 li
50.5576 200.492 li
cp
f
50.5576 200.492 mo
53.0361 200.492 li
@
324.656 200.492 mo
327.134 200.492 li
324.656 200.492 li
cp
f
327.134 200.492 mo
324.656 200.492 li
@
gsave
0 0 mo
342.002 0 li
342.002 250.926 li
0 250.926 li
0 0 li
cp
clp
31.8447 202.582 mo
34.4023 202.582 li
34.4023 203.199 li
30.96 203.199 li
30.96 202.582 li
31.2349 202.3 31.6143 201.913 32.0972 201.422 cv
32.5732 200.939 32.8779 200.627 33.0044 200.484 cv
33.2422 200.225 33.4058 200.002 33.4951 199.816 cv
33.5845 199.637 33.6362 199.451 33.6362 199.273 cv
33.6362 198.99 33.5322 198.752 33.3315 198.574 cv
33.1309 198.396 32.8706 198.3 32.5435 198.3 cv
32.313 198.3 32.0674 198.344 31.8149 198.418 cv
31.562 198.5 31.2871 198.619 30.9971 198.782 cv
30.9971 198.039 li
31.2944 197.92 31.5693 197.83 31.8223 197.771 cv
32.0752 197.713 32.313 197.683 32.5283 197.683 cv
33.0859 197.683 33.5322 197.823 33.8667 198.105 cv
34.2012 198.389 34.3726 198.76 34.3726 199.229 cv
34.3726 199.451 34.3276 199.668 34.2461 199.86 cv
34.1641 200.062 34.0156 200.299 33.7925 200.566 cv
33.7329 200.641 33.5396 200.842 33.2124 201.176 cv
32.8853 201.511 32.4321 201.979 31.8447 202.582 cv
f
37.5098 198.262 mo
37.1309 198.262 36.8481 198.447 36.6548 198.82 cv
36.4614 199.191 36.3726 199.749 36.3726 200.493 cv
36.3726 201.236 36.4614 201.793 36.6548 202.166 cv
36.8481 202.537 37.1309 202.723 37.5098 202.723 cv
37.8892 202.723 38.1719 202.537 38.3647 202.166 cv
38.5508 201.793 38.6475 201.236 38.6475 200.493 cv
38.6475 199.749 38.5508 199.191 38.3647 198.82 cv
38.1719 198.447 37.8892 198.262 37.5098 198.262 cv
37.5098 197.682 mo
38.1123 197.682 38.5732 197.928 38.9004 198.404 cv
39.2197 198.887 39.3833 199.586 39.3833 200.493 cv
39.3833 201.406 39.2197 202.105 38.9004 202.582 cv
38.5732 203.058 38.1123 203.295 37.5098 203.295 cv
36.9004 203.295 36.4321 203.058 36.1123 202.582 cv
35.7925 202.105 35.6362 201.406 35.6362 200.493 cv
35.6362 199.586 35.7925 198.887 36.1123 198.404 cv
36.4321 197.928 36.9004 197.682 37.5098 197.682 cv
f
42.2383 198.262 mo
41.8594 198.262 41.5767 198.447 41.3833 198.82 cv
41.1899 199.191 41.1011 199.749 41.1011 200.493 cv
41.1011 201.236 41.1899 201.793 41.3833 202.166 cv
41.5767 202.537 41.8594 202.723 42.2383 202.723 cv
42.6177 202.723 42.8999 202.537 43.0933 202.166 cv
43.2793 201.793 43.376 201.236 43.376 200.493 cv
43.376 199.749 43.2793 199.191 43.0933 198.82 cv
42.8999 198.447 42.6177 198.262 42.2383 198.262 cv
42.2383 197.682 mo
42.8408 197.682 43.3018 197.928 43.6289 198.404 cv
43.9482 198.887 44.1118 199.586 44.1118 200.493 cv
44.1118 201.406 43.9482 202.105 43.6289 202.582 cv
43.3018 203.058 42.8408 203.295 42.2383 203.295 cv
41.6289 203.295 41.1602 203.058 40.8408 202.582 cv
40.521 202.105 40.3647 201.406 40.3647 200.493 cv
40.3647 199.586 40.521 198.887 40.8408 198.404 cv
41.1602 197.928 41.6289 197.682 42.2383 197.682 cv
f
46.9668 198.262 mo
46.5879 198.262 46.3052 198.447 46.1118 198.82 cv
45.9185 199.191 45.8296 199.749 45.8296 200.493 cv
45.8296 201.236 45.9185 201.793 46.1118 202.166 cv
46.3052 202.537 46.5879 202.723 46.9668 202.723 cv
47.3462 202.723 47.6284 202.537 47.8218 202.166 cv
48.0078 201.793 48.1045 201.236 48.1045 200.493 cv
48.1045 199.749 48.0078 199.191 47.8218 198.82 cv
47.6284 198.447 47.3462 198.262 46.9668 198.262 cv
46.9668 197.682 mo
47.5688 197.682 48.0303 197.928 48.3574 198.404 cv
48.6768 198.887 48.8403 199.586 48.8403 200.493 cv
48.8403 201.406 48.6768 202.105 48.3574 202.582 cv
48.0303 203.058 47.5688 203.295 46.9668 203.295 cv
46.3574 203.295 45.8887 203.058 45.5693 202.582 cv
45.2495 202.105 45.0933 201.406 45.0933 200.493 cv
45.0933 199.586 45.2495 198.887 45.5693 198.404 cv
45.8887 197.928 46.3574 197.682 46.9668 197.682 cv
f
grestore
24.9756 201.283 mo
29.6294 201.283 li
29.6294 200.666 li
24.9756 200.666 li
24.9756 201.283 li
cp
f
50.5576 173.729 mo
53.0366 173.729 li
50.5576 173.729 li
cp
f
50.5576 173.729 mo
53.0361 173.729 li
@
324.656 173.729 mo
327.134 173.729 li
324.656 173.729 li
cp
f
327.134 173.729 mo
324.656 173.729 li
@
gsave
0 0 mo
342.002 0 li
342.002 250.926 li
0 250.926 li
0 0 li
cp
clp
46.6973 171.496 mo
46.3179 171.496 46.0356 171.684 45.8423 172.055 cv
45.6489 172.426 45.5596 172.983 45.5596 173.728 cv
45.5596 174.471 45.6489 175.027 45.8423 175.4 cv
46.0356 175.771 46.3179 175.957 46.6973 175.957 cv
47.0767 175.957 47.3589 175.771 47.5522 175.4 cv
47.7383 175.027 47.835 174.471 47.835 173.728 cv
47.835 172.983 47.7383 172.426 47.5522 172.055 cv
47.3589 171.684 47.0767 171.496 46.6973 171.496 cv
46.6973 170.916 mo
47.2993 170.916 47.7603 171.162 48.0874 171.639 cv
48.4072 172.121 48.5708 172.82 48.5708 173.728 cv
48.5708 174.642 48.4072 175.34 48.0874 175.816 cv
47.7603 176.292 47.2993 176.529 46.6973 176.529 cv
46.0874 176.529 45.6191 176.292 45.2993 175.816 cv
44.98 175.34 44.8237 174.642 44.8237 173.728 cv
44.8237 172.82 44.98 172.121 45.2993 171.639 cv
45.6191 171.162 46.0874 170.916 46.6973 170.916 cv
f
50.5576 146.962 mo
53.0361 146.962 li
f
50.5576 146.962 mo
53.0361 146.962 li
@
327.134 146.962 mo
324.656 146.962 li
f
327.134 146.962 mo
324.656 146.962 li
@
31.6074 149.051 mo
34.165 149.051 li
34.165 149.668 li
30.7227 149.668 li
30.7227 149.051 li
30.9976 148.769 31.377 148.382 31.8604 147.891 cv
32.3359 147.408 32.6406 147.096 32.7671 146.954 cv
33.0049 146.694 33.1685 146.471 33.2578 146.285 cv
33.3472 146.107 33.3989 145.921 33.3989 145.743 cv
33.3989 145.46 33.2949 145.222 33.0942 145.043 cv
32.8936 144.865 32.6333 144.769 32.3062 144.769 cv
32.0757 144.769 31.8306 144.813 31.5776 144.888 cv
31.3247 144.969 31.0498 145.088 30.7598 145.252 cv
30.7598 144.508 li
31.0571 144.389 31.3325 144.3 31.585 144.241 cv
31.8379 144.181 32.0757 144.151 32.2915 144.151 cv
32.8491 144.151 33.2949 144.293 33.6294 144.575 cv
33.9644 144.857 34.1353 145.229 34.1353 145.698 cv
34.1353 145.921 34.0908 146.137 34.0088 146.33 cv
33.9272 146.531 33.7783 146.768 33.5552 147.036 cv
33.4956 147.11 33.3027 147.311 32.9756 147.645 cv
32.6484 147.979 32.1948 148.449 31.6074 149.051 cv
f
37.2729 144.731 mo
36.8936 144.731 36.6108 144.917 36.418 145.289 cv
36.2246 145.661 36.1353 146.218 36.1353 146.962 cv
36.1353 147.706 36.2246 148.263 36.418 148.635 cv
36.6108 149.006 36.8936 149.192 37.2729 149.192 cv
37.6519 149.192 37.9346 149.006 38.1279 148.635 cv
38.3135 148.263 38.4102 147.706 38.4102 146.962 cv
38.4102 146.218 38.3135 145.661 38.1279 145.289 cv
37.9346 144.917 37.6519 144.731 37.2729 144.731 cv
37.2729 144.151 mo
37.875 144.151 38.3359 144.397 38.6631 144.873 cv
38.9829 145.356 39.1465 146.055 39.1465 146.962 cv
39.1465 147.876 38.9829 148.575 38.6631 149.051 cv
38.3359 149.526 37.875 149.765 37.2729 149.765 cv
36.6631 149.765 36.1948 149.526 35.875 149.051 cv
35.5552 148.575 35.3994 147.876 35.3994 146.962 cv
35.3994 146.055 35.5552 145.356 35.875 144.873 cv
36.1948 144.397 36.6631 144.151 37.2729 144.151 cv
f
42.001 144.731 mo
41.6221 144.731 41.3394 144.917 41.146 145.289 cv
40.9531 145.661 40.8638 146.218 40.8638 146.962 cv
40.8638 147.706 40.9531 148.263 41.146 148.635 cv
41.3394 149.006 41.6221 149.192 42.001 149.192 cv
42.3804 149.192 42.6631 149.006 42.8564 148.635 cv
43.042 148.263 43.1387 147.706 43.1387 146.962 cv
43.1387 146.218 43.042 145.661 42.8564 145.289 cv
42.6631 144.917 42.3804 144.731 42.001 144.731 cv
42.001 144.151 mo
42.6035 144.151 43.0645 144.397 43.3916 144.873 cv
43.7114 145.356 43.875 146.055 43.875 146.962 cv
43.875 147.876 43.7114 148.575 43.3916 149.051 cv
43.0645 149.526 42.6035 149.765 42.001 149.765 cv
41.3916 149.765 40.9233 149.526 40.6035 149.051 cv
40.2837 148.575 40.1274 147.876 40.1274 146.962 cv
40.1274 146.055 40.2837 145.356 40.6035 144.873 cv
40.9233 144.397 41.3916 144.151 42.001 144.151 cv
f
46.7295 144.731 mo
46.3506 144.731 46.0679 144.917 45.8745 145.289 cv
45.6812 145.661 45.5923 146.218 45.5923 146.962 cv
45.5923 147.706 45.6812 148.263 45.8745 148.635 cv
46.0679 149.006 46.3506 149.192 46.7295 149.192 cv
47.1089 149.192 47.3916 149.006 47.5845 148.635 cv
47.7705 148.263 47.8672 147.706 47.8672 146.962 cv
47.8672 146.218 47.7705 145.661 47.5845 145.289 cv
47.3916 144.917 47.1089 144.731 46.7295 144.731 cv
46.7295 144.151 mo
47.332 144.151 47.793 144.397 48.1201 144.873 cv
48.4399 145.356 48.6035 146.055 48.6035 146.962 cv
48.6035 147.876 48.4399 148.575 48.1201 149.051 cv
47.793 149.526 47.332 149.765 46.7295 149.765 cv
46.1201 149.765 45.6519 149.526 45.332 149.051 cv
45.0122 148.575 44.856 147.876 44.856 146.962 cv
44.856 146.055 45.0122 145.356 45.332 144.873 cv
45.6519 144.397 46.1201 144.151 46.7295 144.151 cv
f
50.5576 120.197 mo
53.0361 120.197 li
f
50.5576 120.197 mo
53.0361 120.197 li
@
327.134 120.197 mo
324.656 120.197 li
f
327.134 120.197 mo
324.656 120.197 li
@
32.8159 118.122 mo
30.9648 121.014 li
32.8159 121.014 li
32.8159 118.122 li
32.6226 117.483 mo
33.5444 117.483 li
33.5444 121.014 li
34.3179 121.014 li
34.3179 121.623 li
33.5444 121.623 li
33.5444 122.903 li
32.8159 122.903 li
32.8159 121.623 li
30.3701 121.623 li
30.3701 120.917 li
32.6226 117.483 li
cp
f
37.0981 117.966 mo
36.7192 117.966 36.4365 118.152 36.2432 118.523 cv
36.0498 118.896 35.9604 119.453 35.9604 120.196 cv
35.9604 120.94 36.0498 121.498 36.2432 121.869 cv
36.4365 122.24 36.7192 122.427 37.0981 122.427 cv
37.4775 122.427 37.7598 122.24 37.9531 121.869 cv
38.1392 121.498 38.2358 120.94 38.2358 120.196 cv
38.2358 119.453 38.1392 118.896 37.9531 118.523 cv
37.7598 118.152 37.4775 117.966 37.0981 117.966 cv
37.0981 117.386 mo
37.7002 117.386 38.1611 117.631 38.4883 118.107 cv
38.8081 118.59 38.9717 119.29 38.9717 120.196 cv
38.9717 121.111 38.8081 121.81 38.4883 122.286 cv
38.1611 122.762 37.7002 123 37.0981 123 cv
36.4888 123 36.02 122.762 35.7007 122.286 cv
35.3809 121.81 35.2246 121.111 35.2246 120.196 cv
35.2246 119.29 35.3809 118.59 35.7007 118.107 cv
36.02 117.631 36.4888 117.386 37.0981 117.386 cv
f
41.8271 117.966 mo
41.4478 117.966 41.1655 118.152 40.9722 118.523 cv
40.7788 118.896 40.6895 119.453 40.6895 120.196 cv
40.6895 120.94 40.7788 121.498 40.9722 121.869 cv
41.1655 122.24 41.4478 122.427 41.8271 122.427 cv
42.2061 122.427 42.4888 122.24 42.6821 121.869 cv
42.8677 121.498 42.9644 120.94 42.9644 120.196 cv
42.9644 119.453 42.8677 118.896 42.6821 118.523 cv
42.4888 118.152 42.2061 117.966 41.8271 117.966 cv
41.8271 117.386 mo
42.4292 117.386 42.8901 117.631 43.2173 118.107 cv
43.5371 118.59 43.7007 119.29 43.7007 120.196 cv
43.7007 121.111 43.5371 121.81 43.2173 122.286 cv
42.8901 122.762 42.4292 123 41.8271 123 cv
41.2173 123 40.749 122.762 40.4292 122.286 cv
40.1094 121.81 39.9536 121.111 39.9536 120.196 cv
39.9536 119.29 40.1094 118.59 40.4292 118.107 cv
40.749 117.631 41.2173 117.386 41.8271 117.386 cv
f
46.5552 117.966 mo
46.1763 117.966 45.8936 118.152 45.7002 118.523 cv
45.5073 118.896 45.418 119.453 45.418 120.196 cv
45.418 120.94 45.5073 121.498 45.7002 121.869 cv
45.8936 122.24 46.1763 122.427 46.5552 122.427 cv
46.9346 122.427 47.2173 122.24 47.4106 121.869 cv
47.5962 121.498 47.6929 120.94 47.6929 120.196 cv
47.6929 119.453 47.5962 118.896 47.4106 118.523 cv
47.2173 118.152 46.9346 117.966 46.5552 117.966 cv
46.5552 117.386 mo
47.1577 117.386 47.6187 117.631 47.9458 118.107 cv
48.2656 118.59 48.4292 119.29 48.4292 120.196 cv
48.4292 121.111 48.2656 121.81 47.9458 122.286 cv
47.6187 122.762 47.1577 123 46.5552 123 cv
45.9458 123 45.4775 122.762 45.1577 122.286 cv
44.8379 121.81 44.6816 121.111 44.6816 120.196 cv
44.6816 119.29 44.8379 118.59 45.1577 118.107 cv
45.4775 117.631 45.9458 117.386 46.5552 117.386 cv
f
50.5576 93.4312 mo
53.0361 93.4312 li
f
50.5576 93.4312 mo
53.0361 93.4312 li
@
327.134 93.4312 mo
324.656 93.4312 li
f
327.134 93.4312 mo
324.656 93.4312 li
@
32.6138 93.1338 mo
32.2866 93.1338 32.0264 93.2524 31.833 93.4756 cv
31.6401 93.6987 31.5435 94.0107 31.5435 94.3975 cv
31.5435 94.7915 31.6401 95.104 31.833 95.3267 cv
32.0264 95.5498 32.2866 95.6611 32.6138 95.6611 cv
32.9409 95.6611 33.2012 95.5498 33.3945 95.3267 cv
33.5879 95.104 33.6846 94.7915 33.6846 94.3975 cv
33.6846 94.0107 33.5879 93.6987 33.3945 93.4756 cv
33.2012 93.2524 32.9409 93.1338 32.6138 93.1338 cv
34.0713 90.8359 mo
34.0713 91.5054 li
33.8853 91.416 33.6992 91.3491 33.5137 91.3047 cv
33.3203 91.2598 33.1343 91.2378 32.9561 91.2378 cv
32.4653 91.2378 32.0933 91.4014 31.8408 91.7285 cv
31.5879 92.0557 31.439 92.5537 31.4092 93.208 cv
31.5508 93 31.729 92.8359 31.9448 92.7246 cv
32.1602 92.6133 32.3984 92.5537 32.6587 92.5537 cv
33.2012 92.5537 33.6323 92.7246 33.9448 93.0518 cv
34.2568 93.3789 34.4204 93.8325 34.4204 94.3975 cv
34.4204 94.9551 34.2495 95.4014 33.9224 95.7358 cv
33.5952 96.0703 33.1567 96.2339 32.6138 96.2339 cv
31.9893 96.2339 31.5059 95.9961 31.1787 95.52 cv
30.8442 95.0444 30.6807 94.3457 30.6807 93.4312 cv
30.6807 92.5762 30.8813 91.8921 31.2905 91.3862 cv
31.6919 90.8809 32.2422 90.6206 32.9263 90.6206 cv
33.1045 90.6206 33.2905 90.6431 33.4839 90.6729 cv
33.6694 90.71 33.8628 90.7617 34.0713 90.8359 cv
f
37.2529 91.2002 mo
36.874 91.2002 36.5913 91.3862 36.3979 91.7578 cv
36.2046 92.1299 36.1157 92.6875 36.1157 93.4307 cv
36.1157 94.1743 36.2046 94.7319 36.3979 95.1035 cv
36.5913 95.4756 36.874 95.6611 37.2529 95.6611 cv
37.6323 95.6611 37.9146 95.4756 38.1079 95.1035 cv
38.2939 94.7319 38.3906 94.1743 38.3906 93.4307 cv
38.3906 92.6875 38.2939 92.1299 38.1079 91.7578 cv
37.9146 91.3862 37.6323 91.2002 37.2529 91.2002 cv
37.2529 90.6206 mo
37.8555 90.6206 38.3164 90.8657 38.6436 91.3418 cv
38.9629 91.8252 39.1265 92.5239 39.1265 93.4307 cv
39.1265 94.3452 38.9629 95.0444 38.6436 95.52 cv
38.3164 95.9961 37.8555 96.2339 37.2529 96.2339 cv
36.6436 96.2339 36.1748 95.9961 35.8555 95.52 cv
35.5356 95.0444 35.3794 94.3452 35.3794 93.4307 cv
35.3794 92.5239 35.5356 91.8252 35.8555 91.3418 cv
36.1748 90.8657 36.6436 90.6206 37.2529 90.6206 cv
f
41.9819 91.2002 mo
41.6025 91.2002 41.3203 91.3862 41.127 91.7578 cv
40.9336 92.1299 40.8442 92.6875 40.8442 93.4307 cv
40.8442 94.1743 40.9336 94.7319 41.127 95.1035 cv
41.3203 95.4756 41.6025 95.6611 41.9819 95.6611 cv
42.3608 95.6611 42.6436 95.4756 42.8369 95.1035 cv
43.0229 94.7319 43.1196 94.1743 43.1196 93.4307 cv
43.1196 92.6875 43.0229 92.1299 42.8369 91.7578 cv
42.6436 91.3862 42.3608 91.2002 41.9819 91.2002 cv
41.9819 90.6206 mo
42.584 90.6206 43.0449 90.8657 43.3721 91.3418 cv
43.6919 91.8252 43.8555 92.5239 43.8555 93.4307 cv
43.8555 94.3452 43.6919 95.0444 43.3721 95.52 cv
43.0449 95.9961 42.584 96.2339 41.9819 96.2339 cv
41.3721 96.2339 40.9038 95.9961 40.584 95.52 cv
40.2646 95.0444 40.1084 94.3452 40.1084 93.4307 cv
40.1084 92.5239 40.2646 91.8252 40.584 91.3418 cv
40.9038 90.8657 41.3721 90.6206 41.9819 90.6206 cv
f
46.7104 91.2002 mo
46.3311 91.2002 46.0488 91.3862 45.8555 91.7578 cv
45.6621 92.1299 45.5728 92.6875 45.5728 93.4307 cv
45.5728 94.1743 45.6621 94.7319 45.8555 95.1035 cv
46.0488 95.4756 46.3311 95.6611 46.7104 95.6611 cv
47.0894 95.6611 47.3721 95.4756 47.5654 95.1035 cv
47.751 94.7319 47.8477 94.1743 47.8477 93.4307 cv
47.8477 92.6875 47.751 92.1299 47.5654 91.7578 cv
47.3721 91.3862 47.0894 91.2002 46.7104 91.2002 cv
46.7104 90.6206 mo
47.3125 90.6206 47.7734 90.8657 48.1006 91.3418 cv
48.4204 91.8252 48.584 92.5239 48.584 93.4307 cv
48.584 94.3452 48.4204 95.0444 48.1006 95.52 cv
47.7734 95.9961 47.3125 96.2339 46.7104 96.2339 cv
46.1006 96.2339 45.6323 95.9961 45.3125 95.52 cv
44.9927 95.0444 44.8369 94.3452 44.8369 93.4307 cv
44.8369 92.5239 44.9927 91.8252 45.3125 91.3418 cv
45.6323 90.8657 46.1006 90.6206 46.7104 90.6206 cv
f
50.5576 66.666 mo
53.0361 66.666 li
f
50.5576 66.666 mo
53.0361 66.666 li
@
327.134 66.666 mo
324.656 66.666 li
f
327.134 66.666 mo
324.656 66.666 li
@
32.5054 66.7993 mo
32.1558 66.7993 31.8809 66.896 31.6802 67.082 cv
31.4795 67.2676 31.3828 67.5205 31.3828 67.8477 cv
31.3828 68.1748 31.4795 68.4351 31.6802 68.6211 cv
31.8809 68.8066 32.1558 68.896 32.5054 68.896 cv
32.8472 68.896 33.1226 68.8066 33.3232 68.6133 cv
33.5239 68.4277 33.6279 68.1748 33.6279 67.8477 cv
33.6279 67.5205 33.5239 67.2676 33.3306 67.082 cv
33.1299 66.896 32.855 66.7993 32.5054 66.7993 cv
31.769 66.4873 mo
31.457 66.4131 31.2114 66.2642 31.0332 66.0483 cv
30.855 65.833 30.7729 65.5728 30.7729 65.2603 cv
30.7729 64.8291 30.9219 64.4873 31.2339 64.2344 cv
31.5386 63.9814 31.9624 63.8555 32.5054 63.8555 cv
33.0405 63.8555 33.4644 63.9814 33.7769 64.2344 cv
34.0815 64.4873 34.2378 64.8291 34.2378 65.2603 cv
34.2378 65.5728 34.1484 65.833 33.9702 66.0483 cv
33.7915 66.2642 33.5537 66.4131 33.2412 66.4873 cv
33.5908 66.5688 33.8657 66.7324 34.0664 66.9702 cv
34.2598 67.2085 34.3638 67.5059 34.3638 67.8477 cv
34.3638 68.3755 34.2007 68.7773 33.8809 69.0522 cv
33.5537 69.335 33.1001 69.4688 32.5054 69.4688 cv
31.9033 69.4688 31.4419 69.335 31.1226 69.0522 cv
30.8027 68.7773 30.6465 68.3755 30.6465 67.8477 cv
30.6465 67.5059 30.7432 67.2085 30.9438 66.9702 cv
31.1372 66.7324 31.4126 66.5688 31.769 66.4873 cv
31.5015 65.3271 mo
31.5015 65.6099 31.5835 65.833 31.7617 65.9893 cv
31.9404 66.145 32.1855 66.2197 32.5054 66.2197 cv
32.8174 66.2197 33.063 66.145 33.2412 65.9893 cv
33.4199 65.833 33.5088 65.6099 33.5088 65.3271 cv
33.5088 65.0449 33.4199 64.8291 33.2412 64.6729 cv
33.063 64.5171 32.8174 64.4351 32.5054 64.4351 cv
32.1855 64.4351 31.9404 64.5171 31.7617 64.6729 cv
31.5835 64.8291 31.5015 65.0449 31.5015 65.3271 cv
f
37.2339 64.4351 mo
36.855 64.4351 36.5723 64.6206 36.3789 64.9927 cv
36.1855 65.3643 36.0967 65.9219 36.0967 66.6655 cv
36.0967 67.4087 36.1855 67.9663 36.3789 68.3384 cv
36.5723 68.71 36.855 68.896 37.2339 68.896 cv
37.6133 68.896 37.896 68.71 38.0889 68.3384 cv
38.2749 67.9663 38.3716 67.4087 38.3716 66.6655 cv
38.3716 65.9219 38.2749 65.3643 38.0889 64.9927 cv
37.896 64.6206 37.6133 64.4351 37.2339 64.4351 cv
37.2339 63.855 mo
37.8364 63.855 38.2974 64.1006 38.6245 64.5762 cv
38.9438 65.0596 39.1074 65.7583 39.1074 66.6655 cv
39.1074 67.5801 38.9438 68.2788 38.6245 68.7544 cv
38.2974 69.2305 37.8364 69.4683 37.2339 69.4683 cv
36.6245 69.4683 36.1558 69.2305 35.8364 68.7544 cv
35.5166 68.2788 35.3604 67.5801 35.3604 66.6655 cv
35.3604 65.7583 35.5166 65.0596 35.8364 64.5762 cv
36.1558 64.1006 36.6245 63.855 37.2339 63.855 cv
f
41.9624 64.4351 mo
41.5835 64.4351 41.3008 64.6206 41.1074 64.9927 cv
40.9141 65.3643 40.8247 65.9219 40.8247 66.6655 cv
40.8247 67.4087 40.9141 67.9663 41.1074 68.3384 cv
41.3008 68.71 41.5835 68.896 41.9624 68.896 cv
42.3418 68.896 42.624 68.71 42.8174 68.3384 cv
43.0034 67.9663 43.1001 67.4087 43.1001 66.6655 cv
43.1001 65.9219 43.0034 65.3643 42.8174 64.9927 cv
42.624 64.6206 42.3418 64.4351 41.9624 64.4351 cv
41.9624 63.855 mo
42.5649 63.855 43.0259 64.1006 43.353 64.5762 cv
43.6724 65.0596 43.8359 65.7583 43.8359 66.6655 cv
43.8359 67.5801 43.6724 68.2788 43.353 68.7544 cv
43.0259 69.2305 42.5649 69.4683 41.9624 69.4683 cv
41.353 69.4683 40.8843 69.2305 40.5649 68.7544 cv
40.2451 68.2788 40.0889 67.5801 40.0889 66.6655 cv
40.0889 65.7583 40.2451 65.0596 40.5649 64.5762 cv
40.8843 64.1006 41.353 63.855 41.9624 63.855 cv
f
46.6909 64.4351 mo
46.312 64.4351 46.0293 64.6206 45.8359 64.9927 cv
45.6426 65.3643 45.5532 65.9219 45.5532 66.6655 cv
45.5532 67.4087 45.6426 67.9663 45.8359 68.3384 cv
46.0293 68.71 46.312 68.896 46.6909 68.896 cv
47.0703 68.896 47.3525 68.71 47.5459 68.3384 cv
47.7319 67.9663 47.8286 67.4087 47.8286 66.6655 cv
47.8286 65.9219 47.7319 65.3643 47.5459 64.9927 cv
47.3525 64.6206 47.0703 64.4351 46.6909 64.4351 cv
46.6909 63.855 mo
47.293 63.855 47.7544 64.1006 48.0815 64.5762 cv
48.4009 65.0596 48.5645 65.7583 48.5645 66.6655 cv
48.5645 67.5801 48.4009 68.2788 48.0815 68.7544 cv
47.7544 69.2305 47.293 69.4683 46.6909 69.4683 cv
46.0815 69.4683 45.6128 69.2305 45.2935 68.7544 cv
44.9736 68.2788 44.8174 67.5801 44.8174 66.6655 cv
44.8174 65.7583 44.9736 65.0596 45.2935 64.5762 cv
45.6128 64.1006 46.0815 63.855 46.6909 63.855 cv
f
50.5576 39.9004 mo
53.0361 39.9004 li
f
50.5576 39.9004 mo
53.0361 39.9004 li
@
327.134 39.9004 mo
324.656 39.9004 li
f
327.134 39.9004 mo
324.656 39.9004 li
@
26.6387 41.9893 mo
27.8359 41.9893 li
27.8359 37.8555 li
26.5347 38.1157 li
26.5347 37.4463 li
27.8281 37.186 li
28.5645 37.186 li
28.5645 41.9893 li
29.7612 41.9893 li
29.7612 42.6064 li
26.6387 42.6064 li
26.6387 41.9893 li
cp
f
32.8101 37.6699 mo
32.4307 37.6699 32.1484 37.8555 31.9551 38.2275 cv
31.7617 38.5991 31.6724 39.1567 31.6724 39.8999 cv
31.6724 40.6436 31.7617 41.2012 31.9551 41.5728 cv
32.1484 41.9448 32.4307 42.1304 32.8101 42.1304 cv
33.189 42.1304 33.4717 41.9448 33.665 41.5728 cv
33.8511 41.2012 33.9473 40.6436 33.9473 39.8999 cv
33.9473 39.1567 33.8511 38.5991 33.665 38.2275 cv
33.4717 37.8555 33.189 37.6699 32.8101 37.6699 cv
32.8101 37.0898 mo
33.4121 37.0898 33.873 37.335 34.2002 37.811 cv
34.52 38.2939 34.6836 38.9932 34.6836 39.8999 cv
34.6836 40.8145 34.52 41.5137 34.2002 41.9893 cv
33.873 42.4653 33.4121 42.7031 32.8101 42.7031 cv
32.2002 42.7031 31.7319 42.4653 31.4121 41.9893 cv
31.0923 41.5137 30.9365 40.8145 30.9365 39.8999 cv
30.9365 38.9932 31.0923 38.2939 31.4121 37.811 cv
31.7319 37.335 32.2002 37.0898 32.8101 37.0898 cv
f
37.5386 37.6699 mo
37.1592 37.6699 36.8765 37.8555 36.6836 38.2275 cv
36.4902 38.5991 36.4009 39.1567 36.4009 39.8999 cv
36.4009 40.6436 36.4902 41.2012 36.6836 41.5728 cv
36.8765 41.9448 37.1592 42.1304 37.5386 42.1304 cv
37.9175 42.1304 38.2002 41.9448 38.3936 41.5728 cv
38.5791 41.2012 38.6758 40.6436 38.6758 39.8999 cv
38.6758 39.1567 38.5791 38.5991 38.3936 38.2275 cv
38.2002 37.8555 37.9175 37.6699 37.5386 37.6699 cv
37.5386 37.0898 mo
38.1406 37.0898 38.6016 37.335 38.9287 37.811 cv
39.2485 38.2939 39.4121 38.9932 39.4121 39.8999 cv
39.4121 40.8145 39.2485 41.5137 38.9287 41.9893 cv
38.6016 42.4653 38.1406 42.7031 37.5386 42.7031 cv
36.9287 42.7031 36.4604 42.4653 36.1406 41.9893 cv
35.8208 41.5137 35.6646 40.8145 35.6646 39.8999 cv
35.6646 38.9932 35.8208 38.2939 36.1406 37.811 cv
36.4604 37.335 36.9287 37.0898 37.5386 37.0898 cv
f
42.2666 37.6699 mo
41.8877 37.6699 41.605 37.8555 41.4116 38.2275 cv
41.2183 38.5991 41.1294 39.1567 41.1294 39.8999 cv
41.1294 40.6436 41.2183 41.2012 41.4116 41.5728 cv
41.605 41.9448 41.8877 42.1304 42.2666 42.1304 cv
42.646 42.1304 42.9287 41.9448 43.1216 41.5728 cv
43.3076 41.2012 43.4043 40.6436 43.4043 39.8999 cv
43.4043 39.1567 43.3076 38.5991 43.1216 38.2275 cv
42.9287 37.8555 42.646 37.6699 42.2666 37.6699 cv
42.2666 37.0898 mo
42.8691 37.0898 43.3301 37.335 43.6572 37.811 cv
43.9771 38.2939 44.1406 38.9932 44.1406 39.8999 cv
44.1406 40.8145 43.9771 41.5137 43.6572 41.9893 cv
43.3301 42.4653 42.8691 42.7031 42.2666 42.7031 cv
41.6572 42.7031 41.189 42.4653 40.8691 41.9893 cv
40.5493 41.5137 40.3931 40.8145 40.3931 39.8999 cv
40.3931 38.9932 40.5493 38.2939 40.8691 37.811 cv
41.189 37.335 41.6572 37.0898 42.2666 37.0898 cv
f
46.9956 37.6699 mo
46.6162 37.6699 46.334 37.8555 46.1406 38.2275 cv
45.9473 38.5991 45.8579 39.1567 45.8579 39.8999 cv
45.8579 40.6436 45.9473 41.2012 46.1406 41.5728 cv
46.334 41.9448 46.6162 42.1304 46.9956 42.1304 cv
47.375 42.1304 47.6572 41.9448 47.8506 41.5728 cv
48.0366 41.2012 48.1333 40.6436 48.1333 39.8999 cv
48.1333 39.1567 48.0366 38.5991 47.8506 38.2275 cv
47.6572 37.8555 47.375 37.6699 46.9956 37.6699 cv
46.9956 37.0898 mo
47.5977 37.0898 48.0586 37.335 48.3857 37.811 cv
48.7056 38.2939 48.8691 38.9932 48.8691 39.8999 cv
48.8691 40.8145 48.7056 41.5137 48.3857 41.9893 cv
48.0586 42.4653 47.5977 42.7031 46.9956 42.7031 cv
46.3857 42.7031 45.9175 42.4653 45.5977 41.9893 cv
45.2783 41.5137 45.1221 40.8145 45.1221 39.8999 cv
45.1221 38.9932 45.2783 38.2939 45.5977 37.811 cv
45.9175 37.335 46.3857 37.0898 46.9956 37.0898 cv
f
50.5576 13.1353 mo
53.0361 13.1353 li
f
50.5576 13.1353 mo
53.0361 13.1353 li
@
327.134 13.1353 mo
324.656 13.1353 li
f
327.134 13.1353 mo
324.656 13.1353 li
@
26.6387 15.2236 mo
27.8359 15.2236 li
27.8359 11.0898 li
26.5347 11.3506 li
26.5347 10.6812 li
27.8281 10.4209 li
28.5645 10.4209 li
28.5645 15.2236 li
29.7612 15.2236 li
29.7612 15.8408 li
26.6387 15.8408 li
26.6387 15.2236 li
cp
f
31.873 15.2236 mo
34.4307 15.2236 li
34.4307 15.8408 li
30.9883 15.8408 li
30.9883 15.2236 li
31.2632 14.9414 31.6426 14.5547 32.126 14.064 cv
32.6016 13.5811 32.9063 13.2686 33.0327 13.1274 cv
33.2705 12.8672 33.4341 12.644 33.5234 12.458 cv
33.6128 12.2798 33.6646 12.0938 33.6646 11.9155 cv
33.6646 11.6328 33.5605 11.395 33.3599 11.2163 cv
33.1592 11.0381 32.8989 10.9414 32.5718 10.9414 cv
32.3413 10.9414 32.0962 10.9858 31.8433 11.0605 cv
31.5903 11.1421 31.3154 11.2612 31.0254 11.4248 cv
31.0254 10.6812 li
31.3228 10.5625 31.5977 10.4731 31.8506 10.4136 cv
32.1035 10.354 32.3413 10.3242 32.5571 10.3242 cv
33.1147 10.3242 33.5605 10.4658 33.895 10.748 cv
34.23 11.0308 34.4009 11.4023 34.4009 11.8706 cv
34.4009 12.0938 34.3564 12.3096 34.2744 12.5029 cv
34.1929 12.7036 34.0439 12.9414 33.8208 13.209 cv
33.7612 13.2832 33.5679 13.4844 33.2412 13.8188 cv
32.9141 14.1533 32.4604 14.6216 31.873 15.2236 cv
f
37.5386 10.9043 mo
37.1592 10.9043 36.8765 11.0898 36.6836 11.4619 cv
36.4902 11.8335 36.4009 12.3911 36.4009 13.1348 cv
36.4009 13.8779 36.4902 14.4355 36.6836 14.8076 cv
36.8765 15.1792 37.1592 15.3652 37.5386 15.3652 cv
37.9175 15.3652 38.2002 15.1792 38.3936 14.8076 cv
38.5791 14.4355 38.6758 13.8779 38.6758 13.1348 cv
38.6758 12.3911 38.5791 11.8335 38.3936 11.4619 cv
38.2002 11.0898 37.9175 10.9043 37.5386 10.9043 cv
37.5386 10.3242 mo
38.1406 10.3242 38.6016 10.5693 38.9287 11.0454 cv
39.2485 11.5288 39.4121 12.2275 39.4121 13.1348 cv
39.4121 14.0488 39.2485 14.748 38.9287 15.2236 cv
38.6016 15.6997 38.1406 15.9375 37.5386 15.9375 cv
36.9287 15.9375 36.4604 15.6997 36.1406 15.2236 cv
35.8208 14.748 35.6646 14.0488 35.6646 13.1348 cv
35.6646 12.2275 35.8208 11.5288 36.1406 11.0454 cv
36.4604 10.5693 36.9287 10.3242 37.5386 10.3242 cv
f
42.2666 10.9043 mo
41.8877 10.9043 41.605 11.0898 41.4116 11.4619 cv
41.2183 11.8335 41.1294 12.3911 41.1294 13.1348 cv
41.1294 13.8779 41.2183 14.4355 41.4116 14.8076 cv
41.605 15.1792 41.8877 15.3652 42.2666 15.3652 cv
42.646 15.3652 42.9287 15.1792 43.1216 14.8076 cv
43.3076 14.4355 43.4043 13.8779 43.4043 13.1348 cv
43.4043 12.3911 43.3076 11.8335 43.1216 11.4619 cv
42.9287 11.0898 42.646 10.9043 42.2666 10.9043 cv
42.2666 10.3242 mo
42.8691 10.3242 43.3301 10.5693 43.6572 11.0454 cv
43.9771 11.5288 44.1406 12.2275 44.1406 13.1348 cv
44.1406 14.0488 43.9771 14.748 43.6572 15.2236 cv
43.3301 15.6997 42.8691 15.9375 42.2666 15.9375 cv
41.6572 15.9375 41.189 15.6997 40.8691 15.2236 cv
40.5493 14.748 40.3931 14.0488 40.3931 13.1348 cv
40.3931 12.2275 40.5493 11.5288 40.8691 11.0454 cv
41.189 10.5693 41.6572 10.3242 42.2666 10.3242 cv
f
46.9956 10.9043 mo
46.6162 10.9043 46.334 11.0898 46.1406 11.4619 cv
45.9473 11.8335 45.8579 12.3911 45.8579 13.1348 cv
45.8579 13.8779 45.9473 14.4355 46.1406 14.8076 cv
46.334 15.1792 46.6162 15.3652 46.9956 15.3652 cv
47.375 15.3652 47.6572 15.1792 47.8506 14.8076 cv
48.0366 14.4355 48.1333 13.8779 48.1333 13.1348 cv
48.1333 12.3911 48.0366 11.8335 47.8506 11.4619 cv
47.6572 11.0898 47.375 10.9043 46.9956 10.9043 cv
46.9956 10.3242 mo
47.5977 10.3242 48.0586 10.5693 48.3857 11.0454 cv
48.7056 11.5288 48.8691 12.2275 48.8691 13.1348 cv
48.8691 14.0488 48.7056 14.748 48.3857 15.2236 cv
48.0586 15.6997 47.5977 15.9375 46.9956 15.9375 cv
46.3857 15.9375 45.9175 15.6997 45.5977 15.2236 cv
45.2783 14.748 45.1221 14.0488 45.1221 13.1348 cv
45.1221 12.2275 45.2783 11.5288 45.5977 11.0454 cv
45.9175 10.5693 46.3857 10.3242 46.9956 10.3242 cv
f
14.1206 156.008 mo
14.1206 152.893 li
14.7378 152.893 li
14.7378 155.272 li
16.3359 155.272 li
16.3359 153.124 li
16.9531 153.124 li
16.9531 155.272 li
19.5405 155.272 li
19.5405 156.008 li
14.1206 156.008 li
cp
f
15.4736 151.094 mo
19.5405 151.094 li
19.5405 151.763 li
15.4736 151.763 li
15.4736 151.094 li
cp
13.8901 151.094 mo
14.7378 151.094 li
14.7378 151.763 li
13.8901 151.763 li
13.8901 151.094 li
cp
f
15.5928 147.102 mo
16.2246 147.102 li
16.1353 147.295 16.061 147.488 16.0088 147.689 cv
15.9644 147.897 15.9346 148.105 15.9346 148.321 cv
15.9346 148.655 15.9868 148.908 16.0908 149.072 cv
16.1948 149.235 16.3438 149.317 16.5444 149.317 cv
16.7007 149.317 16.8193 149.257 16.9087 149.139 cv
16.998 149.02 17.0869 148.782 17.1616 148.425 cv
17.2134 148.194 li
17.3174 147.719 17.4663 147.384 17.6445 147.183 cv
17.8306 146.989 18.0908 146.885 18.418 146.885 cv
18.7969 146.885 19.0942 147.035 19.3101 147.332 cv
19.5332 147.629 19.6372 148.045 19.6372 148.566 cv
19.6372 148.789 19.6147 149.012 19.5776 149.25 cv
19.5405 149.488 19.481 149.733 19.3921 149.994 cv
18.7002 149.994 li
18.8345 149.748 18.9312 149.503 18.9902 149.265 cv
19.0571 149.026 19.0869 148.789 19.0869 148.551 cv
19.0869 148.239 19.0352 147.993 18.9312 147.823 cv
18.8267 147.659 18.6709 147.57 18.4697 147.57 cv
18.2915 147.57 18.1504 147.637 18.0537 147.756 cv
17.957 147.875 17.8604 148.143 17.771 148.559 cv
17.7192 148.789 li
17.6299 149.206 17.4961 149.51 17.3174 149.689 cv
17.1392 149.875 16.8936 149.964 16.5742 149.964 cv
16.1948 149.964 15.8975 149.83 15.6895 149.563 cv
15.481 149.295 15.377 148.908 15.377 148.402 cv
15.377 148.157 15.3994 147.927 15.4365 147.704 cv
15.4736 147.488 15.5259 147.288 15.5928 147.102 cv
f
17.0869 142.439 mo
19.5405 142.439 li
19.5405 143.109 li
17.1094 143.109 li
16.7227 143.109 16.4404 143.19 16.2471 143.339 cv
16.0537 143.488 15.957 143.711 15.957 144.008 cv
15.957 144.373 16.0762 144.655 16.3066 144.863 cv
16.5371 145.071 16.8491 145.176 17.2432 145.176 cv
19.5405 145.176 li
19.5405 145.845 li
13.8901 145.845 li
13.8901 145.176 li
16.106 145.176 li
15.8677 145.02 15.6821 144.833 15.563 144.61 cv
15.4438 144.395 15.377 144.142 15.377 143.86 cv
15.377 143.399 15.5259 143.042 15.8159 142.804 cv
16.106 142.566 16.5293 142.439 17.0869 142.439 cv
f
14.7231 137.979 mo
16.7603 137.979 li
16.7603 137.057 li
16.7603 136.715 16.6782 136.455 16.5 136.269 cv
16.3213 136.083 16.0688 135.986 15.7417 135.986 cv
15.4146 135.986 15.1689 136.083 14.9907 136.269 cv
14.812 136.455 14.7231 136.715 14.7231 137.057 cv
14.7231 137.979 li
14.1206 138.715 mo
14.1206 137.057 li
14.1206 136.455 14.2617 135.994 14.5371 135.681 cv
14.812 135.369 15.2134 135.213 15.7417 135.213 cv
16.2769 135.213 16.6855 135.369 16.9531 135.681 cv
17.2285 135.994 17.3623 136.455 17.3623 137.057 cv
17.3623 137.979 li
19.5405 137.979 li
19.5405 138.715 li
14.1206 138.715 li
f
15.9419 132.685 mo
15.9419 133.042 16.0835 133.324 16.3657 133.533 cv
16.6484 133.741 17.0278 133.845 17.5107 133.845 cv
18.0015 133.845 18.3809 133.749 18.6631 133.54 cv
18.9458 133.332 19.0796 133.049 19.0796 132.685 cv
19.0796 132.329 18.9458 132.046 18.6631 131.838 cv
18.3809 131.629 18.0015 131.525 17.5107 131.525 cv
17.0352 131.525 16.6484 131.629 16.3657 131.838 cv
16.0835 132.046 15.9419 132.329 15.9419 132.685 cv
15.377 132.685 mo
15.377 132.105 15.5703 131.651 15.9419 131.317 cv
16.3213 130.99 16.8418 130.819 17.5107 130.819 cv
18.1802 130.819 18.7002 130.99 19.0723 131.317 cv
19.4512 131.651 19.6372 132.105 19.6372 132.685 cv
19.6372 133.272 19.4512 133.733 19.0723 134.061 cv
18.7002 134.388 18.1802 134.552 17.5107 134.552 cv
16.8418 134.552 16.3213 134.388 15.9419 134.061 cv
15.5703 133.733 15.377 133.272 15.377 132.685 cv
f
18.9312 129.064 mo
21.0796 129.064 li
21.0796 129.733 li
15.4736 129.733 li
15.4736 129.064 li
16.0908 129.064 li
15.853 128.931 15.6743 128.752 15.5557 128.537 cv
15.4365 128.321 15.377 128.061 15.377 127.763 cv
15.377 127.272 15.5781 126.871 15.9644 126.559 cv
16.3584 126.254 16.8716 126.098 17.5107 126.098 cv
18.1504 126.098 18.6709 126.254 19.0576 126.559 cv
19.4438 126.871 19.6372 127.272 19.6372 127.763 cv
19.6372 128.061 19.5776 128.321 19.4663 128.537 cv
19.355 128.752 19.1763 128.931 18.9312 129.064 cv
17.5107 126.79 mo
17.02 126.79 16.6411 126.894 16.3584 127.094 cv
16.0762 127.302 15.9346 127.578 15.9346 127.927 cv
15.9346 128.284 16.0762 128.56 16.3584 128.76 cv
16.6411 128.968 17.02 129.064 17.5107 129.064 cv
18.0015 129.064 18.3882 128.968 18.6709 128.76 cv
18.9531 128.56 19.0874 128.284 19.0874 127.927 cv
19.0874 127.578 18.9531 127.302 18.6709 127.094 cv
18.3882 126.894 18.0015 126.79 17.5107 126.79 cv
f
17.9351 125.057 mo
15.4741 125.057 li
15.4741 124.388 li
17.9126 124.388 li
18.2993 124.388 18.5815 124.313 18.7749 124.165 cv
18.9683 124.016 19.0649 123.793 19.0649 123.488 cv
19.0649 123.131 18.9536 122.842 18.7231 122.633 cv
18.4927 122.425 18.1802 122.321 17.7788 122.321 cv
15.4741 122.321 li
15.4741 121.652 li
19.5405 121.652 li
19.5405 122.321 li
18.916 122.321 li
19.1689 122.485 19.3477 122.678 19.4663 122.886 cv
19.5781 123.102 19.6372 123.347 19.6372 123.63 cv
19.6372 124.098 19.4961 124.455 19.2061 124.693 cv
18.9238 124.938 18.5 125.057 17.9351 125.057 cv
f
13.8901 119.607 mo
19.5405 119.607 li
19.5405 120.277 li
13.8901 120.277 li
13.8901 119.607 li
cp
f
17.4961 116.358 mo
17.4961 116.901 17.563 117.273 17.6821 117.481 cv
17.8086 117.689 18.0166 117.793 18.314 117.793 cv
18.5518 117.793 18.7451 117.719 18.8789 117.563 cv
19.0205 117.407 19.0874 117.191 19.0874 116.923 cv
19.0874 116.552 18.9609 116.254 18.6934 116.031 cv
18.4331 115.808 18.0835 115.697 17.645 115.697 cv
17.4961 115.697 li
17.4961 116.358 li
17.2212 115.027 mo
19.5405 115.027 li
19.5405 115.697 li
18.9238 115.697 li
19.1763 115.853 19.355 116.046 19.4663 116.269 cv
19.5781 116.492 19.6372 116.775 19.6372 117.102 cv
19.6372 117.518 19.5259 117.853 19.2954 118.098 cv
19.0649 118.344 18.7524 118.462 18.3584 118.462 cv
17.9053 118.462 17.563 118.314 17.3252 118.001 cv
17.0947 117.697 16.9756 117.243 16.9756 116.633 cv
16.9756 115.697 li
16.9087 115.697 li
16.604 115.697 16.3662 115.801 16.1948 116.001 cv
16.0317 116.202 15.9424 116.485 15.9424 116.849 cv
15.9424 117.087 15.9722 117.31 16.0317 117.533 cv
16.0908 117.756 16.1729 117.964 16.2769 118.165 cv
15.6597 118.165 li
15.5703 117.927 15.4961 117.689 15.4517 117.459 cv
15.4067 117.229 15.3774 117.005 15.3774 116.782 cv
15.3774 116.195 15.5332 115.756 15.8384 115.466 cv
16.1431 115.176 16.604 115.027 17.2212 115.027 cv
f
14.3213 112.99 mo
15.4736 112.99 li
15.4736 111.615 li
15.9941 111.615 li
15.9941 112.99 li
18.2026 112.99 li
18.5371 112.99 18.7524 112.946 18.8418 112.856 cv
18.9385 112.768 18.9829 112.582 18.9829 112.299 cv
18.9829 111.615 li
19.5405 111.615 li
19.5405 112.299 li
19.5405 112.819 19.4438 113.176 19.2505 113.37 cv
19.0576 113.563 18.708 113.66 18.2026 113.66 cv
15.9941 113.66 li
15.9941 114.15 li
15.4736 114.15 li
15.4736 113.66 li
14.3213 113.66 li
14.3213 112.99 li
f
15.4736 110.069 mo
19.5405 110.069 li
19.5405 110.738 li
15.4736 110.738 li
15.4736 110.069 li
cp
13.8901 110.069 mo
14.7378 110.069 li
14.7378 110.738 li
13.8901 110.738 li
13.8901 110.069 li
cp
f
15.9419 107.095 mo
15.9419 107.451 16.0835 107.734 16.3657 107.942 cv
16.6484 108.15 17.0278 108.254 17.5107 108.254 cv
18.0015 108.254 18.3809 108.158 18.6631 107.949 cv
18.9458 107.741 19.0796 107.459 19.0796 107.095 cv
19.0796 106.737 18.9458 106.455 18.6631 106.247 cv
18.3809 106.039 18.0015 105.935 17.5107 105.935 cv
17.0352 105.935 16.6484 106.039 16.3657 106.247 cv
16.0835 106.455 15.9419 106.737 15.9419 107.095 cv
15.377 107.095 mo
15.377 106.515 15.5703 106.061 15.9419 105.727 cv
16.3213 105.399 16.8418 105.229 17.5107 105.229 cv
18.1802 105.229 18.7002 105.399 19.0723 105.727 cv
19.4512 106.061 19.6372 106.515 19.6372 107.095 cv
19.6372 107.682 19.4512 108.143 19.0723 108.47 cv
18.7002 108.797 18.1802 108.96 17.5107 108.96 cv
16.8418 108.96 16.3213 108.797 15.9419 108.47 cv
15.5703 108.143 15.377 107.682 15.377 107.095 cv
f
17.0869 100.738 mo
19.5405 100.738 li
19.5405 101.407 li
17.1094 101.407 li
16.7227 101.407 16.4404 101.489 16.2471 101.638 cv
16.0537 101.786 15.957 102.009 15.957 102.307 cv
15.957 102.671 16.0762 102.954 16.3066 103.162 cv
16.5371 103.37 16.8491 103.474 17.2432 103.474 cv
19.5405 103.474 li
19.5405 104.143 li
15.4736 104.143 li
15.4736 103.474 li
16.106 103.474 li
15.8677 103.318 15.6821 103.132 15.563 102.909 cv
15.4438 102.693 15.377 102.44 15.377 102.158 cv
15.377 101.697 15.5259 101.34 15.8159 101.102 cv
16.106 100.864 16.5293 100.738 17.0869 100.738 cv
f
14.2988 93.7637 mo
15.0127 93.7637 li
14.8789 94.0464 14.7822 94.3066 14.7153 94.5518 cv
14.6558 94.8047 14.6187 95.0425 14.6187 95.2656 cv
14.6187 95.667 14.7007 95.9795 14.8491 96.1948 cv
15.0054 96.4106 15.2285 96.5146 15.5107 96.5146 cv
15.749 96.5146 15.9346 96.4478 16.0537 96.2988 cv
16.1802 96.1577 16.2769 95.8828 16.3511 95.4814 cv
16.4404 95.0352 li
16.5444 94.4922 16.7305 94.0908 16.9902 93.8306 cv
17.2583 93.5703 17.6074 93.4365 18.0464 93.4365 cv
18.5742 93.4365 18.9683 93.6152 19.2358 93.9644 cv
19.5034 94.3213 19.6372 94.8345 19.6372 95.5107 cv
19.6372 95.771 19.6074 96.0464 19.5557 96.3359 cv
19.5034 96.626 19.4219 96.9233 19.3027 97.2285 cv
18.5444 97.2285 li
18.7153 96.9312 18.8418 96.6411 18.9233 96.3584 cv
19.0127 96.0762 19.0498 95.7935 19.0498 95.5107 cv
19.0498 95.0947 18.9683 94.7749 18.8047 94.5444 cv
18.6411 94.3213 18.4106 94.2021 18.0981 94.2021 cv
17.8306 94.2021 17.6226 94.2842 17.4736 94.4478 cv
17.3252 94.6113 17.2134 94.8789 17.1392 95.251 cv
17.0498 95.6968 li
16.9458 96.2471 16.7749 96.6411 16.5371 96.8862 cv
16.3066 97.1318 15.9868 97.2505 15.5703 97.2505 cv
15.0947 97.2505 14.7153 97.0869 14.4404 96.7451 cv
14.165 96.4106 14.0239 95.9424 14.0239 95.3472 cv
14.0239 95.0947 14.0464 94.8418 14.0908 94.5742 cv
14.1353 94.314 14.21 94.0464 14.2988 93.7637 cv
f
15.4736 91.6523 mo
19.5405 91.6523 li
19.5405 92.3218 li
15.4736 92.3218 li
15.4736 91.6523 li
cp
13.8901 91.6523 mo
14.7378 91.6523 li
14.7378 92.3218 li
13.8901 92.3218 li
13.8901 91.6523 li
cp
f
15.4736 90.5444 mo
15.4736 87.3701 li
16.0835 87.3701 li
19.0054 89.8828 li
19.0054 87.3701 li
19.5405 87.3701 li
19.5405 90.6338 li
18.9312 90.6338 li
16.0093 88.1206 li
16.0093 90.5444 li
15.4736 90.5444 li
cp
f
17.3398 82.8721 mo
17.667 82.8721 li
17.667 85.9424 li
18.1279 85.9126 18.4849 85.7788 18.7231 85.5264 cv
18.9609 85.2808 19.0796 84.939 19.0796 84.4927 cv
19.0796 84.2397 19.0503 83.9873 18.9907 83.749 cv
18.9312 83.5112 18.8345 83.2661 18.7007 83.0283 cv
19.3325 83.0283 li
19.4365 83.2661 19.5186 83.5112 19.563 83.7642 cv
19.6079 84.0171 19.6372 84.2773 19.6372 84.5298 cv
19.6372 85.1841 19.4517 85.6973 19.0796 86.0762 cv
18.708 86.4556 18.1948 86.6416 17.5483 86.6416 cv
16.8867 86.6416 16.3584 86.4629 15.9644 86.106 cv
15.5781 85.749 15.3774 85.2588 15.3774 84.6489 cv
15.3774 84.0986 15.5557 83.6675 15.9053 83.3477 cv
16.2622 83.0356 16.7378 82.8721 17.3398 82.8721 cv
17.147 83.541 mo
16.7822 83.5483 16.4927 83.6523 16.2695 83.8457 cv
16.0537 84.0469 15.9424 84.3145 15.9424 84.6416 cv
15.9424 85.0132 16.0537 85.3105 16.2622 85.5337 cv
16.4702 85.7568 16.7676 85.8906 17.147 85.9204 cv
17.147 83.541 li
f
.61957 lw
2 lc
50.5576 13.1353 mo
327.134 13.1353 li
@
327.134 227.258 mo
327.134 13.1348 li
@
50.5576 227.258 mo
327.134 227.258 li
@
50.5576 227.258 mo
50.5576 13.1348 li
@
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x002.eps)%%CreationDate: 26/05/15 4:43 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$>*FcS.=+^c=Xm&kE;X^1:m$^@-D>+:35t&0Up6rVlSPI4R$OY+esihs$PEm_5-?asG6:/Ba2fVphL1Dl;"JI$D5B>tKp:%Ss2YmWTZZHe`9+Z^!f#X%btXdJgQ:M0JDVs.]o*E,,t4"9)%`I]@e'noXf%d_4]S#GPd#XAGP\?-[Aho5Yp[egLe(RrD0`KY.oB2%d`#Mb\^kLSCYeu6I@(_f]Dt2oH7o0)g5Vlbn(20$,q5<1JE:F&noB8"+gga0J9O(nmGCD)"<hV?G/)Gb!Be`$nb;Y;E/<4u-kR&R%jhoi$Sj3FTs(1WERNJZJY[8K\\t-kmXg6jOIFn@'k]Hq)V]dDOVF7"]1r"D)qQPh0,7A6m7ASp=q`?Bd)Mq*Y)L<N@8_&>(3bt,-%]&mA%k'pEp43`)Hfd@ahp4qh5s$9?p'h&\T-[Bb+gMZ^<409[#:'QeO=EN241u"ralht#!r]sb=&D3VN^dYs:d2\n[m^@V=m41b\%eUY6hT`0/A:UgWE*;>nmMs_=WE`l?5UnOg(5>s8!n@tb27O:K+YppIT:P'Ce!"O`g7pU1f3pX<5qIk"PN9%:?P!7[h[i0E+l;H%Q%+.3&?_>S;Xrs>Btc,3tr6O?7<<Bde[#X\O[S5aItM8ZJoDm_mL;&cm<JVY`u=m/iM_tj_'DG<D;o&"!Bmib5fJH!YGHtjRIRO3EJ%b7#lDn5kq7W@Yqc=XHp[20bV'V.iaue)6Ri5q,N\;OUXe0q>*IAP<c[QmN(Hr.S%G$)QQ!HpXfQ)+p1;n7K3>:Wd5s;lda`>#!K(%m90sjf4s@e68>1#cpMOn:Z5%A>Xm]VT25mK"J8Ktg;I/eSjA:m'?WRui"Ohh3'lDT2Sgd=Jel0M?m9tBR%Zt<$13J^!/3<sSV3K.%IOGBeJkmdnWr\1P%o?#G9XmX'"J=aLdW.Z;Tq0P"C'Vma+0cI>+-_BN_'`V74\/aNSrk(H^JG9ka*O+lKtIf\K2;7GXX!cTT7h68%^aG@up;&-@73X%2YG?WGOi[T"cK'cR)53+1*D-pX0tra8'C(-h65QVf?tT@+9!EeA#$T%m'3YWZP?*mFcp%5X;FJ6mI=s!/?20(.%d(2W68N%MLKQEpn,2GqIRB/)V"3QIr&6WE$K(USO4/%[RS^^=-#*cG8@;R6r6Rc%t_+ri7ccJC<3>n5QRRs+bh@L)Qr/\q&4ke">%M)60Rp;g]jZ=TY!2j8SmrnqWtL=f&+H^Sm,mK]D@E>%-:\\VrjoWicL?LjsA$MY_@-!F0As!3F`Z2]u:0QY&pq_.c38?44kfRM"-%>pmDS^Z;"qOPbf/l8Ik@@Z`dXs,ql.')?DE-3"VB8qfOs^Z8b08q,NEaZmW<8+\h6*IO$!-,8+dne\]0;Tal#X42Zl'r+s5'b0pK%rfZ`XMQXiU]n678<!iQQ/+A$4%BuQtT1/OI02(.Cp]'`lKBNYk]2et+crOoFQ_I*8Y#d;XUPu^;?ojP&/*L1L3/,,4/Q`=n3?V?O%e2&C`3E77\6;9B$oa5dIWmLs,1^V(IgS,1&TFC`KRX16`:hp3KW3^pd<-V01<WJ!c$\O\:m0&m1qk]GL:%CK45gKlVM<"uZJ4`cl%H)[_\U"Y'kas[D8<Q0RA88A?c7hdsG1<!NFpu"A:Jf\EBLFJ;jAlN)Ioo`X6^9[c?8sF)uDCM_SWUau3IUuE0l-W&F%0`$"?k$(W%EXoR@n.,,\1;Z-#A:4^2U6oiDM'\b&ME]0EOnBPRf1+W[A4'3`hj+D\O19p(Ur^ijb=2&.iqOZpS-#!BQ&Ge^h\_PNCI3-a2%,TJ%]WN-f@DZ_Y_PMf!gb[;pg#=iQ-[j+V)*fJtJ#Ho2.2ufV&\97:VH#6p[+44c1u324Sm/iscOGs0.tA^)UC^[SaVlBmp._Pje7qrP%nM?7unt!HGdG@/8D4/Gj6'(LpA\j[[@b&$YP#6*V1mEehit6gVM6%2_>>3I/g`-$\F$,OjJsn)PE;`l@'g^-%Fsh4&518)N,AiZF%,5"tE%;39V3Y$\(KMtdf)J_c"MqILN,r+#o%\.3<n)V5WUr=H&D4F!U33Z<*Kh<+Jpg4/q,J'mKP-!gbe(b^>Ma#86E0tEeKr<Ia%Hf1+MCd41"Q"bMJVrFt8qbpC<Rea[NH4X&N]i`0jj*m4,^)gU(TJg+t.KXrEOeuVm,X"YCUG:JiXoSDcCQWK50TF:t#W)uC-b?i`%,`H^`/1\?n#^:*4.Oc[pS/_RA`KiF$OuC]2D4m:f.>ghIf[+G2Z1(U1(+tg%=S@h\C,=iC/<+JZ;0(*@B-'*[6'hU(8r9r[/:,A@%m:0$4;cBEe6(UMYpLsS).9-[4V..3UYZ%]jCg"):krd4`+a>G:C:'3p,h8kOXf%Jl149Nd14I*b96T.B;qJ+hSe4O-AU[)p4BJXF%?aSmPe4t6RljNM,^TE[.--B"g_ITt]H-=3XlTi2n`NibX_K3?>fZGr%;b*m*?<02CXg:#R.!r>VZF5Imh/[0fIVN'T(-UM+1APQG%kMR8D+i1TQ"=fTRYs$Wp?%Q3cGkMrA/7L_Q`dP\/<YuY>3J(@KA2YPg-eM7ILM`tjXhIWfD8L5CXI`8Ees//a#(gQjPg+8n3E"!o%$!0a#&aNaJAahfRk=^#GM5<dE7/#DpkE8AO(u?$cqDOO9n,J6O`-ohDDPn5PPcWE-`\\#S<Pt+md<_]aV5)!/A_IXgW.MdRG2;3c%Zc'taUar4'V;k1d4sAep4VS+,JN^bMe="l+Y/4`(nOnL[M9$Ub`bZkTpTn&iqWr.uCe!]uCZ'])g@=NE&tJ$N,Vc8BP02o8a*6i&%=Zb"'Vo\LpDR(,srZa4i??BA.CfN,ehc78ABn5B6Hn0EU_6Z@6537uW\)%!*c`HU1aa%t&gEZ-+r;6;gMb:H>i3H)ti?uY:8c';e%g?s07Hb5jCDB`"qFC1NZMgkU6'h]U_rb9(UZcNUZf\au(>Jk'ehWeYS&_5V.IPXP:U6kCGp,Dp:9(TaNs0c8^ct_aIB"QgXcruNW%VieWppNtkt:YPJ:]q<5^$hH[M0D)'#G\#jC@1eSZqh#r!(k)W)EE*QHJ9r!(UAF@8=_]lWNIceQr,`QH@,^n+h]TGV:R:jlK?rUI%\(e@<3ZhMW.2YFGr4f"e'Dt2[\3h)i=q`LGY,U%qrp+;bV>Y0p&-'o,bOp%jp!Ku;5$Mr3'mMjMC*M!`#hInjYMFA;n86>^#<AdX%LTS%/oDJ'nYk];m%Ckrbl84SF@dRc+g\pP+kW4"g=mn4&cJ`CFQTV_gWm=3<o/_&?3EZ*Gj9^KLLOZe&K1'._e,<&Is%':<1A=?:%eUQ>ka)&&#<<$h_F,@bZlaqq@6Al,kj+K[MU0m-==b6fJpCf)1.jT'47R-UnQTkcJT;3k\&!QaK6F)0X2eNGQUY[g?"et]k'?L<U%(]D;eU*eRcKf8LthJOORa&JSA-N#(H5gpi1&g'>`9:V6J8f4]j/3H2]GeT0E!>cTNY=*q(,(]u3r\"UJLg31ejHN[\RO9ofF+O9Z%h$Li"Dnq?Ys)7g><0N$BB"dT!*?]t4>].")AL*IQDU+r-JmZ&l]A)]p^V:;JZt/.XnDL8"BO^n-f`nQ"ak6En%o[r>^YeDg.^0='%*@,ji4n%Q`e_@jGJ=.tTU1QA+&-)(FVhJTp?RLhR;XiK^ef0D]P7o(!8&/L)I]NJ%L4((pIfg;_O43U5ab<a,bhHd2h<6dZ[#AcG%E!=YEg2F\(%Y;tHIP`P+J#s.ETIF<6r@`A2j<cl9L3EhPIt\N(RI:QU;-+3-I>W&%9E2W[@(0RO6h$jaNI1OC%(kEsf&euAq2=:#%;UFjGI5Mu&I-Pf8c$pgf)"es1Z//!gn-CrqXDP-m]LbrtpU-'#`BPdT0a>h9=VF26P-aP.p](.U2?OHCXge=+9RjPqkM>%p>8-J9%rE$GL8b-N#p$io;r(*iL2^M11p?o[`hAQ!]?1FOfA,$qq/6S,+JflNBZ=Ztn7pGY1G`2'oDH["+[HMO)j!:uhen4T)=)7g$eXG+X%&D9hac1`C7r>a\(A>.N?rd.g+g44[pA;fTIs-M'>e!k<R6p0X_^nRdLL.qDEgh"3^EkV'GI/lhHQFDL4&B1I,5f)uNj?^KNnQZ$,%-;V39n>eVR*5?I@D[r67^RE9&k'r0.C83Yf^UDjuiSRDkOJu+D2sWp!9Gt5X>g6f_<Eb#]]DhP5^&R2oI!8ER%pusAIY0\[CdV*N%,S6\S::dRQn>t<WkaiCNLWMPtdN,]f2Z-N"0Bn4b-$A$C\JK6oSArAU*QTuJ,,:L'`%u.l@#866>&U>IRHPa_b(G#3MJ"R;?jJI8%7XIHm^6=e=Aj=sYIFA(pg$aLLN/EGXle)=MQn8rl0(:C$e*XXDVq]n`VJ&Pb7"ofO]/]#Fm=(7UZThdU>3j_r/CBS+?.45KimMIU%FVJ#bA>p5220;&dED`<0_j=P?<qX3pCSV+J4Te1DAHe^k+]X?kX6>j9GN&/&HCHfaf9&<:U)Ee;&:IRIZj*-nl>SJ0!54:%-qY`f%&EuPo0[(t`'Y5.a`C78V^$iuTX8#\1cm!etHrqIKKAXNd)?2R3V!iIFc2Z?urBU^;mT7]'Dqtng8u,)k>@gZibS(hH]VHC5*j'([%N(qg0(rM#TCZBAWDIaraO-ne"_ps6A6%U"i/=I`:p!0$a]Rr[iXo?m&G!=WRKlKajV0teJC:0tD)2]D.$>_hB0bBMkWZZu/haI;_%rP6;=,n'^`(K^"N]pbtDC/BO7h&FEN>OMcqBO$eN]23d'5-V%f%FYjj$JMob2]^YlI*4=?RMYMrB:+,_GAFt\2RA@F&-aDUk\9N3%r75cYP&FXqS,YG#Dgn@'##:B5:!86%f(//\m[D6Y1EPBqJJ??=+#^SrJMZ5/!rDT+Yh<C_$e9daH*+RC@3X>\S&o!MLIr(\hnO"j%r$WZT&"AR0ms!4*4FJ3W>eFmmRRI7c%>RO0]TEAu,G=2ZhdPttQor9>[f-N`cIGG^:/W@TT,/-d$c/_o]"c.+X4'`PLAgNVZ^4#k%^Y8)oeNrq<F7:&6[G.?c]np],\^?f^1jZ::Mu7n52/l.=T[t3q8q#:re1-bA7UE:TBNWH/ibl's47$.HNqU17Q\NSEO3"%ZVZsY"%!F(:(^H12[08(-a;O=L-6A=/\.WM;>rH`,'X.tBrgYW9@X+;PiIr)1=#?r<j/_"?&:SWAV@NTk`nnbR5"g5U_qi,2t[*t4mU[Bh]%A(HNh]s'$bl+Z;b!FKcS)'Ms718CVlr?cjnZ0oLeMn+c>RqScTBEC'ii0&m*D/4=dUNu@ZlFeBqo+bMh23!j+<UNC<ZioJ/Z"gC(%@?\Z:pD%kA,_<QKK5["%R;s*$TTQ;rDk@bU1\m-c4[2]!P,@HddY]:Ub!S(S\SpA]o^7(L1;P7iDS>]^H*gb,UD7Uai*!;?cWa&M%=#bUO\1Fp?;<]7&KL'S!Dq"cf"ORc*'I$NDH8#:9J-cr0,/]-E&[1VU15!'FNn\"a/^nLMZ1Y0U9@X$n2gH>>e@\EH5/+f&q!a(,%qg4oZ\KVjYgT/p3V2*l5jK`W5:]t_W(Ieb0fl0mWajb73#JGlt)Vp$.$1dpK^,O,WRNH\,p#8p6[0:&pc7.U=g.5)JrK4a:LAA[S%CQK5qO[ct7J+$Qi$*Ue$@Wq@Vb5A`8#;[m?!$*V8lM%4!/nn+2GhVmAM+eEBFRN/2gM?_A'Gpu%eEsql!sTJ'+l_hP%R6G2In!hV%"#\e!W\UC&>JD,m;Hn`%?$T$7Q1RQ;*D?emo&2O0]XERPoq%YVNbs,/$5lQ19s!q,^9dn"@JKd2R`KY(_9W*Eg?\DP""\!B*=U]0%Gd#`gVZ_l78DC4d&MTuc0I5AB00R0F0X!>1SNtcq"Hi8^XPqjELaao8^rKK9@0LMmBIK$N;*OWMRbiXMMK&^Zg!-H$D+gOBAV915%qsQ29alt8\r"sES\OF$U*4.mj@<4TYL5jlZGo<r_bAB*.0D;#O`H]BlR$mfU8m=%^Tr_aUoMIk]Btr6r6%]fmoslZXg]GqtO7qCu%79@/13nDEIB6+9&=>P)gK-:!pH.48fjo"u%(?Z*(GXu=&P-9?_.t'6_pOgLF]P\6r6guGU)MGcBU$?rC@87(p9sr<?2I]&KK:-e3%ALJV'hLQk6)I!M+1=;oHqs=%V-^'5&U4gPTYVg5ee#>`+Z&Z<F!5;>lJA'AS;c9q(HUSl^r1U"a?ZB=-0):MiEI^OEE&"bn(#4>`%h@YWcM^C)WCR'7C)f6c1MCmb4VpcXj$sHnl\N0os:0VrQnA-KBnCA!hi,'(]HhALu2?9LmLpn0)QMH9'BFlTDU]nN([u_dD;0&h(%Ml\>9<p"fTWpRqjC&PNo5&'`JRr:2h8\l"BI>@-6T-Bo`s6R*2U].1_qHqK71eY<(m:Oc1hf/AG:_TiVkK3+?]`IG5S=)jZE.2QX%HA=Jp$<P.T>2n)E_]:0ual74/!$#C.YQHc@OLDb*-XHMDG\#c7!iY+*"ID9KI^oi5@H(ALS9Jq4PU_;Y\kHDXB=pmk8!S%2?Ap#B%[2Y-WF@Q<<dD_kj=7f\W^"/aW*SjK!3nVmkF+\,WP,]c!X]p&*,WIrD\3s`f36V*j%OpPt4fb>Q/3B]LR0*QD88\i4`1A7^!9YN`%(b;2EGBXM(dKJ)-=I1qq(O^#hlEq`KQ4@t/S"E%c^.HK$l&':?346KZ#HRFX`NW<e2n-PFB$]&oQ$;21_g3daXe0="WN<b=Sm!`t%S0cU_V2_[d<;,P$9]\HBkg@S#5.1$pEh:DohGdCr_P&4heo*@SH8S^JSgjhVE/9=NHmtQ*0,nrRO:CSPqn?9=I]7J_CKY?':PGA&%AiZ"ApG^Z1Mn.]lhU]D$fJ%L"Y4K'hST7`t5MQR1]@uX@D8!IY-8$),%]r0kMq9f(1"*R\?V0@^Sp"&U`j1_1HHVpJWsjMY;n;(G%R``(Qg8XGCe:OQ/q5,UO1SLJ3T34%8L=<TDUt^__PjHfS=MIiA>>*eg&c"n'4;]1r.]@rg0ATn:aQu.@n!1P5@/MWoCo?E4VWJ6g%@log=IW&S"&R`4&2!/^,4PJ?%:&cqP3<VYhj<7R!GF.`^)/3Xo]d@2h*cmT1?>:4edR;ehXa2IHp&-@gks,.U07><%^M7ESA]^uN%eGB@.>4cUrNaelD?f%'Nc--\6k.3^Z9)H@Vq74`8gt;e4Pk5>bX\]Zhf6f'uB'5-'GLO0%jn;!=?'J*t.SZ]D1UZ(3qRCZmk1*L@%Ha\:Z>Ns#]JTBtphTPo9S$WEcAs"@"0R2_`:9289oV0bSl.)'0%9i#<_LegaPm`#PN@RGMla:J/$DVWanCW6'HGqY3*NaGF=hSX!%'Kdmo>.uueX]-sdT.f+p'5:OUW)q@X*NUe$]IQ.mT9PhkK:H#>K8#:hdAt\`)HEheAf"(aD6LB7YMKUD;`O?LFJec*c^fJWa'P#<%[E$<+XqYu`]<0e'qQ"[>p8bPQD!,--]IVeRM@7[fId="ulEU>-2Rc94HFo\e%@YNdAc70Z>(-1G3@_^H'+XYG&Lq'+WH>&k`?R7&%7b-ceG?YUGn*3*%C:!b<U\<bMBgk!dHo,,oU0:*q]0@fMJ,2ZJSs>nN0$(blmPiI'_5G`YA`<PI4+h;<D!V'qoB?0+S+3TPC8(7X%>NttH.Fl.UV,.Q%G$DK1n#^k:H6B+=CKkT?hNdg.Apc,BHJY52id'FfXiJ<Ok'k:]d_h(0o@)saUM$Eaa'ZH]8oZGig-<&]UZPM>%K-<>eg<8?<*rY>O+.J#O=m>PG1=F:YD=+7IQVp#4hHgQ>f(YbKV8gpR9PWm5\V_kBq8&>j=j5Gh^X)a4Xn5W=\ctn&m\%:M/!Ul.%1-<dI*XFEW.n-Bn2_riEs7o6^kJb-t$WQM>hlR4jh>)1sl#:^ce^>/#kd.)5d]L%F<.qg]i,U%GQ0*(_W%GY_g0J<-/Iu-P0!4Qc%BVa'NEIZY=WVW%K.7Z&$;L*/V]^MqD%Q&\6[0+qdm^DhIbq>4;]p)b$Wde&A[*k5g]SjHZh<)laRGOD*B?b!nW&p@;:Ycc_\a/MI%WVCo'p[f,8Y@"K2<:_?b>FG52)th&F;E7IDrb:Z#Vj\bm1V*fuLAP]JF64g3p3j*9m&iJG4uK.TZPWY>TCo)cql,K`g2'WT^O,R#%qd?D0.JZ2V4apc2HAX_[boY3D^$b[.D=#L8XBc=We+\P<dtR[>WO;SX4r%^2geV;Oc9$tp*m_#>9?bQNG^>p0/Yr<:5#bS6mAD0K%HV$HdF1uSm)4pJDI%Pjn8Yo@hVj(]K?aYk@^UI']:KLQRVgFT4ET?rgXn-jfi6S\(eGSaPU@6QGnaNsNqfGWfS.Y][<_Q)+fbL-g%eK(?p^<#$@P$)oj?+N!9Cso6Cr0ht3mTdD@0,D6mj"\/*\&lj&YG[k6>K?Y?Zo$fDL?7O91>"8gpLS\k`\5SOcYC8D9H)3mb.!mE%hD9)tb4j3cI,k</9B@X9Ab`c)Wm7+:CRd!]M2%_se^$i]Dt[h>L%UX@3ZElhIYQLBQ!oL;I?VV[>+0H+WGlNm(=4i-jqi+p>4/%%%hq+t+Adba6f.>?e1K@QF/3B(R?g6"-oPs.pWAZhbfk]L:o=eK^9Xf5[Q(f_kO6BfI:jYDfpSsI<(RQo6]\3^X2Y]n0o/WsOj/@(F%<SEh4T=$0ib^MIr\9VG)0mM_kme`SU]%qO/R_ABr'X;jfnu@pXj*9s![8hB)(tK0m5*atgqR:RD2GbCb^9aqdmGM1tX;sL<.pYg0%]dh!:0jO+^JhMb]7H.N#fHV2m5&HaiHMicr4u0RhGE)(LP,-m^mrp.dS2U99<4t<S22k=&oomN=eJBO]k(hq/kE3%TmRu]sl0Ue%%^\6F&ap#'3I#I9#qo(m;FsUdND"KKB$bFj.r[Pk9NF$e1a8(br_1oKVpBT0O@;at(OP6^9Tk9^ppc&=5WbM<l47(B&YQ;uuYc0o_%>OR[u%SmsCHDSJkZ]_a\cC?BmlLI!EMH?I:D8*P6H^fuTb7jMh*Yrh3Mi9a9k'&iN:@T6JSn"IPo>7)f:?)iram1XD^<Bk9OqMJ$%eFW,1'&CHq['2"Gg)_3"UCo@gHMfA^gJ%?R3IFZOPqMSU\Q]>'J5h3qiK)@b4%H@'n/e+-g:-;#4tq@;IJXOUimE&`qQK4Jcqn=O%<+'!j+qkbcIqiE5U'UY]Z8M)H/6U^<5J__C7-?ZfNUFe+3R4mjQmJ$cbe5a!j]"BG>P6?g+49[ZF`slLDJrJrG5FB(&O*W9GDPZL%<^&^[H`C99oq<^6c&iOZ46GcJQ.ju(kG[Il[eH`=^-'`=h7?(PeJiLs-?!3r*!S2;qIP#'*p>fZ+f2IYV,bd(r&jBF&Rhm&>->FM%2[G_$2]N:X+EV@cQg?gYn##*n9t?itT3KqSP<^4u5V83TJhLU@TA?>d-9IM=@u$.)O$sj7b7>6qR<..8N_]ECRb+LU*lYYLY!-pu%)q^@\@d[.<_8e]U$]R''#R8_9RHhM)LU-?$&(I/Y'73\:l>XFt9+1=3N__7$36G'%L>/;AD/?rs]GcVP)*QjiR`!=cL_U]P,tk"=%db+8ait?'5jl7rA?cKn5+RlcUXgum-^W;kS*sPJ6mf)nFh/2)kNmiT&9h^\OVoH/D:V3O$";+pdiXI#F\@Lcidd\3O`ePhrG<q&U%2sIEHMq!7=SBL%:0e@onIRjE\JdjchIqUDLV$FJ*^*aKsDFOh@kFH<YQ=Ds!H>EXn\&!uiGT7*rlf)pN\N_s3nJZ6QNqFA2&bQ(D%_KEBI<^Q^8(<8JmM6dmYo?h'ES'P'`KoPi**,a%qD,cg=Ic_h*P_mY7[_tUU4h.gImN4jYNYaR0ZrFW-R@fR&)ZskZp=79n:#Tq-%mY!*E&43$*6q[(tSj+A!=s/rfaqL[i)35><?0m4THe6DZa_03&fE'Us]h;>k[@#S"O9@FX-hj$g;0j4pjuIWDqR-bE?OcXh\18\+%%7YSt/AW`0%8M2an=VjCS:.r+%?D@l@=OGP_q+^I'u8i`*TC_jA1Ug`m)Dm&me/Zlql#2VnX8giEegLL3PW)"f$BZ^ZO6fMlNllN%UdKL51)-dMKC.n%N6sLC?1B*&s-0G$XH<POl+;bi/<:tB.h#OC*R&O6EI#k-.QE4YSpQ9?0%(`r,p*X(P1l<qI0k8/9@f,+39c:4%W;,4jg@)`s&r0E:YA"B.1lZ2J4kS;((qLauEc5cOHb[j?=a&)UTahQ+16R83C!6d$P.W_/X,c05q;-b>n?%U#*j\rsA&<VA/ldGQ%oA6o%E(>i%*DR>/4:P%aHL$pa+6/>p,R72:M;b?(^26L>NL'p`><,C_;e&UUb\u`)&^$T0qEh\[KM7#/]^36X_QfPqokdkV*Dn?S%O"?N*aLNnE]m]Y!2cbQ/c7.)kf,(@c2D<NoHj/H\"\fm+lupj=A]l:S=;+u5,Y,1P+]u.fn(rRq+^!='iZ!*sPn>nL-m!<8iq%'\%c+,n=3SnS-X`9#1>5hPf2*1Bhl=:_g&V:]L8TjGrBDpsSks^k^N5]*mZJ?O2ipdk:?<E!e)h;RQ8;3$,XnQ>OI(m[lnNgOJ,#Y3<%dKsq3VnH6Q>?lSH%ZQ?8oQuknf%'QENT[kcO@f880g8rFrb4!:+3')(5%3kENAgRSNbGf9f2<f'mZ+<p&7`.t6M`"`R_-,#7&.:T%n-I^s1tne.dDiY[^b6^.UBQ[+e8J:4BXmf-Y-E!:"DbA4F?Gc-?88%%GYkQ-Z/R_Hc]R8S0\6XMa-!p*&/RD"[Sl<Y0=D6#Xa!<_%irF-)@)q,F"[VWK8dHt(Yf=@NehS0,a2+3!ZB@X3<dhJM9l/?9\o)0YA$6I\NAjpKY,.]f!r_98ehiCb!%\VtT(aYQ_\9N`_M,sI%V[CF"\tgC&R[)*&@"^Jc,^1I@Eb'I_*t+MH;>Z[7ZQXoP#EPBCo\$H4F6:#%+P)G=k'B)^4[J2"$[lS;b%u;CF_RC;#DpO>:ON%g%7,O\E9;Er-%098o>Sq;n_g!BZpHc,&`\XlJ%p6L,6>O7VD`3"<#o\OCF!:'Y"jVkKUQK#9`RtA"rSfmXY%/aE_m6a[Gdea_;L@g:%F:$8c+'X7;6T8=]gUTe65.YZA=h:D9Hq3p*UsU3_[OK6@%Irr,-0iUbf-pCJV<2:>+F[W3U.Ib_V\^!];'NXXQZH>^?#&L!o#SaK%cMNeFCQTs/DAp:hHUjjt>]\?T*sI00?]<rtGG%WJ[k/^1O5<9]h#OHC>+SsS5F@$6Qh,MKJ$NEt^tG(#;(R-Ib'/hm)n>^p+VBi-%P$Ba3QlBDS^pW@3%J?sc\[&HZ50fK6I&*&iVpFE8Q0"b<"IX>]W&\s#GC!lJiDTfTO@'hS6'k,<-\lT8;F^p3d?^!Zcin(/6+5].%Ep1SHo?3f%.uT7*k^kVSBXZj;3HUjX=rDEgfn/8Fcin(/Z*QM=c(PNjTX/^s-Hi(jcCb8&2N8\;[u,4oL\?a0`m:=tS]^`paOil>%QO.c>:^^Jno4p8a4<URKGdE<\VuW!4p.m!5Bc&:/W\t.<o]5IME^p`mDYlAW:O^m`IDqfDfj9@eq;cQNNG`Y^>Y9[IiN4^n"P.(T%g%oJ23#)kBp`L%7:\/<^o&R1hbIr@]-jQfrZ.d7;?Ug78S=V5qVMC@7E(*79@6,\`b]=LeP]+ti6P5nFLLi#A@&r^DeZlf:GU8q#%7bnIc]G8B:C$bQc7W9;Jj)5+ka;)BoSt.joc!r-^GfaiC[Y";:,j'E:\>lY.ZpK;f++l<I>=#c180Yq)W9TkG'lcssF7(5s&P$=h%YL646S4D&Moih9)YBP3)b+9P#R7Au4P%f@,d%,:rlo;nrn$f_qbR0/;7rXtQ[iq6'2nk6Bb>!TF^78(^$opo*cg2"^"*8%)q&3OK%jRN2'bt'S[pg/UE?Y1<R/-",+R=IHi&WWW*ORtR!8(&0>@hgGd.:`s:N*QRGD5RWf_]4WjIsp((l"aMC5SgfJW8_lEUEL"<OU7c*%)&3<c@1/(YNO7NB;rCbsRV5BTKcPjY_D,-c9^1\_ft#XIa#A>lW\)D7'>WoQENjf8n\Nn!ek$Q!.)':[BR#Z27/2#s)Va&]nXZX2%p-*YiNa8ipDQLgK08_IV0S7*:@6Sjd%nGT*3_#j64(fhOLRs3u.iuI1%k2BnSIBuFoNK--XXjA'&XF@$'pJ0lq,)c2a19),&?qFL%"eR5kk/ss/%-&lprA/k,Hk2D$OS#=+oJhWWZ-F?_b%Ve'IHU3(p=M")AP+3Hc`V'%HeDoVp_;,hj"du3p*W5i=CF67?nVkhh!/Q@%H&s:?+Gni5*0c!ib9I[f@AceU:SE';5t!^r1AOe.bkI^48&e'=Hos02@sV[U)FiMSRuU!.Sm0=_8+BkQnAsrj@g<T4OdSPYi:b:e%`9/SC4qID/,bh*.:$e!nBXRZ29S5&#aZ1S+mm3FK+A'm>j<AIj@5G2>%s@JQ-od4JrNJE6+Cgg(M*g(3>ah3[(jc'c/fj+MQ&)IV%1s&-X*OT-5!AcKGg.Gu:VI=P4)uF,9.&;q"H^F('-,T9=-9aAi[h$)g@VhP,l_[YNDS8TQ#D"UnUlP#HV#<P+BP;FWH_]F((ItkY%)5,s)LGADZih+g]:-P1d/8;-[E)=`Raf+1oE"V[m-Hq7OngkauEFWXBpuK?3bX`a1+3lrPE8(,,iS&;jq/DYM2h%brKRC;NkE&B%%&*M=nJ!u;EcA-J4d*?Ze-4]@g4LW?flX>*t)B?&XeUB,D5W7ku86b[mFX-:1%*SF/]sp3DYmN5gb+fn$`l^ckG]K":c"5LML4DDV%E'.(@jFY&R^?ao`B9@d/#0D#e%^EN*T#'u$F:CQGO+h[D`*moP]7P3t5S]a21hM]t_kRLYVR8;W[YG+HAC`_Z43D:m`#::)jYUA.%/Q`<N`/6<t&/P<)'D_!TZG"!r4uJi6>7Nh037cAnf9*l*B+N!A@O@Q`ojL/OR:APMOY7Je0,=9^+u:oDO2X:d3%-#Z54e-/7QO".%C456pdpWe@,P?@D)6"-2e&Y&`/CV[2Km^.>A>B9uaYQfqM`W06mhk9Xr2o:IosJ;I!bfd(D+;fZ\EkpYDh@pkd<F>?Op^A0MbQDN%cF7/XRL3]""!;+55&Mj?2ohed$5[\f3FOCB+u3#ZUr&,XL_qo_0%_l=EiX,2Jh-@dKJ0qq8@Tlhnal$.QUS'59d1T$Acp*uS^cc1%-dZj*1I=!^H]mQZj+q.D=AjB_!N3.j3F?Wh`[cJ7LY"gg#UfK05Yfe>*BEFImN,?a"8#1QN6?M8+ea=70?Dp.rnMBueXn@uNSeKq%SD/@i?#6$1[gL$,Ep[=7^W"fm=73*eXl>@aYu`R>hob%Y@37*F3:F,o.,B(D@&_JoR>hrCGIEgKpV48`3*eOaH5)plDQ@]rLV3MP%X&T%&9Wt;(I`ZId!?$'5R9HB$%hMgJgI94K_[\<LY5;5q&t!+:]kh_S]'hFZ=W1D-\s(t.WbLd"6TtO0grG`f8p1m>^6L=QXa^.Y%fP.[u5MGRYDhd*8I8JeRG>O$"pYs&j;Ka/>61_GAQXSJSasB0`nZT<GFMH)&`S:lnlc?-QI[-LbL_:W/[!MY0b5$obmsCC+NJ(/S%3!_,A[Es<A'2jugSHkU=.EVj4mC2JS:4phigZ!D27QgBoWAChSra`_^]OrH$3KGN8+mtlP,j6;MT4"B;PN4jO4`o"Mm$m(KXC!_a%:@femY6g?0O[BUaO3/j-/X#Yt_c.i838uVG"7LXWo+F&:<*1st2U&[O&:3"8fJ''PoHYpIY(7^Y\9Yh%G;Ee18M8?Z"QO(*)0-1K%^"J[sJ='(iSJR"JBYri`FC)M",Bp"YS5&2.n7$T]:+r*^/!hm:acj!8l29S,e'+]\e!AJ-VOPYB*BBV7C[p@,aV/:83K+*09BR;l%e&\EXb,+^X0U$(sH**PL;pV?4b,)FRY>`WAUP>HeQ]CIASR+4F="^'2LRD1$SQG8hYOtl$l+Edce'=i^+t:@U1S&>CYQ",Ufm'6-%3j2f"?qY4(CcX4KM3uB$ZfrZ'GUL_4F/&enT,,J!D8MY[Mi^XLSR[jods:''Om(OVZg#,Cl+CrWRj=KK$c-N%aJ@L2**]LXM-nQL%pt9aq[WB<6+PF]dFC)M"+npkSO\P#h6NLhAO-r__2j`XS79`jiZ6NiTNIU#;gh]$T#.`'eO-NH&,Um+%(m'mF>QB(<>lX.[4h<(Q%Q*_KR9kC\:/B"g6_,&]kkLgr#?_+ZK1%"l',2\k$H='t-S@.>(Jo`%#\9t:bK+3ad'6OAZEcWQU`$L8nr)'VsMjiK_H3LF#VJlg5%67i2h.;&ZLq/<*c7hUcI@/m-kb&jeB2T<@\b>g1@R6B075J$kCMAn+l20]$\H#IF&K7E@#3B$S[`5$0V,5Wu>]&q9V00pE178?eP%]B1a&roA(&\T=;Si-j!Y4L^g#20\"<:&&O'Lipr_Rk"Ro\oS+;_QUM.H7iH@Iq$`o]Qks'Sb(%W)\D`gA/6I8)Vr+*8bV+A8Oe\D%cVC!$kI^=>`a3GN82jjQOXl>G4`L\m^=O-\pfV<M2r.*g/o9H,2NdgkOc$X^.1%>)4qX*cf`cRh&KI5X][8W8]P%-&gV&%R1I3R&%2gC;;:^C4"]uZ=Z6Qou;G'!uX0?9N".[c?;n!LImb`-8pS6Cl*:3lim1*Re>9iSCc8Y!dhPO+mZW@$2f]/NIBHP=[ddlJ3T:jL];%*r2'u1/8Cg;3[L?V?u.NHP[8saY+o&9F0BoQ!GA8d6fPCph']=Z_++VRGpF)f]-4jaJfRRfg0RX7#W&ndA)m26/o*fr%._nZHU@f%M%%4E$iuqkDp8G:dl8Y(>UL=u`7qoQ_so^A@@U!T7dinW9P'$NaKS'Zh`2+KVDAWd2r'Cb?Q&$]4'IRB0V$8pG9geZJ&bib@H`3Y%?-LO51%U5aDT\Gr(lmBj2o/461"Od(2s'iG_jEC<OkYB`:C7Uuk0BRf\`#/Wf1j3%g?[\a9i:T9_p9T?c:IBXe.QO=Ib_C4N-Y;(%jBL&b1ER.*OI)!3j<ri+L%0htTb:5m9XK1Vg2^_Fc.MjZjLW!s4c8e$gK-/@O^Yb_EG$VFm-BQd$u]T$0mS*(S/Ga2^;a^E,UVg]%_j-2\ojG&A9n:CRbo,JBe>(7h=d2eJn$dCZX:sRV\4Gr.S#C$p5tObrIG];cf+KaWod5,#'@*`R2[qp19>mf-0b$LbqtS>0anOIC%<l2Oge&uaEoo7U+p/pr,fA$'j;u*&,FZZ/[*na85;p')3k6o!)S4%Z+R9u!?a>OH6M&7CMoF)odC'rQU;@a=\_gr;7nR;PUr?1-;%BDnRq-'h2X^$EgWF76cI\TE;*hL/PTd'rBUP1t3P:hrT0)`&3anR0BicS>.LObS(eH,`qNaG1_Y?JV4BXt&TtCb+WE>?=!.Q^?d*%L=cHR=V6'4'l(U[?fmt=4/\]^+8OHf1L]Uc5N-RYes$%_h4D<lFB+2U5J)\fpGN!0G7Rn9+>rOSp!8C4/El\RDQgJ7b&Y^<2XfBa%WG1&$)s?MSbWia-eRJ%Ig5/V%g2'qQWkA,g_`\6(\ilrO`f'_g]@5FpT1Y(`7r"m4dPFt$AD`(e^\_+3PuarP2.s,<_:+qINM^+_%0!6!qjTrmr9?Lfh!_2-[EMXMG*9,UCG?D8N8_!$0`P$''$J0MrS`PC`'6c36`/Tt:WG:!%%B;hP2AtHhZh<8+V@a>q8+mIuq("2/%<r%qYp>"9>S_Oi8[:p2%0=eP$1ZHc@[^F769+'hSLcZbIpiIR_!A/Uu>(j"X;7"\;p1QpX-\dKhH%kVL%El>@\4_a^/-:VGfr#RW%,b2h6hi5$>.u5Hh0C]n>V&QX3Mc/STdtCA"<?F+7Sa*49Z&b<U?4lV]#Q_i)]J<j]*;f0%gZ=O!0ODq0*t:"0p[V85[e%Q5O2X.6%cJLieSOU]sWJWj^JS,N_b1Q&L3.s1%JMH2f>.c,k&ogbgA^cGs^e4("S'!J4[4/8@la?N5?p?k?,hrRU=g8qIp"H@:5OQW\:7mF7%1NMctQdH>Y]ejaRfhKgBBAmJk3)Tdplo*2Hp"HCnfFH/EO.+1$VX/-8.-DTFB=A&8N#KMNG7`lN=[,4s+R^=>*;u=q;C\S#VMM!0%A#BB_?[>.;EOX-p+Uc$930Z$W,8H<"hJ>;l,=gaY'-Rb,jb^m[ON:uqNeKkR@l<gBH19qJ8@l%o@Q)esHJJER7M]C]*'hQCN1C,3%8qV<tTYh\/SHTiAH&h#_Ng'\a2$Yi-#'N3FZ#8(_g^OuY$SZ<*T_CI[;6p7to$_BWN1L1i2$YhP)EAoJ0PV)*8G"Jn$ZM##1YO>Q%V0lg7U*K3d+1ROg<0BVS[\@'M(NpG1F=uZ")J8^c^6Hrd?d_/\.A+rbaA]g;09-idr(Hk@B;thcQh!.KZ%)+<5#4g#.\F'JgDNp'%IPt0<Hi;rp%5mReI_:OV^"%&fZ_:Xuq?:eD%*<gUI'6mbdk[-U;qd_dfhdh!oa<o%C+AuS"lJS],JS8N>R6C\`3Jb'o.ntc>Q%g9%Qq_#<Yh-"+j(*2LhlZ+7aVF8N^Yi>p-GI6XhWm+gh_OK1I_f02\<\T!lPI3@5M?Utn9b,.k#Y<$YFf;eN+C.W9(EhnqUp^P?5$V+%4Vm3e^Yk^Ub=\7%\i[UU07of\d_1+GZX)'dcsc\F7DFn%igb5M>Q)RQO"^3kkC"H0,U:[U@dEHtLfKC\rPGu(2"(#E:/<#SprW!t%$f4juhde!+E3J.).il+q"ni<?W<p2g0DJR4mu3t8p\G&_K4.nsdn0#(F61pB*kZFaM`pc^me$rG"$H&4)rk6h%kP8qhN*/i?SIe-%qtMAmlPFrL?U0Q'?J\%*kZ0pLa/3gZ?gt1HM0,7rk^TdCbcJ1NAQeW6qF/qE@JBUmArT<of.Y9pI$<IR(OW8j]_hKD*Brogpr:#!%c\]Vhbb')k9)O&7]UW]@:=P,BY@$dN)P:e.KmWcMDtOK@]gbeP&%pGR]=E0\Hi7EEg,/N:I]dc\=$19rqtT/qZNBUURlhR[hWd&a%Sh"ufT8u('DQ'6j<@5H30?Vu4PMb[Bm+6:7aYj(2IU;8Kp0,XL()uRG^YiZbff;1j]mdf@G5%pTpKg';N^__0)<5&<M!N1in+DUG%HZ7tkrC.2_a/sek/JI",B6C<=Xa]&>o+TsG(Ru&+#[?Xb][ner@`*2%U3lj/FLds+A(r]?Hi8PK$R)DM7D@A,pf9V"DU7D<qD"/G%'4OO,4T8J4"cpdac?F:O3P:\U%PcelrZ!pq&]=NVQu(g]kWObDM2O!3,!<,Y=<$Qh:?PN=NE2<ac=/I&Y0@fWE88sE:-N^"71TV$%^,5UYTkS'k[<-mT-PUI4FA`84WD[em)nUA=dn(;2mX'iHs4jXuNjTtRe'#_Snoo8NoMZBG5)tN,5JJKroh]SJkhF;3S?_opSNf79%3E(FADXV^*YIka.[@@)C^7S:6[[!3-g"5=tj8;`crk)ncWBXIPk53qV0rn:QbZp\*-dl?PmBrF$F#2;@H.IJnrN2*'Pe''4>aU^2%gKOIPIWmaJq`0#,F<?r%\8-(rkJlW&q,JoZoX'mH5(9Z#f&VN:TiTl#$+9N:4^hQa5O8&NbY3Lo>bggER!mCh#O:XRM3SEmZ*[h>%^<Xn,jpXn0qbu\h*kH=DS2omUolXf3Y210]S&Mkc*iR3PT%,K5TB,I!QsM=]*UJ&+$aTpmG<"LKbB'YuQ@<H2$dFmgX1O:L\PBni%qINu25(7/!NDp"#8bZ>-B^.P.;iY8#g0k6L,c6I,Mi4qrf5)S^8_7[\pKYT@2=72UHWI+1REUrOrK^!VH#[:\9:(,YGI?QB^-8n$%\:&Oq*L.R">D;%ihH"(3=KS!t?ROCi/bo^XXg>:g^:JS\Ul.<<l4r9gqI+'Z"e$<Kkt?eB`nRDneUpgC\#T5Z4W"n-YHORbW`M,@%n-q8LUn*::h&KSIDlC-n]Q+Vl_[Pm#GTO.JE^@r'Y]!tTqi27aoFC_s0B0WOUi:L(ki[7%s$X3GI38D=kLjXY6EM^X)@5_jYZ/`@%IqtICh-DbEnG/SF1ICiBr$-8b[iR*j%h=o^X9ZrHK."?H4Xfe1HK>[?(6NsN?2B-MJtkaUG+!VeKo^9PK+Fee4il[\%E4mK/HM`%%3H8]B-KBCO80gi]_Y0f/lp*,%&']-q?4_elOqgN6bY\S9ln1*Is';Gcki<kIMr9Taki\?V4Utdeo[/2]2\J,>F&Cf,5k58)9A-k'%Q?M-P0(&g@93GMrQ/3SFE@l4QOH%fQ;tdp&WR[#%D.D/T<Z;u*oAA1uU)lbTV!_Df,ID*;ph3081)`T..G/=AbOq-@nT'*OV>R=]%pPKd+c8EfMVGt-6I&]>Bn+W[FgJ*V!bCsbj33n`p--QFXpKnGOei9TQ+jPQ^fGPP.i!@GfDtTO!Ac*"Bs*TrV/)A</0\tMVO2#JB%pmXBYILd$B%i'sQj7*A^HsIrVF_4iG4_QD)7gO;n6b_+6b3QE-^?UkMbq#gPEg&Z]:tSUT;m!L@b+"_TfT5c9J;e2dbEYDBD1:TA%ZZ'&OX"&TgP'4<Q:?ag*I*=[h"4G"(09sHP!`0/C=2\t$@kZWo&qP(F%mOS56Y=qJ("6YkUYU@eZn(V0_8Y!Zk)E9o^Cb'`k(;&G%R!37;9:<cGQ7J$:h+[LQFLYDp[ek##J[SLW$Mb&_D<\cPG_$9/elQ"ck!;V3.^#8E,r3>02c",VIEgg\XdPAudec?X5H);ErKp\S%_G(\&\'*FIM?$6a-T<8&DSaYa-)<$iCk)T2=hXZ^hRF0uQH-ERCq.UI%MQ=Do&*m-.C]Fk$-SO>K=A"J/XOgHHa',n4g.(Z:?]>m%8e5XHp$S06/#R`YjGbam-t"oTL6U6.DF%*+pOV)rE,(S(I0u7Q[B>#e*K-655*=,6@s33IOgXXk$26+FGmTo?cA86,;Z1cW"jG:;%oV#XZ,gte@Y@<\F[d>j\2\Pl7YL=IBoA4oFJ"-[t3b$XkJqKPNV4j3t*o36`V76@<I$@MhWHL[YB%N&D;Rrj+h:-IRi@MBY3\q:B%cVr"UGlp5KWSHIW:+G#ek>Jk?b6!L=PqBprrIX[oq@ZK7oXo_>6g_oL(KY%Kd8m[S;Z5>7r"NJGXqo<#M\iFD16p[BD6J3`S!cQp%VO"]ErPphL$D6R#c5fV%eOHLEgoAWn;11Af>MYkLD='?m1L!!@=?@p;<0Xr9qs!#I>@)s3j$H1JUcT=Lf_XDT2BAU9g[V.^OV>.b%e&qQ8Dg"Q%='ebAhk",u75JsLK0+L7nQ^(;pcs]Z*5"P^1n_lM*-P_k/JAJFm$o4)K1`%`I'WF48Co>kq@\G2\E4#P<m@^QE8Ass%oA\?d_rl(eJ+h;D^TVif,;@qc\QnL!.UF\+-Y7,Snp.K$ijg7g\fgk]%bTS6V?^\^T"1oVaXfTeEcAIp;Jij7?^],PFm#PHDZ(7W%`QIUmCJ_(=`=cHN.?tZH]OsSe.MqZu:@W\*Sdsg>des+BhHW&eMjTL]q35[Z*NS-iP2eCTdI?@OL2Sl)hXi3*hd#!)kND"(cgka]%$GR8b;PT-XZYQPq:[\;5kQ*6&pX+WT4t+bK<%be:2!na$QWc;5T+^Bf[adji[<)0ED[TBh'8W)uXQX.(G1TP\]cUsm:SMI(R],ta%p=FM(cbkZ?ogLtAN',b5ehDO^SliJ,F*ds-*4<="BQ.1gnOn6UM][TDke;sH45$CR8=<c.Od!T$*c4cp)Nq?seTq@pN\%$ZZZuC.%*8CD?2d44h`?o:OB!hH\a2k?Bdp-G"@Sq1P>%qEhRXNpQ15gF<X9iGHc25?N=rb4B(3?qEb[/N@a9[7">fmEe>.WN2'luNHX8$ja%<3'gfWI)ThG@^fWo7i<>iV%<!omY:mXnEiDO4Esidp2"DIWE)$kRZiK01XH9c(%cmC?F;SU\qV\]<hA2Z&q\T96m@`,qWpcDS,gV%lnGUE4r,Z0]bB`H41prO*E8A/GFuj4X6]b"e*MRXeu(_)T:N<@C;%?CYMM-K53Zcb>T]cRO(GO,,d]<BG9*fG>4^MhZ6Of>TEc&"%b>/Z$QpC79QoQl\U1]dO;<bJfalh9YOe)D4Hka%jpV+qIfeBp6V\'MU4XJMi)ibO&3SpeJC$m$TjsJ[.qjMThE*Ri^jn<e/Yum=?%cDYWMXErB^WRq`t2(-iBf*V!?lT_om8(HoQFKQl0nMBof0O`!,nD.l/T`eKJhbWS@8>O.9'n"*c*ZJeYBC8>#gd(W_"II!1j%$>V%h#,N#*`!8?1jNb=k[U`J-ApJ$r,Z^lH+8T@OR3-,nXL\;'o&4T`?"V,O/ADIF7`D0Xitu>/!\eB-N#+[96:=;D=LH4P:fpBl8Ir*%10MkYZo6YhQV1ZnSVKgD?PioAXfdNRIs6>JS(YkHfMGVhBJ.^e]fDE8AgB$DqT]qRe._*.cEbh-n-m7;IW^.Cnke#r?N3>q7K1+4%a7Ds"St<lR_NBtJo4r^c:SaoP#4nsbg<%b>I&t/L8B2WT@lDq/O%ga,?Hiq@0sBOnJKB_(]Z(pr!A`dp]Z(prAH1:6^OOJ<r=m#6%X.2c>dQ:&Qh.=#m95UMkauq]Wi9*EVp\Eta4Es@-2d$=IhJk%Bnnp]XV$c<\/ZIhpo@A*a:"/cJ=`nEN3b<6AQZ83[:YSZ"Y(n8J%\.\/ka)V1Mb&LL_A$1rlihu9\39pH-?f6#A0sH*Eb7tnqqG8:#fPZ2qSfZWN(/*Xq-15Eh:G87%Z[*'e9)O<*=HDRmJX:ip%B7Rs%GlFsCY@"oo<,V2gUh7pMlFq$KYE]IJ#9,kP(Gb)Ql96/0P-O`a0!2OgCLY,sWFY\\(i*/lTfFZRlAs1th+"_2R%D3Bpsecuqht8k%f]TP,[uJBc0fI>n+,Ul$J"@jeP45s7Esd>"bn5FFk6-bkD.GjqQFC>jq5_22/%4bn,)gF;%H1Hi%8uMQCaW6]-h!ngm2HN6ToR1L%Nq^HhP9%tp8H-Gca5%6sb<O_N\D,spRt%g*=d8*Am<IFRA&\6&FM'd1s2g;Ah%"d&rm?bHh$tM$WHC<\m"_''Y5M;m*dFuCb1aH<%Ha^J#3Ofi8*MOhQpt*7(7HZ:OFnE%1pWc18EuNAE9C(ck"uD4qk4u%H9Y.Z^D9o"Uq;PE5D_]/VfcTVUOJ-nj]2AL?T)<Ockkq!Y%a0bob;X:gLf';nUEMj=Q^#&>Ji-D_7F/+h@mqid%"9hLf69N)RhoLi8g@Ko\r@[>rG*!<FT0<C>"#MJV[/RC&TjKTKYjp?%"PO\q%+@2Lem7,YQ5)WXsMfgQdkQ0OeGLEm;pIR>#,]Xb`FB?6'*&mi#0tl;T49@i^i5)PeZD3B70/okJTh;cBpIi!igo1.p][!'2M"MWs%)g:p:[8O`^3;/hn8lLD.b2@`?N@TCYP<!DWA+L_u@jQ78'=MG3$0ekI$Y+cdYaGL@HuUP-i[]$T$S$dMMZjVL$W&FU^\>ba'3s-_%ja<J(ZU!A.c"&41lC5g((9@qGh,(K4']1419RqcP##t:hfmSb^4-03*5F3u_+QLFdcP&ADN<le<r'd"rrJJ6-]H&*jah\&+YCpZT%j-70>lS1.%:)4G!#RKq2P".g@&rM=YN<!>Ri>`B(?_WPd8;#Q$MGF<j93U7BEi`l7;lDj62<J#:Aq8ISO%BH$r!W(cq,NeMW.LiY%E@_emL6kQ*d2b3T1H:D2alQVQGc;ZY_dn#&jAA=1L^]SA`\DrW4:Q0B[T**IkN9og#C<#8=A6>(E,mt!?tX;T6u<ePKe8PjHse1O%N;X>&Q<XbYQ1J)Cf!paH>h0ZSTls;=BYAh9Q&@&#!NjL6d!QsGJLGnV/?54QGo7Q>`+Pi[5$Q#r;/e9K<\nt<)m^E21?M.1OYJd0%&SC+R6KR0jdNB!jS-Tm9RZEr#UN0hkQHH-_\7amA#eD[V#$rdI7!Qqs!PPaOccEq[bGDYW)0p5W)&Y*<RX^b0\hp`G>%F\m-'HG-%a(O\fStB0.c:OAaJXuPRgrIG>?<ko05=e1oGHF9/!r`L][UeU25>B48gjsecE/j;o5Hs/'=e\,^111jb/CU3r$:XK6\M@\u9tQ"B%P4QcXMf%Z\qZ3Q9]VFQ8q@`OYb8f7b0A@$4N44f&K)Is+>Q#tU#Hhkfij[]L?aQLhn$^D"mK$D\p21qiGnI$2#Fs0Gj8@4V:-!n.%@@"j&bqiHcS<>^*ZkCE9:Tkj5i,q$(OnIJ`SA%=:0R).qq+YeNl`g.F/RVA3ppR^@*Hip\2bl"\>.B'(D&0$\_F:])gL8(1X?[k4%E*98?G&qHLEXJ>%gA-fKilTsP6"PO)F`-B[OWj-`!40uS.S8<ag)B-Q)B[;i_7E'08KFDH27F[rN/uuomp)o>f/S?J[0mSgR$DeC%4oRW^Z,G*=R0iD;_DSX)WEVBqf0f\:b%V_oC=`WTO*lq+^HQ8gRqS?[U0ck*Y:b3dX`"P4;-j.Od*Fe2nbK9km(Y'T[(\W<qSjf^%_eg]#rofoskIsM@Q*32/(r$!J<aqrGLL]'$l"\Mf5&ID/=*%$iG,1H54mJ=iaSm<!Z&_c::`o:PV=K$-(te\@5&RQ4RJeO;h^#qk%iJ.Ig`IjW.g<8#`3K^Hq);/2qH?a#R]o)GsZc'Jq#Z(0.C!pMY3D1&bI:a!/1/"\SdQ_Cfje3PWc,0OQ(:`4N5QJKYo>F5s,@&+N%a:gd>W1$l2r%L"7[>_e.TS2a[i4>Y>kfjd3W_oRUm[\Q@>DLqG5A`Qn)%7#u[iFJNSQ$([E.>tRplVGV,OL/j+jm5V2S`Cn4k$Aj%1WflkZNqG,%6Lg3l&_/]FS?qBU&o>T&..g60/EeN3?Q:73/a<&5CP#R:lb*G-U[TPJYlIc*t)1.nHt@'OMgSiT7d0MOjFP)9,ah(%-OXS%m:QC.hth#/P.AMGU/9V[`QM#O>O+5;(X;si/)@\lmq-4">Y,]gkN1N*6`i3&\rC;7?O3OCkaW099Mj5I`ui[efFL5h5iphW%rn<c'>H_,bL"d(2DLnn%Z]=W*OTDksn[1jWKlWff:Y6GE:G)OJS3obB-+,9D8h_cAT"i3hAad"p]=$ae>$&J)Ka'cUk]X_#p"*ZU%GI4ieD[n[aS[Id2Xa?sN<Vm;N6KP@nHVn!#Y.nE>>NC`@qj7onG^)_.e3#":.aZ`sBPAbM="t%-cO%G]?pDRAfbo>^CiXfsMa+Or%nFIOt^H(fP1C*C\K]HX:E3_nd-dqeR%%>gs;T!4tMma6%h.=Ck2ioXP7U:@]>Ta82P\ts4d*G@ISC^#d$okea$]!nP0JcucfnKN6%#f;u4[g+g$?<Ae,RXJkt^ND*\8CG8@80]$7jXFY\7$"X#`i3Zg,6M[rTm9MgD60YfTaj#UAI1o?\^Q#!V;cW%=1A>N3:V;X-7:QF%&,PU'JK7QaGeF^-f7Vm1qK=O?l0J"6g+[^se5rhrR=/j!(^9<\YHqe\C]bXtL47tnkdt3r!rM[:EkVK&/SlJEYTk&)13[oZ;bDKc%k>8f2rhPsen?#,?)Pd#\VI:?#jfo>:N0\lA`pb<n<Vf0RAb[O,gYu6<IB/:m>JiX,if3*o&-"'M-nh/5Fa-njb\jNI=3ECT[?ne<%ae*8.HbpDTp6=29&9*48$gCauL='9<$S1gS8Z?$_I]g*d_o9c]W@D]MBUdj*5.1Kio:Q?SS+ai*]Oc[dQFE9F(rK1,Dl1>#WGrB4%pgsl)O^f:Zn]_a\qMT!b`&1K[""CoY8`D>YOcqTW7^M+\Xt<`Mbn4:%d$\oo`X9Le\RKd`bOR'%Xf;cF;L*/db(U`ik,lj_b:n$M%An,nOKc7R]Y#+.dVH1#^U[/92)7ABhE-$(uZk0T"ei$3BrlK=&G:d6LojMuGSmT/I;9)aYE0:Dco+8gti/g'P4V"&p/E0@<4qAZ]%Vk0Q$SYccqK4o(`Ssm&>fb#im-p?Pq(UD(N_L,"I8]#jo`HB39iM(m1Y8EU-KSpAa`,J+a:7rnn$28lDPq`;0?5XF!GE!scksX%j%/-&u9_ZHRQJ-h-T*"t6R5@$IsQ`9W;LO8hnq4nUj6A.mB+rqBcc"8pfiWuZA-j:g90%jHX`^I'KPm2%RH(nDu2'P-ofKj#cZ149f%*/g(gUGA=2Zl'#`%<uA[]OhE]KZ]"aQ$/Q1j.gQ9aCW')2We,kd@FJ];a&d&EH77XQs@oA_7C>'4%=,@(PNA/49BmY>qR4m2hL`j%jP3)`U4J@'^h*kW`eF^"OkWbP^kmTHOcpU`D:Tb5K:2-*ZAW4H7D%Vc7p\?P-#;D$"(NL3J9\KEQE`bo6H0`;"Css^ALpAG$W.&F%QNk=3&.o4eL(MR$[S8*I)3\g+K&eFl;+H""%]<_?p&=erH&83XDlBrDKf#d[O`K69lq^%m%K8]UU;<F`h,NG_PR*+%DA)3='UKM0%lgQ\c?=or9g"([uk80$e7=Nq%I@VP)!df2pI9KdKMm)/QLTXBj^6YVYSOO*]j2=8XO+U6@?6h$]H1Q%\T6Ro^r&M(kpl65>?m/\M%=pGi&T@ALD<kdYXj.JuhGa7ICem>T<"4kOh>9DE'PUFt'"sN`6S@/o1h<,;Oc!?4X+fkKF<!9@&pfN%/f"(K9bB(:ff"nFj\qE56%Z-JCnim3ZSM^BtJFMsdn]A6['a8rGE_!"<3EP3C[!4q]VG\b:MVmM0TFGU]Wm>2t-VotCF4@es(&1gVPK3B.sS3ef8d#2g(`u%(h%^>7V'lkJ(*P3!r7CN:l)X]UOma@?M$@;Y6;6&diNXQB4G@@WDp%E`s+'_n6TL"X;rdcG4NgUL4CMY^g-6N`9kk:,Qn]=0q)0=H*s%g#'f9I=1L+NfPFQXM`]*cI3?ah(E\^^kkQ2rRS]IkdTIH-ZXf(2-YR-hkUbt&?,6Z&F'".$S^H!n`Ea6\U?`'pQ_>"cRA4Jm#<<.%GJ#U#A[V'KHD#4i\(Y\E\PAF#,`dJc/A%V%FhhYD'qpoA^Uog'kHR9Aq7LgKctEK*$WQu);RaN5O"r;4oj)Z<F'QG(XB!t1DoK&@%LP>$Zo%#\ae&.43r)>1Y0oZiGIEt]C2=f6l;"Zt9eNR/Z$7DeKStDHB:[nQfht'bilu/GfgAO5TM,dODXscJ83t4A9Qq4+ejLdMN%m6LdG\^^OjFUm\d2u<n98cBCMJ+0G,8Pq7+P,b5u.R4MN',b%5.;"bKaDcGX'`5d?lYY;>G3]%@P:HXE3BXh,XX$u2V!Kle]:-qd%C4p5!)El509_'&upm_nY7J-W)IhG!0cZ)9BP5i6/![Rt4r#>Ue6XTg8d!q4QO??4n575L:]Qf_RFZlpbL6Rp626SNnPl+9)Wfe/m%7CHV02G@,p]V-c8Jm%PGYdOeNK>]humjoXC%7<\oH!N3\C&82C;'mL0"S@_RlH0(QpN><3q40eDk"S-"&5:5^Z2lp2;9FfOBdQh_%aW%06J4X?Zd5<YX8m5O5&?uM<BW+*,i=kms/-lHq1aOe'W..c4cRYH8@>:/9AL4=C>2E'Z%7$eQf-EXU.YaB^[/rBl<"URJS5aSZ%Djn6C0NglHOjL_?M-^`J9GJ*f\scS42)"5EITOu1.C,OE&=k<1%DWNi5r"@pK%ctm1=W?1&gBb%P;6m^.]Ecj6pN>\8QeR.eKq.]%OYoN7YZd=`R\BikcM>boR5oHRnf?-O^itn89O&r+M:7-Gb[cnrf0g,?W9'sR%J\;tLFGbb.)!^\?q+Ic"M\^.W<@JhhG4[pOp+cC%<1dbalOcj^1<Z$:&K[qZ&g0QjH":6oZ-&%t1b\VF37#u[>5X@L\WI[3"3D,f:^P.W2hpRk^qiFp6inhNL`gFNL+"AKUqE^`agVC<%$k\I4!!t,,@i@o#AJpIH'b+pgJj`r\-2J[6J],`F[+L`k!tAJ]OfUGDO>Sl9aD6GS8Ok6t"!SW9#bicX3n?7pH,JtmW2r=3?B>>C%8#.k->]j4V2FWV'8]sc4lCaV4psrS%M['ZSbpQO6a%Ssec#?:ah'_W^.jo(&?n-Pr,#r<LWeco'P,[.hN)7o5$pbe+`"5M*aa9c#%\0Yg?MTOIM$.FbgRY1]4*QpR`d:r_M][9S4CchtGWe/)fL)?rVL<TJuPD!<NBMb17M2ltd:FY?62cqeV_c]U`"dR,=jA!m)+!QFF%K12&n8$dcd&^CAOM5;na#7Qa6-<;)+8k+ugDaq1k-gmRY5$bfh_mNt"At6m#@$\g4`D@s[ECSB.p2k(c-Osa&Vm-L9_&8A#0lNG:%4g"gP!o9m2YQGr$U^qmk0JP3dVX+D[n$XrE1),=96PFeZ+IXVjOV22%:1F'>&YqB38O^Js+@#p)-D7mjQSBdK'd7IN\q2%q'-Q=i%8tq1"66kA5&02H3!72]]Ut&Eins6:(6o%2&B<Q$JF,<X)O<A%h5m1@GOVI9b9c'n?-j[r-85Ne@%Q29@8R8VF&re)NVF]SW%7-o'%%FYS7',2YNKL=sc.EaW&0EeZ1E0_,*S^aR+VM7*h7"W(,D4ii3In^X!H]"Q=\<JO[UcqpZ,n(A"$5&CTL.7R5AdU$R93K(N8$&%f%L%H[+.u&kS9X&#*$U^#UU9p[MY7f)2A'S2YTt2/O=Z8_f6?slX3a[cL(d.np&HHM4+A)c46Z6(3,ul3q:fV`Jafcsfj^Z@M%mg%`%<"/Vl"f%WkjCMUEEtsj$)+0MZ,nRmh=D]85Cga9\iWVUN9d()%<H?qmW&Q#\Zu*At;0`p&ei&`9Q6MdX0LS53/5a-MY#/Mo1:.PX%Fr@amFfZaL;/DsU4?50u6"pt$??3,M37rK01*Y"Wb)!aPCGm+iT!jT6o/rai.%s`3)Mtd1,mA9+Fd!7ri*aoQZ@E`pL]da5W?4eZ%X!#HpUG-5B.3`)G+^.iDf6q&^]4`pqMMa%q8YHEbH_bLdMhCt=A!MmOrl,4c72)5Oi@5q#d8pjgq4"N.H/Z"nj2kdVN7"G`^;gVA%"WC/P,@QN^M$BDQFH*5.R/O`ZOG&lm)ad#W:+aOP6`L/Qd!SG..f)CA#o4<k!ZDn))$;pXg;^@I#(RmRCDg0t!0K*!O($*KDN:mk%APhtlMHV_;!YOB'f#4R4j0t-,1h@9b<!.dn+M+9Y#SJJH5X^=i7ST3Yp)]dYM;C\B"^*"G39CN4,\!g40Pq@6'hssM9%Qa'OtOh9%b!`I6'cTJ!U4V(BPlaCUF4c&Q\2Ha9/<I?&9%Sk^U'e2_Ms(d")S7\>#j?=s;<Vd0Ae:^B,>tKU76-2SPB:9\Ml94385k',#)s`t%UmKFVj]6T8EM@L\LtQ;g$==.J5nr]4+93*CFt<XpL5^N!?33`Dl)GZq'$uA@,>H$[Z!kl3!_e><G\Mc&"%5"Hh-M(_qQT]"b<.C&%+qk=0cceQQW<<<U[j$>-BFm3t;</"W#\4M)bQeOgM1#Wa6op?31*YsG;):2t_`\:YMUU]C=JBJ$-=^==7Df1h_(QFPd?'e>UI-r<%717O5)m(OL2.F0_h^A\+]nS.s:5C2`*)&$i,ACXs$U20d"MpDP>Jd6E3a*ka#i0;Kabc+eil$d'o79o!N>N$8;@BA$4):&DfXGQ]%>W5?IVji<@XlEfR#7Qg@-WV>89ktSM4D0=gh;[WZDT-<M1:[^GK8ha$7E$-Yf!8WC-5d:Of";_4-_@k6p`n4d#Wbi5\k+V[&6/]X%!'oI"XJu`::'$0J)0G+T^`WfBTr=cN9c`S7;+#@ka-hKk*s>G/;7%M9Sjki_N`)`d(d',cQDLUf5+NR<(/`.h&lkN@)kaN]#XHP-%(<T2Y#nfE(#,tlC?)8,G.7$Ld"[Pe%6rS"0f/*gXmnj9kV(<rrQl%3]l7@*_6s3f)&ao"o1);,j/i9+K.6O\&LWZ&ZL70_C"<UpR%_TWHf-!Dac`2l3[[RPU560:0c/1_8]#eNAFaC[,s&7bmIpF+7[?Qlj00k4T^!sPu%(l3#5g2;V5]k"MWm*Z<fT]asD9e3`#'M[^_%Tl/Cp.>eGVVhXQ<:IhFC\euqs0S@hPP]@/K[?#r;/f<LHEGu7Zf=L*T-R-CVAY/,t^YufDP!.NE<+O*M/&2j7i_m?_B.MY3Ln#^.%";A1.0TjjhBF<[S5lb_5!CRU;(W&Q/(\/JuTkQb(aa9bTd5<I1+pe:):8SBj6tKnD`!'^CV#>n<ElO*pF1/W3qc>I.^(c`1KeB2M%-8dGIe<OUqL*Vt._$N[?R`HbF-ej5lNT4E2"\;ULiFK2"M5k$rGR75"R:eLRP$%!MVmsbf1I)p@&%g$!M.4i1Ko0=.52drBi)q!A%WhGU/:QSS5&gA8ESSU$G#_F=g(`03Okt[&bE!qEE=@K$5-C>3G23IaNYU+Ia9bf?c":qb+3O:?JI^Nu'X<*c7SX)V5J;c<+PE$\]%8])l8Pp0@=<10PHMH:EKjVEMb*s\QGYV94M6M8IMi3;t_YmemnFcGWJX(U5da."5':<K%72JbK3,U1NIAdEaG2]6GaG\0K7SC%Uq%nfmP%7`Z8h&O^nISo5RfQ6?M.>tJ#;jGEcb"iK1pqQ=5Qjas@<&-PT>d1aIK$I)Ho`<U#NgUU?]=PKT^i5J!J)8s/Or,0'JA5tpm%!q1jILl,5N8Lr'j&ArGij(&l6Ck8#^3+<+(3n_u\*XAt06oKuU%rG!V$#*IR0/RO?fQ,Iggf!*3o/K1B8dq%d$?`*lM**,A@H-PS%5DH9/<.UZGQ[$XjKQ!IdZade)fplOEEU74(ffWo#g\p."4\O8Y:TWJ$^dO:h*f-BkN05XDJd`2bVFD_caC.CL)P;b_*<9W8Gu,Wf%a$I4I1Dl)`g3?^:dB:\'2VKF]OJGUZV82J)[FIBk)4E#FV%i(:ZnNqB6?h%:Udu84SglQ-6O:a[S,rE9=YPa=%$ALU<ZB(O7Zu#7%7^h,#m[iH]4PSo5lXLklSrSkf1R\Y^0CntlL5i+k,N=YQ+<"sgXuUSdGg/Y5NHN%Q3$"'N!4(h8nN;cpG^*<:H$t\qVBRO^+MLa^%'(LY..c,&rXl;hh"tEq;@/kc<Cb=Y@i3("MEKt5$0o[fE_Q6il^bgc5q7qP5W)SjHeW/_m"PZp]0Ge,o+V:K$UUd[=ckVIMn0!Nu%n;q<9J;BW;_RTZ_ISD>_$P:hTEfpgn@[K`rA75E]1n'f[1pY.(BK2=`iG^D=_gL<#SdQ*82B;6lJ>oh?UQ#U,&dJfH81e_oap'n`%k5n<n:#/rEdHNCta)c6e8g960PB\_PJ`RUhlW33aP=Bt?4;T+sP%2IP*AADX"dgou>W`g4f/;jbKQo,C_'H9i)UHBeP$L^;T$+Nr%9j#bS=]HJ8B'<`'jqlT,O/Ybe\j9d]-4T/?9G:Na!^)5<d<1Y]&?i<TL_\<[^oVuTaLR*Z`iW.^Kg^"`V!9.01;g+4+@odY&RBpC%-J`E%,.\U:dkr,*ki1/BeG.&r>qFDJ>pdsT/s[;PZ3.\R3b!69JF:M2L5Ee(h8nt^ZsdIh&5dF:;S^kAS2TP<A'GQ^ECM2bN<tGf%`(:A3!I'Agf9H=si';Nl8d:"nm3i9_bfR.(7%t@e:!jhU<CG>jYZ96f``7n,:shsTO;76G>!QN`d8nWu!:!9X7-DQ<C9Ahg4]jU"%(<d9K,(.o'j9)/sA]MEX0Ulqd![aX#LjP<hJUCi^E]r,3(:gl8>(LHX&nsn$Di%c-)`/JA*o.4jfH364\;Q/!RTPVe9`F0_j,L[,%3$T&l<3;rWp73XG2'>JRA)E[`ZRms:Xb0?VQ\SaV%N)Utn@PF3YJ($JWcYgnKD8VIZg_GO'4tB<>UqASCp[bin>Y=hUf/@pf5iV]%YQk`.hl+9j4S/WI:1Y?J#Dd'?(ci,YUW!HnGpI-5J1^t\+]-JgNlD0S/nD&>4hsIRO4c$5\=uqp!>oYR5qJb2)\TI^R&$/r'SBoh%!23%\)B]9@?r2cA`pE5B'&E56VcJ<r3+gEep&M?ud55YM0LM^7(\#->iIYZ&W^B)Y@<X>=O-uY&$6a9oe7FY["%3f:N1Pdk!J^5/%Tb8<NOJG-Cm5/^!6gU`s#GZ9cJk;bQS8cr-]mZ[bp%/;Zd\r:hm9<7D=W:;c"[F>#F#^H[V_ldu$MB"RF.O#oV^+-Po5=WQnoS;5%"!H/-*r@m4L`O"g@+;F#R#&A1#4;M$C*L-U,':tr@S_s`5R'(^:P%XOH/b\idX/R..F(hg-;hO6,1+0!WcX+EJU?1oMF`Ld"R\"n%AX2"/3'&+K5K.6A'tVHHWcgcIoA-3^HL,gq@mltorb/AN\!emLY`4O:+6t0f[<=ed.H4_p!cDLWh@."[4-jb_70Drng!!7/acPUY%_-0-hA7m>YQT6l6!MQ2(X"K$bJ"%Xd@5N\9RY+^Zj'\)R%$Sp^<ZfX\2NTMF1U=,HEHN5h9+__)$1eZi2eZ<AA!eEIT-AtTSeB7l%fX=$P)'VHK6OHT(faqCKUj*>bTKD#\1q[s;KP^sW",9K.;'b6+'<QMpb4gLmGM=/qe!YkXG6Ao:&CEb/FV`c[EA.GPi6pPFW=,LZ%GhWSD<HS/-6o$AcX@:ZZX9Cr.)NE,U#D%OD;E>,*d=`2@U!Zn<:n4A\OBS"c6mWT]M<k=spV7/k*N=;03lG3`H&-\.!TBoO&I@6U%`L9jLD=N/lHIdl_:(iEZrQTn$^Q;-86Dcq*#&@]cc"[j3b_h6Un1H3lo$9k%"MB.[1s'VgdWAUm/J%.WP=G!t6QplX)?L@jK:H*V%(.OJsB.;gT"\b;Q&=S9&$NNG485r7#P)`q]A<:IAH:u'c4S]&3(r\`e<b;gQ)Pu)+`4m_ZN<D@a;.4eT<0NQ_9dc1S*^qb&b/=<Z%MOeu%+BiL-emSjC'\P?WQ]faDW01$kk)W1P2*@Yt2CmQ"=Eq]SB-Mjs,N&a1%1u/6h@^;8EOoXJU.E<\bQq#cELjr.+B<"t#ttA`%h]TU(Ah+"GYgiaV!:L&#&3=cdV.Z&[j%[MH'icb4Un]2@V1V09=a*d"5mIQH_8KAnM_nFF&B'^H^=5[m0l+Na(oL4BUTC'\K'?Z'%[kURn*[$U1BRgA!)iI:Q+VZ<9$c(pkHe*k0NO3=-nk?p'(;$UVepEoP^c\]Tc;GDYU<L%\W3hMb=V4Rf<2!W^m]7PCdQg>/"UkJ"%K[-G,=pDkbJ2&JS@4iSR#*in1\'29*&5Iebd8WH0J`FeDU"N7DYQQaQRH#uR*B7KSX)/orJjRfnW^MM,1)6OI-rgllH,=[/K0uqf%N^,Oj1=a5G)cs%Q6V)8l]\CIZA^CmpJB>Sf"n`:DjAOcT=,':8PuIju@N&N,%'l/?0^*<rK0`j>E%ihQYa#="7&DU>HSmA40Kp5W%hh<]JAZQY<j[?QY#Y4PRB!?p<*cW<EQtUABRT+c>V1?+P))<L+Y_Skp&`nROACcFB&e/7Y263)!K?rCk!Af9rVC1/nD[[;aA!+S]%f5Wh_07,2*=9[.dXL+trBls2,<325l]%'scn"]6$?p2a-cqp*c]qp5cVaSE>&P4?#-66oi'(VKgYUN'S#]`;-F+UF8Ci$E9Vd"Pg%/oA=aDOUL1#Vmr.-%Q5]n<r\X("iLsCG_]%d5<B;(c$]ANXRM`bl\KZF']b=S'VR]:uR[qVI];*AYK/m?pdQ;W&Z9KADh04oa*>;%;3T'n(*Ij",m-[cAf@(8)$JduHU9Xc;V"$L8ejU%Zo0'080hEQ5Z$u'Gn<.*M8ns3g_utW,W;)."S[7'@Dd>l&&&46%;N_P,1q*f%^qK%?P6fiY6CT,qo+:XT["-))@05!c[8cPAR?6u+<9RF1N3^YpCSW.<Mn3CX",Lc$k6fTHP1f3%:_@4LnfD;EKX:=;^6dM4Yp;^a%10O=4)A"@De9D'%\#DBJCl%+JMi'<^a3W^.KK+d&N([PXS5Br#6k('4OM!7mgn5mSE<[@'6lU<b_iWCpaTdI`GUJmi9ErUZ]fQRb%aUYBS9T*GcNVaqSqcsrKVe$s;8n+E0O1$bJ1kufN3u[J'6O_2&NLX6`\B7<Mo[O&e%MUU3"_M<Y\]5WtJY@%%L8<HUJ7u5^]ZA`<%!t\DK*]Jm2M)`1T"%sBhd`G6TJ1)\'XjM1jC^BEUnfEM$?<a3:3D9e51sOR+(1A[Q4i!p%>Vnu`36EN[''.b:+n2)IE*9#J)VVMP%aUAhaT0uC$Rjs7i*]E*qKPR1`ZaaCOZ8cFGa77WQb2U!$\^`M(rj0m#Yb1,i/,D2ZM'h'l6t$oW[X;Yt1DV)onTg<=kCaCUf-(]Y%IkbLik\nrp`D@9j_R8-M+aGmN;^ic`OC:X)=.)B[Z*\i\\oSeY3p+M<Q'^]J2MJg&`Z_Bai_-6^=Z1P!.\27gqG^QU)a%-!%>(a'%KNeGZFV`3\JVAobaf<TtV+$QdDi8G4:Y\*7G)]X8Z'pF6*4)l$&PPqTFJO[LdGUfj#K:F=6qiAHH]3gg,(e0/8XQa9&A.HjN![4X%M%'rq3dV"_1g/l*s).7/H8Wm.XaWS8LRPRQK3R'acg;m?mZg$d!G]tmL.Xn60@Is[eD5ZMpNXYe7JJql]<cOrW%-EP?T9$cn71,]%;fBZ"CR67=0i@j>GfCt9V[H)t]2rm]H,+s$dJaoc6rMJHA&(tT".&&FJ>H9T=BD$_qV$*)YP_%Nf=gCZ=3J>JfG$.>kOICbSF$'V%jCit#_$Eg_Ot'2MS_g.r.\>k$)*:fQ&Or$'KreC6eNN5i[b8g,ejshiX6@\RPm6u^X!O;p_GLk*oA@Yi*V.@.'XLRL'c&WCBOpDO%L3RR<QQVh.lb(a>?Neh(G6B?#Y:C-b)qi]lIR\#Vf9-Big$Or76n+6tF^g;-8n+$j]G.6mb+gIDpBZ`S7@;BcZM;uLTD$J[$.QaO%#M*%:/InmT[(^6L,h7qmX[#Ib'['/CUfOi`2.t+F[U19]ia3m+-h;f44L!+G.rb@3XPRU<c(G>Sb2J5s=HDrP,"K<UF18%e#"FR^%Rc-W!(h?V#__<PV_7D?a&=^F4`[<%j`:\NgXDjph=4XB]NL^e3E-SKnZiL?@R93X[Ot+l9<1@aqg2^nWk:Vokl2I@e3D-O9>Af@@%4WWJ\"@7EL#!)[7f\7k:\#!cURI8eR2E4H^8cGs+,`[;u=PqS\V[:B#)YWlU4BYEu`Aib31usNK@;d68pUuFAhN_$Fb\o]1Te"+o%(+[R)qYbWQ:$MC-^O.I$pR_$ImjqMEDgu16Ynpj$9%LCb)job,oJo3ckpGA%q'DmMmh,HMRfH(O%U?j)IfhI'BTGN:gWf0sp(7+3%)mMaO^i[u2lQaNhJB4>*!25#Wr6ic';I_Cn^W819?:C?$:74FV(WGa8dtJ/K]D/2e*j#?7:HFN9QSnu/[1LmjTS3kdQGMH-erU<_%Up$KuVIlQb,^^QhebWc?driM-,M0SGi+YZ%/)_<nW%plm-E-b1d>m:bJe6'YY&J<HRm6bEa%eGmOq78:;rjPcf.Nl@qU?#_FuOpI%FC9GA\#^lk(F/<b%_Gdl)IjQ6Ze3*XiZG0!?9]._GX]a.%?hiop#p]C)F-gT:EjBroWJ*?9\XtJNMB=;-#>0*eT=7`L@EdjaTY(P%>ZooTPJD!c<5%Io^E[>"IW#<[f<Cg?lHf/PCn?9sY?"m/h[T=[:RA9YE_C`n3H,BaFVR&s*dZAjaUSrR)%=71%V+TKH<<ZcOXWN4%Z(pG&Yj89ne"0RYFLq6:\`M6T5/LG,O8kI\g;C'oAdZM^+=kg]T^.6YJ:Q256(q].HV;.63J,d<Nk6Q)ndmngKn;ic1abk][UCX]%p!4&(eA&B/TQJt$l$$<j3g(AFpr^.)OQ;?i.aDahd)i8Ld$mS+?&:2NCd:S!'8oN7FJZk:Y'@=sC[8Y]:s^fP`-s%0*"02a1gf6&%Vh'olE_Veof`*2JL4^H`<>(9;+B=raXU/g-TNa%.Usa5SX;qG$o[.4r!_%Lo-l&eQ+dkTPYFM^#8PWuqigf_89$WBKejNElLq*O7%LGiUMac]W&"U/LQZV=b1mV;qtN`[YQkSYWrkWR4),Sq]m5t<1X6>$`QC*/g)IRs%f?uZStWYA=mC.BOqj`8!P%1s[B;\=VOcUd$[%Udp*='-e*l6rM2@A%5DL_j/3;E-8!$>YX[Cf%647:S6]]FY4k#_tf2Z*bR@9O"'Z4Id#8e?'R[T2)0EjM=IfX8J+!_L[dfu)2#"m%MH$JunlITf\K#W.;&FQh=3-dA.SLu\WC'_X&E:]dP*,i?Rhi)ll-"g+D6C(i-RhGT6:?Vj;%Xu:F@M9f-TrYCSJ[2#-'IOgN%mpr%N)>lW60_&s[\u1GO4?lh8e*&ZEh4I#3Lc.gF35_LE`sa\-B`+6N&I=Sg53cpCV!DPF&tKXjgFd<P:%eQa[4?9aAgN=aCcbO,O5rU%kemb_Q,$7:_s$h/jH7:,,'p1#6]>c,&4Yb*<67JfYEZ!l8PWooigfS49$W<IejL"729ZLp3OBA+99uAG/a+idRr.`MErTL0-a4*+%rFPQ<YtU`sI8E`-`1XRMUn-#W@jd!dFlM'.#N'q_Fn2]*P%FV^l6M#dbn3R_s6b65P?cC[RD1&'rgqbcXCbOr4-_i,aJ-s'nR]6`%[r0M6h^oAd7X"A`&(u\._YG`-^#]AV&;bs'7+]lSGD88PA_n^r]8[#\]I[tGc?`;;\JhO8\a#1OZdUrPXdgWi_jDj$Kp+j(,XKBQ%V:)e(>1RAV6;@fAejNEl*"*.QS?S-BPqD5-KtUc+2T\Uu7F0:Egj1&3Hi>K"jr=JDaWWj4MXq2'3QpONFm0fMopF<XnskI`G,%jj%Lh6:(,ZgEO%Os(Oi'bpZMV(S>(%e>-"EflCbhs\DpZ$o`gJ\.GJm7A\:QX.%EWUu_B(lgV@Cp`KM:%MhC[&,kBa7P\%#X>^QnXX=%QL3lcKsb4Pg`gCCjaQ+a.bkiROMs!J<Q)WC:t+<aq:cB:-"6/,^/MjdQ2,9XS:KoEGch7Kg9HV8@cZ,^]nq/$Z!*&+,*M<M?\.:)%DpCA'NA\C_Y@iWf!:jT\:g;!^hf.]8P(UA5-E\MRd"Af$96%F2nhrBpjS#ZS>4X<_Hb9KFUYiqt_;0\7@[(fEVg`.-m"J5)<^:&U%K2W=dj[5oG\PAf>>6kCCUbpL'1s%O4[3W;"f^qG=o;8SKNY'JMj0Z=8_Dm_h`%88PE<QsFXYYJ"CfN-P[&:jjR!%[AG,%=d?"@7D%-EiI1\Z_i5Y8],oi&K@@D\5^UGEa41D`b'I-2/Q:Th7^4Y.Fsk4Jec=lN5;E>_?[G\K?5$k,?GRD.nWC:7-hT$Amm(/)'an;$Nt=%l#]O^/Cop@9:HjkDUOW4o1#52l6deQ$Mlhnf&!oCH)[8q\pGPK#rTllC5\2(\CMs-f#KOP\De\WY"jKt&j>uj:0i'Cs.*C_""*=7%W?'h/!&>VoREPa6eF(Vg8)c._dDEL3mc*`'45[VNE/&IDMWHU`fQ5k<-qYh8@N`0;mN-1D.!N+8U%U%_&mseNUZnJ`EXe!^l.Q[/%WXk0R.Fof]:l(5SPbY1WCHU_5<1U%G7?YYj+5r&k)5%Zh-.tf=bsXiD"L5>n%7Qfp,!9X8+B:"%AcN0Y)jN+aRuo22WG@mT)WR[5%1-+]NOJBX!P]l_K75,jI(e-jl.<a'W>+FKZRnDNqO]\RAG1@gGBHkP#@@`6t9t[#B@>-UT.^&S!R&&23G;U\<9lF/YhFE2*T\T$;%Gb#rDhiB=%\'X_E>/uY&cRO'2DG+$"8?,q3bQO.u1O3u^QIL`qVqu6SQ^3!E%::?jJ5X;UekERW33Qf)XE`%'oPpA]>oSqi0RDX]%bQHZm1ZC8&bksWbGXt52&NHHr_i%\S"MJP!:7i)/+!JmlN.hs&6P/8la(st(itO#,RH'MsC=\&@S5PHhkmV'KS5LYodjM56EVe*u%R25K\0MXn`QTMe^7a]blgYbPhr%:"]ro79Wp;!ZjXHStt,ZWPPH9<K..Tg#7*GWOnUZN!%BMq=bqQ[H/SKC;0Y(Ds'Ga"&<#@6Fd%8cdU4CJm9V_dSD$&OI*>`U]0P=*1l_FDB*UH"jrnOr2O&X;%&A&Zh/mE3,%F9sKS)j!mR#mQ#.leF"s15YVOM:!<]>KeQ,%9Su_L%`FCF*p%XG+7?l(9U?nonh6BO$+c40@b3bu=da)KqrSOS\!EnM5`U-U@`,<@'h5hO*L68SU?5r3<#5g+qUr"QfGqbdhF0gS8@'*b3%[h#Zo,"SFJ^5#.,06oD!#]!.n^.q7Y#F:^NL0Ak=L#sG+\OeqVZ-L?/1O[eOYHF%WSt7sb_jd^YaBIQ.a34X#+K9er1Fl97/]I:D%4^3$9Ap%j[>39Y9%iKt"O=T;"U."?p)1oUTo/AE-+Y6[chl#DAb5CC;:KX:L^)Z":h6!BWP"X+\&c8*'>@0lti]t#RY@1P:^ARUD%"PZZt(mZG&rt+0#]4A,u+%&Kqkj="+n\Pr.2SDra`=B\kZPoh(GEDdorH0L4f[FflTK]deS*727aVf_OlW83kH@V\JA13"6/@]h_%.N/5:akJMTTW/9`-<VKq7Z(dbZ.5=Qi*_nsD,$2T'hdZARmhMk6++;t-t)3X9QT!u^N@&&oeXP3T&AO,qPrgHZQuM`mdQu6jG(<J%euI@(,;^d2l:6e6THm]ujX#7O.pAL4ZXmIt0/(EA(O<ef=(IK*OdM^G)Wi./dFD#]1l?0l\0ahpCeV"'MJcP`UJ?te+sErJ$'U@M%,RNP2*K.5oDS6SJkEL]jea.HXau$m*>3aM@G(!Q>\Q"JVI\j,C8Er+bbiNul4.3ImfE!0J1f"DC7uUKA,[-)e-$rN?>+M+gAR=-[%F^9_8ORjc=QQF^Nrin:OCA?/_D:e,g'5%AZNa+-@e0!LZ",ZjZk5HHc4@Z'X'M6f3nOCb@PH8,Kga?Xc=%LE@Nl[b7M<.GO)f7TU%-X,Vf>U$.qM(s$"M36!P;WL_+7P6Q2bIk8j6uMi/,PTU'f#^-q32dp]$U1u2GT&2[4@eIa;-c]Q&ij]%bl")r(aCRb72!";]MWai%A857:/foN[GQ)>G05Zl<?AUYa>F#q_>0Y7S<be4gjLL#m$C!qOZ+OUCC.51%o@,O.qn6@5.2A0nGM82Cn;h9:n"e%lq@:[\\K0@[%B9(d8rlE/,P3Pi%O\89)>a?1g'O#dpL#sG?;87olC`0f8ql3%kD3@L^@X5F[oqBoqA]W9^&4uO>7Oq:J/]I:D4\PFbAp%k6Q?d>^%]Pun<4E>)bN1/]I=>gK#80=;>k:PY,ct(@dr,ErJ?IEBkUj<8Vc;-/'&/H$i'InC4L"[T0\QM(3B/P,m^1sXZ=%Q,1muR&+)F;dY%3?h':E&5Ar&Yfd`M.U4Bad=XhHHk$6VE(.-[IHFc[@m]<N_<\e3VL.e[_FEc2m1k$=KJa@:Vgt7q<c9RhuNM;LSK$]cmN8C-GCEe%'0ccO!_a)?N(`p5!"A4Ea_')Aa:(I8NlcIp"1h0Xs3cl[XT4G['Tp$C7!&f0P)dL_h6IHG!_]s(+$H2'UtABOfi^_(1?As9h<8TH%J_'1RN,6>H=u[m=^VX%5r^d#@kr/#=Ym?5QAH#<c:#.a3jW#s.8I6r70fjL6U84VgW/.B<jGHQW-233f$gFsL.-4n8CQIpHeig/B%-:tf1dY];Rh8kSX]S&D9lplOqm)!i5HBSM+aKS@6\iU3-2H#992M"n"2qmstE0Y!=j>^cVA7BYG[5!gI&Q-/VeSG0L6#*YNdP!V_%JSS[/G*.'=r+bM74ckA1m,a<o6]Zf0FD48ik2lG$`F)F0f-1OQ38kSG2759_3A,2pf>edL.E]TnOX`o1QEeI<Us>gKl]U:`L`/]W%0#gtufmF[cLID6,KaWKb#Pu&hVZhScrFR4r^AM2JaKK$nnLKQWI+1Ne>]+E5R":+IT@)/fG7SKdrh-E&Y+d."W\%q!#HI+E^pn(_%1G?F?PRr&5N"t\1-V8Xl\rPbsoW@NhWmkqLDKjZ*ETcqfHA:)BN9a4\0k_t+c;_/j'IO^mjpIZ6]WOA[g)4=P,YUoDK%s$s>So8]%Eg'Gje1,+c]ri06CaZc\mBtibB,AI_i_\^=QEk",eNDQ'qLPkJQboSYVO+>/]p6OU*-X`(A^f,c)('@#^Jd^_7@(u=V+ut`lHQj5%b,*Bl<#<K60VrKoF2/j,$=[H;LiH>6*pHEl'1l2F/.CI"_FS!:2Po^R#'[bU;-mGofQ4Nq;j)mgSpP<u@'[Q'Xcp&UB>rf&6Wmrs%.GEJ5[%e9lZg2i[)/',oeL$$hJmBfTPr+0k^8!ZI'PH?'-O^C%[d$l]LdQ+/'W]JJYPaOD&5@cQO#h6UdVr<bAW8_pHY0C:Uq/Q%%(,/$_,V(EMdPVAQ]@P@T0CAJLNdE9hUb:>7$D3D3`>kdr0;[HZF+KpFOiKTr',C1*pJN37idnY\]-%:]94Qni64mG!EeL&b/'$l6%@ee@#o12Hu1cYtA]^sm<&-XNS*$Ip"[ARLHU+Rl]e-aA2l5E*E]%.Ie0.hA6[^U9H-k8V0OknuQGq6EK*1o=j$?$O+R@V[e1#\ap%fc7CXN5"_C+s*hq*&F`r"IA@:dO)C\BSoX0hg0[grnIW./B!Ut^rAJoBf,2gG%_o;iM_X]!\Pm[A;+SfXu)k58ZGraPJ"9W#Q*lZ%l:6Y>kB`HLDp*lE4b=CH`H;Zf_Sf\B7qjn0A<7^kX6pNdeAXh7H=7D\Xq65D8i$HM[1oLjdoB!;W^KX!P);nABgn6Q-B2nYGq/2H%WgH(LGo%.fnY3<(?(nL1.in$Ig1nZ_qm89N35q$RFm"l$&oe[H*+u,\]gOKA=\;7L#i07;6Re.&EFO$8QP<kjjsuB2f89Subo)2^%W"H&^[`1CJl)PSj\k/'4T.f;7n)DVbm1JfU8$!=peT3:#@"Q6j?<XdL9>d4iU8iETQa??K,];1pgJ"#F1$EsuS%g9>2j-'5(&Z3u%.JIZlJ+$/SI,fMM5&f:p@J*QHn!R9`StQ8\@Y*<%O'P!3IK[/u^!J"Z"r_5lK"#oVfP&nh=?(tR.?,L]_28)!>M(`?Z8O<mj@D0E%bc"EJ=@PHI&!k@Y;OT(JAEXt[#I\rf1\UV<*[7Ko:KGu/Qe\SNStdaGcnp_jW4$`[$o(pUCS/<r"&T]U(r_32?)cU#WqO&*qoPFQ%:l1j8QG#Oom>:E=Jn_*P7qjT\H0op`r`W<]^:GZ.!WcbaBVT'u8=Q=3E(pOK?2bdsW'!g2ii!R8!/37p:K9fS:!uWAJ^i8Zd;:9'%,nW%s]30.n1U81T2V0h7=(l*sqOo/p+$\'A5a('iL<p8D:1OGMI"=gf04S`!\ZkoU.tM`Af4i?8C!"9LE^[Z+WD18&XQ>s5_pi7-%X]c>SGmjb1]RM2,.7;k\.a'Ik<7uh/HbGCs'_5!oAT"=.Tu_oBSjAMV3pWZXPK_?<j:s/@Dac%D]UOA>`G2`GIR@>u`q;Foo'UF2%4[ZU,pZ/sJY9(fI:-%l_(FB6`0Y!M*>G+UHmc:<2eIEiSQSC@K]_@-)H^Y7L+HKSM@mUDGI1)6kpVgFGBU3jNQUs,ZGm3r!P]SG4%B+$&PB\(P9T-\D-?)lVi?&pU^';01oG-S#t?U9\6l6jGp'>m8`Y1f>?k$8XY_j&Pd6rBkZDce9uRq^!e.I`8OU7!=AJLbCI\enlH%V3>RbG[&etW1^<(0JI0'8SJ7J>m&O?;i4dMdUlc0Ro/f\g!n3V3B"lmPJ-/5X91hfduA.,)3dK\-J01*/0j$tRC`%iV0X1-F#S'_%G(N='GT`j=1F"ZjGGj./6Tt]bbR-pY:FkmsbA0-M3EIsni9%7sdAFF,T]VTGg)4@YNlp?_eQm`hMG$S'iO-?RZW76fZ'I6pP3PPr%<hL^AMWH.2;CbqARX;rb1g['63%RWt(uKN21k\5$[E3r]"3=W@^Y5jM[$cpO;r9&;,-@@.f/24*OAp")\:]#V>A02(Bk[m9RPj\C%Wql0:e#DStJ1L!faGM]C6!@!@5lX:pOJ**<o6t#gl13Cud\W`5)d-MlWE-r>G8E[=Yd@q/C@hX+C.bfi?CU9`W\*?Eh5Ri9.&G9l%ne`oPnRQq=.kkMt:W!"5XB?c.."S<W+a<Sjj5CQ'7F6][$nYPLdDq-@(k#X'^RD`RR064tPX6'c&pq_D3k[BfU-qnc&n?_q&jt0,%9+ade(noI6,P7h_%_Ad,'TU2Bq/"`S!cPn[:Ni8KHctJV\8DdG3h-a7nCX2Hr059"D8YT/Pf1(>Gq"!:Pm&#tp'>3j,"gIJmCLp>%c0ieRP]@o["i5Q*&Z1b50ipAs_c[H?lA$XR-nTg[8F#gM?#",\8R<A("2_0q#C,NlR_lGr9.25_Hd(CcVT;hYjl$nARbSR73$jaQ%:5k<-8W6W7QQh\uH%8b1O$Qeu!`a83gj(T=4;0#2]^,[N1K$N(Tg=l;\$lV8^1/nBg(C(h.#E+VH-)N)MDhBphCN<WS]NPQ,>]\A%6qNac]m<^PShl:IR,MA7Z(g<a<3f][Wm_rQ8?+L$3^"cD0YFn04k*%J/@;hsABbsfP!\/Ckn@TqYR.M03teDG(XqHX85]UoMOls&%#EgQ*N)b'f[#Prg9LsT'TWV#Ne.tQ,IDiC54DfbY*JkCRp73bhhi[^RhsLt_UrC&H_/GV7NCbdb2Z,jXD^DWl#*asg5bA_>Q-8qR%^[-='].l-jX!_Ki$/87JV[0`C,_<$qq[cAR%T$!p.i=RJF]bVD#K,C^W0b9..L[1M>88^$Y$r2lp7f)#-;6b.qN\>j68hfNJ8I=&%qSXZg0X%1_`C)`t+P/KBN.<IoDYou57:6$hP&QFqe6Le"Gt$0g&"GQ>4%sS*M)Ut)]C%qCm8I0clB0F%6-:+1UH!OV\^[F>]Lk@W%;EU&>?=7Z(OQ;.Rnn:b_A-NRH]hR@k>UD6$(O7iBM2\lEqgjSlcs_$*+nG&=/NA"_89dp<m4s]#VT)p!J#as6C(i,o-?>9&h#U1B%@HH<;d95e6<nm8[QQMCQH]gSD3*TAo4.*@$_tXK?",?.R,R:V]MLuSupRRP3F*P#<`</,jQC&R6,e9VC]J*u3eUn$*`DaC=XnSF9%&-DQ]fWOj:MV,(!=@DNTbO0V8L`Q=%FGe`0Nl[#&Ot'7d&PG]S=;I5IQ9$a0WOKoWe1Mp\b@HmWYE3Sql<.#-8Z=i5;nQ/^$9NMb%LMS*4I`,n'8tr.s=PV.mV;1,h9Q%!'g3,t]BE*n1XJBL<:-a4p:?RQUZT+fBI4UotcS/Z_]40;^EcTcbYhm=^qNSqf@!O2WW"h[Z%RPPp^]/!u<6tc5k<DWS+9#BPZ3mR;Xrbe"&<EHIiBhfr(04AGr8tr.a?F"3>K3^9Jau!bS]XH^EJtnWo,1JA0Q^,VEH0Ln;>mNR2%4caRul'Ue\j".WQeJI%K",Y_:k.Vq#4?fLLLn`7QYsuDEO/uWEg;ddpX+u,1$(<Ip"mqn"?E<1\`VE:IkS^`q;WAC"cr(L/G)!gr%BHME4)RE3Vgg]ubjYG#q^G'7Ah>Km9nVH8e4;dJSQ]T0EhfFJ;UG'\9B2&YI9oP*.8IQ)pQU8cY@[p;6`aW[]7dO#G*a_?#09SRr%4SK_uOrf"rUstX<cL^rVOQ<_S;^6r@2cQ$.bdl/0fDH,HC<h!JD7pGm4X1D;N``jQ1@mI5ZJg7EMV-a9[!mt?8C!1MbS7><*K^q,%,h8J',F4K0Yq.Lr/9UMK$b\\=UNR6S8._K#pf3.lg*@E"Pfc@Bg*_Y,%f[Xn9[]G%WZNs!JWa]G&f,\4QKW_Hj>BVKXn(1h8"+)j%MoRA$*6h?EDog%kQJ?-(k[NAij?hSE0e::ro(\Au<,%'MpCtNt895Y<ODDcgUXC3@\Oeqljk*>Cc`a($=%PBjID#c"fCZmNWNLT"%8T>r0b7ZTE:_KnKnrbS/)X!RH*`L>:.'HA>+na6%lFtMqVJtmKWK4eGo/BPh+Y7;amo/^[Ac>0aUELML^#a#lLI6ppkdO#^VE$Om%E$XecnF62D*7RL!(83kA*CRq<=>&0]Niui;fi/IP_m-Z]C*r1-Y\>`f6)lS5<QJ?"Q'*kfJpUKnr@0//[25'"Ksr2TWSLnpDA,R)%/4R/0p*d/FVmk/udV_CnJh%et@q\5*amb.&-`^?*cbd/qO>plKfmgYSKM`QuS=]dZ]<-s_g'-\[kmQQ,TNNmS-o[Et0"\8u#[[#[%JKA9I8@EsHE[`1CGfa.iCC.6.,Ym+XdJsc1\'Hr!kn4L\)rW(soT>04:"m!*IXH:u_PnZ%ZXg=BXX`%2I`*,+IPns5mT7;<n#B?8%lpMS[o)mE\^Ab$+#rDUhepNA?[F[ZiLdOZ[G],;h8NSjRcX;3&,if#].iCig`pB#T'a[irf^T3:Z]20*^pkE@N0qLC1E`OkV89I]%]Z]0GP#WN;\)of8]@\\o@VkXq+>k(!Tt)(ZjgTfJ24Y"%h7RCH)>'t6%";>HiCK4bT&I?*&*d<Y0$Rn0<L`iI]^<^;<^??]O0;u#%#7nZA1qS:;Msc=3I?\A*j#TD[,tg)(B-pBj`_KE&,MT7b3gkXmE?Ql3-QCg(l]R&:K[D>6+jq$J^*p/:UMh6/V"X^gCrNHo\c/!W%C"Tu(jK#;*S,.e(<6p]NSA\K(;M:haP$"=I*E:01OjKRgWa1IA_ee7__G4EB[\bPi2L!-8?!^b(4`u@:!&qSHFlHMb'L$I>Q%?`,%gndVf+>fV,@:5&[a^e#HH,=G]^))s$Ct*!qVW!nGiJUg4eMdD*Xs['o%3%b'3?)"\9V'+':/Z`jV_W:<:3_Fm:5X_e$$d_#Wa]B?%QP>bVo!1DaX0B0N*\I!;IUAjFEni\Z62r'%5p%;=OZ\Vf#Q9dl#^r"0WdeFEs-2Rf_W"H5;5o@0=$.\TX-_l?$!HtenJ!-[L*25Q%1EHs/-Uf4qM58.6/AfsA7G)p+3G_EfLg!kAU@u"^hNK<IC7U"`h_:WGgrINqlsrk:KI])8'(5$UY'7b,oj(IKLR4?[aHVQQF1ie:%;kl*[SV"piZ$TMC,Vr><UcbRiBb;hdOXK^s.RkXZ&e2hNZ8ku)n!jGXc(eQN>OQ@g8W$Z6&.u6D<(+qkSWRF58WS[1-Uo:l*Qdt%%`gCm?N*.eda/gf1:o!$/7TM1]/6Rf(W^J4OP"J8SH-U\3.AoU$D^)0(NeIpI:tWmJbLS5ls-h2<nS"9@epC2bUo5RQ618cuJdsWd%T^QbfhBSQ<W0-RN"3tXCA=i7!,!'K2eVk[#-j%YYAh`@*ooLI+OhYAOCm(=6aMg1(&P>&<&rJ%^\ZB7K!gaU%o('(<>8lds!E77<%;-o_EdjIZmo\f;U21AeTeDX';DHu!786H78lAH)n@+TSe1?C>\X.#RY,=iGU.b$!qhhP>1l.FRs``FkCq!E];paLuA=e<8&f%&$3%>SY.?T3+AlgX#&$"ag,3ShLK\X"nt7,aIA(k#)i3;UTJdb,[Y(c@:s@CkpEVh9XLsW#BaD)tkTq1\'eKI6`lb7NP@9EPcN:p2U=C%`"R%jU^q%pd?WO)[Gom*mFgS')4")HA$n1XNT<o$/qg?kh`])2d4:tD4i":m5dbEp,UT^`L_Y_XI!%i,Vb%Ej=3n7ljEmn4"Bep?%r?lqB$6Ib?91Y&C\j1.[StOl[bgLH;j]9;;!FSih]l,.RrKoO[WZ9YYMW<mN?hQ5hfdjKTaLmt=[XN+*g*P/"Aa->5U>N)nP9TbW%'[\9@%)C2tKKbEWL-Ho8pHq1nD5?1dJ1.(/mqo#HNA39[*m!H<+W"_XB(se1i_NTfXPBIdJ^!hTl0s]B&:IXbkL090Q_g*.(Ye%1%9-lcV(>l^""M`mI5=sZf)k(8T>2Nnn^5']T7bN?p$-.aOJ?5g+mq1)XIB\Sm8$ga1,ih5C_H%<TRO'7UOSG)s?M6@:mS?7@G`>n+%E[ZdF0k/rc5(LV8[Xb.h#11P>!n!Xn]/JoSEnaegqBe@qiq<NRXki]_9<JOmVK?reHQibVh!o8C]W9nu<UObe]pcF\/YLr^jF.P3%-OIBC]mZ8nEW%tEG\-Wr/@FbK9nW(5a&Rm!n>NGnne1*Y'p@D+F#84jg'#f>QRKV;58AL*ojNQ86s6E#J.Pu^,DVjkll1GVjcTal%5U<h@UaOd)=S0,i*^Si.6Vb6j,r>M3c;u>_hM#@4%,>L`qAhZ/IcNl+D]A4'Q)S9IF5(b=L&pOZ,o$\`H-(S_M'mg,^:[5uNrb5@%Zj/F;=hBSqG=EVo-*>@7C_Uk54F(iU9sHX\A(X^(FnkD^bq*1[.Z]$iD_k+9`*Q^4WX8JMgVL,?-[$^DfeN8NN:FAJ16BH=kc&hq%Tpg/r`U\hZ!]$*/>8DX<Tg$%tL'F"1=n5rc:Yta]JP6&6WHHrG60#QFlo%Lb*/N\U/kC\oC#N=]Jg;tng/uWW]>qR*/*AZJdj[AK%T3dQR)E'`uNA/\7$Mn/kR7$+X\]B^g9p&3bLpl83K^/P*IeUotl8&%38a*@q?boBQ;sX3`-:ncN;O&36nJ-df>`9"]5/YS*Tc27u%>2a#ugqX6@M-0_`>9e<Vqi%cj0sfKp%rD$o=#j!`.nW@Zq3AU`Gt:XH/P^,\<3ZGo]qq/s[,rs]Zq&nZ3QrUrXa>5\X$(2jaaSV>%>S(s>a`E]]P#Pa2#[8Xcd?9Dt""2-n8lP7j"rdEi1bX.@4VB6M9B^eU"G(EPTT_2!Fh=B\hM0kl!PO&h8$9`LFXqsDa#Xu@<iJO^%"(\dUl_?jiGV!ku2SSa=77\?L*iiq!\.*hPXH_%[W-8<=DL%+=QEEnJ:g#O-dGbLV-C/AF3gE4m^'q[_p'%'n4%IdMC4l;=DF7!-%bZ(#M4B/U5$*@R'N=11n9kmHW!*u)=l/dLr=iMOkr[q:02^6Srg2(&4ha7_2&=%_&_.'GrmFtR)%C,_h,Z'<#\g?_[8[l.44P1mt%=gMeE@&Popak&5CD/uPqfp]k!`&9+LeP#'b;-:eh]_J!j21kG`"P^>e[t\O9<^U[L+qr2qb,lA@gm5K5[s2R$c")^HZs3$@8X#h]%c7c2S4E9;HC*E\0bL]+D4U=A54L;#6Paj%9C^7h@<e_Q-j^'<T=h`n2^g)hejr:_m@nWf6VQo)dFR*"ko/p`IXd%\KV%(OQ'OQ!B%THqXVmCB`86WGNloNC.K30@1RKUEE#M2(T\Ou93PD,.dt0!DCtKHaZkGTG27O*e6BT2/.lK1nLW"ljNLrU-%IZu.\T24!e:H`GH:%Pj/sp(/sT[WmA(qr`tLMLeao5p3co]3O#,<e#GQWY#4"e(bUHTfSG3WqMk=!*Whf_;3kI1hM=:qHrsD\)bsp<(12?n;33=ek?6TE%8Rs6g_5#%96%lWj7MGRn3ik/s@E>n47Gg8]HW\_cBTcH[YRWsbNsccHlI8-!MmY[qXuZ29@i/nIa&Xh`&i?jP>M!<olPP^,G7fBg%6XpX^:]TFg(2*kmUl'Q$eJ@AYLg"dAA01c:Q'k(/6'%gtf-&P<q!r$P[$FBeg80]DD::+obTp9$;(Xj([S*sllOs%sJc(``i)mE[%PA.p_bV_W'dVj>n9RCM?YW)AQk&+#_2I<7P\h6sTPa^;JQ*f&\i[#3?9@ou]PEmh&%n%8/_quN+=GV'-!&i7OFYm'\G83"[lV071%Zk>(WT>[Z`V0/,Mmo[.rp;NNJ_.=SoA]G:5'ch5a_U#Kr&*/lDD9BreV5lZA;354Y:TWjI=&D-$XCX4!s8:9D2i5)"j?`1Y%3s?g%UKsZ_R(3s-V%;]_fWKKp.kr51hCal&INV"9&:GR%g0eU$?&FGManR11*0Kt0A;lYBck2h(#^MfOC:Z)7MFdbQ+8]NLV`PEBm"+^q%_c:P)Q=l$dG$X697#&^RY1X4V(3c?.>9'&b_#-0hF!5IS[1lJ9$*E-3<TSq1*S+IZ):FhUYY'][BYSpe=P!RJ&:IZW.oVaEj4a=e%*(\(;ksh[n+JkB80,SfkC1LU$*D<m0ADV)7H:noor,*EiV;V\!haU+,s!M`K26mb>7Edr6%\3@uS'82O1A%g\NhqUr=4\$dRGp-<%.RcE5+>Oli-L[tg0Meq\Z`,4ShM5I>.%Fe#P@IkmEamXHZ3/6gGme#@^jqjuMa%&M(,ZTg2AD9$V.DWT/HG1NA7.G^P55RW(kjL)%9$kf4#Fdm&<8SH1`?\6.^@$pgeK[ind9l+#%:e4rmb,0'.=,!,>aFFl"YUb'i9J_mFIVnm3&G27M>WSiR=abTih+Pf5@$P6]\]J6%2`^JN/C+N?g_4rj1hn\6,5i?O^VqXpP2tji6!5SUU9B`DK2"jS?1-];CU6`lY(7(a8EQj_YD)"9,'p[+aC7I27YR#"hXQ)Ofh^L#%9_b?Lh-oJIrI:aJ!g*cN-H$Tl6OA["loR'M`4p-906V?rVdr$4Z;'H5j#Ui9+(FKDhS((?d74.XmZVh,.!h4iT@C-l-W]_7a63''%K"ZRTn(];8V9mAaP_?<+oNRXP.aRf[V+.n"kd&@2R?-Vp+J7L'+gmG43F;'%:ZX\p+4[8='jM0QeS25Q$OB6X*u/-CpCi^[+Nie+%NC9=b8e>_NZ+B%R6V!JV'1!;Mm3*7#dJi]ZN[`McDbl7#\6bT>E$Q)pnJ)L%8T)dP*%ap^U7G!HQ\Kk-8ECTr80.pBJu!U]]EXA$%&_[--PSCK<<^ij\HLnj2<I.hp(G<kj.joj8OtRK&-BdpPT;='+"KhNaBrS7fq#R9L2/HrMOTZ,cUpIS)%l7ct$8+1'bU.EO;<mOj%=[=en'jo?bPXKSinn<,[jm>CR?eXp-Jmqq)_ZDoD$6sZn`3=)UHl]4KBTD0p1rj&1%ENr:Gq(mh38$J&2e?M)%4BnKmgWfG%#=6%%2,@a6FqDT,Z$eNAZuB*A)2"eJBXm)`UKVpJXkV274(rZCI:t.q%[nVf#L0NK_gM*L^sQS>KVdS[As>Z.#>O*neL_l6K_;/P_f>uV%m\APYgc@R?$3!UWj7Z&O-QqB2L`Lc?aS'7h`Nt[]/k':YD;;Bm19CeeNH]4Xh*Q1LH088?%,IcP7pgV*AY"hh1?g-_qe%Yp`!K3c%>&VqnEi2Qj9T4\ST!]\:cc<R;4b3]'hs6IOm';(5Lp1Ie4(>V_ch*/(o"15]J#;'WCsoJpP<]9u[?j$!fhWQ$OOHaE7";,\A*0tZ%Q\D5Qqo9H_6`3>\!0FGd3],T5d.Ij2c/Il?12`EU]\i;RG)APtjj6+bojj,u:FVF<m.Dj-Wh.kRoK<?aFR>o8TP3n0J/qW,P0?Y+%SQ?hHKgm@tZiA1W)6-CIKmU\1f#R#2Gto.>ct`;,"o2CAIN$t:A$':(l^?2m[n-+HN-D^f%HOPOE1\&gNfKgVW2$jG$Q,QV,WkV%%[=q:8-+iTLAY5Qg0l%])1Mq3[Tgue*?4GlldIC^0<POYBJdkd"%sSPbg2J@!#,<f^E_8m&0eqqSPD()+4h=rpPb@7\<gDDM$[6q`%&-pC$-/\)E?:XQpWq`UIqqZ98]djVe4W_8;CJ&qo)Y1n&Z$s:)N>@fRep,b7hdNo-(99s*U=k&ZCcIYr?uNbsXL.]ma9_+=SW=$T%c?>_F6i49$\'u"L>@h.#.s=8?/oH`XTbN?,04Oq1:WRrJm9]W/#9^CIrlQC"cJ-8%ELQPY$3\UV])PG7+-+B$,eVcRG,8gnr6ss]%A:d(;o2p]+Q<,5.#h3o1in2ujo$16+0#\(B>RI`8$@eO;H'O^kCYBkfqKcIV91$P(Hj#c2;oXRblq$>acZ3L8GGaFk=Fls(fp$?(%N)e[YBLl;c=$&.cq<`f\37VcM[j#`IiB]lh-J";W+?O><`;<eS+UN[NWU3r:N\O>FVDq0plR"`npCjNs'.Lh<hIerbke]c+h86?f%U'#+^Vf60L!j)0jd62OjK&"u+$(09Rg&0Fjj.NBgT=G?=H^0<QiPB",EuDY;,SmZ2$(D]Vg/I=dOV>nLSZp:2>')9=hU"Ls-I6B5%TsUM=gD5pS(oG[O-dXHu@)caEVi6>BItYaF^<ht*,?))*J&rabQbmSrd8QJIQ]pb+-*A/!iV&5U=,!7oVUUK@!QHd:a#'ENV%9,)%6A+"&gG-o<Ss%^FW(JN17!=ZX@jKoSHLALpD63,.YEDZb9H3SND%,95b.:'379Se6eGWprO\X=:>8oNKP@+,<,U?AO*Mn+J)gR`F%b&kr0D'%j\]=)Xi91Ik=G<1>QfXbsq2.TmAE3$rQD%"ZSAQ-\+ha.BgbaYa.Ug%t[IIGWi[s^,662BKss.JT``f8.G+/`%^T>:N\%$A_`!Q8VkR^3hB-[=02Q5PgPqf=lX[aCJU]F!a>kTdjkoF]fp0Hk9A+\fA`Q5O4<*K:YL'?P%QGV0r:70;&7>diUgQVbcW6J+^!p%poj_q_,%dm./Ke46gED2;Vmc4q;6Yth7rc0rP/<k+926$TE"A`J,Y4Qq"22UrPtQ1nEYT'o?[HsmFORPqSQZhrnkKinFIb%pntn+%r7><UkPiX8J,&W=J,/E&rqu'mJ,,Eqr?!0Z-iWr1IeSp'iL`=45PoXY8,~>%AI9_PrivateDataEnd