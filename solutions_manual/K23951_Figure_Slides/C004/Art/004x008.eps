%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x008.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 307 235
%%HiResBoundingBox: 0 0 306.1606 234.3335
%%CropBox: 0 0 306.1606 234.3335
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 6358 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7DA8FF52A8FFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFFD07%FFA827A8A87D7D7DFD12A87DFD13A87DFD12A8847DFD12A884FD12A87DFD%0FA87E7D597DA8FD05FFA8A8FFA8A8A8FD6DFF84A87D8484A8A8FD0AFFA8%A8FD68FFA8A87D7D7D84A8CFA8FFFFA8A8FD0AFFA8FD64FFA9A8847DA883%CFAEFD07FFA8FD0AFFA8A8FD60FFA8A87D7D7DA8A8FD0CFFA8A8FD0AFFA8%FD5DFF84A87D847DAEAEFD0FFFA8FD0AFFA8A8FD58FFA9A87E7E7D8383CF%CFFD12FFA8A8FD0AFFA8FD55FFA9A97E847DA8A8FD17FFA8FD0AFFA8A8FD%52FFA8A87D7E7DA8A8FD1BFFA8FD0AFFA8FD4FFFA8A97D847DCFCFFD1DFF%A8FD0AFFA8A8FD4CFFA8A87D7D7DAEAEFD20FFA8A8FD0AFFA8FD49FFA9A8%7D8483CFFD24FFA8FD06FF7DA8FF7DA8A8FD46FFA8A87D8483AECFFD26FF%A8A8FD05FFA87DFF7D7DA8FD43FFA9A97D8483AECFFD29FF7EFD06FF7DA8%A8A87DA8FD40FFA8A97D7E7DA8A8FD2CFFA8A8FD0AFFA8FD3FFFA8847DA8%A8FD2FFFA8FD0AFFA8A8FD3CFFA8847D84A7FD33FFA8FD0AFFA8FD39FFA9%A97E8483CFFD34FFA8FD0AFFA8A8FD37FFA97E7E7DA8A8FD36FFA8A8FD0A%FFA8FD35FFA9A97DA8A8FD39FFA8FD0AFFA8A8FD33FFA97E8483AECFFD3A%FFA8A8FD0AFFA8FD31FFA8A97DA8A8FD3DFFA8FD0AFFA8A8FD2FFFA97E84%7DAEFD3FFFA8A8FD0AFFA8FD2DFFA8A97EA8A8FD41FFA8FD0AFFA8A8FD2C%FF7E847DAEFD44FFA8FD05FF7DA8FF7DA8A8FD2AFFA97EA8A8FD45FFA8FD%06FF7D7DA87D7DA8A8FD27FFA8A87DA8A8FD46FFA8A8FD05FFA87DA87DA8%A8FD27FFA2A883CFFD48FFA8FD0AFFA8A8FD25FFA97E8483FD4AFFA8A8FD%0AFFA8FD23FFA9A97EA8A8FD4BFFA8FD0AFFA8A8FD22FF7EA883A8A8FD4C%FFA8A8FD0AFFA8FD21FF7EA9A7CFFD4EFFA8FD0AFFA8A8FD1FFFA97EA883%FD51FFA8FD0AFFA8FD1EFFA97EA8A8FD51FFA8FD0AFFA8A8FD1CFFA8A884%A7A7FD52FFA8A8FD0AFFA8FD1CFFA9A8A8A8FD53FFA8FD0AFFA8A8FD1AFF%FD05A8FD54FFA8A8FD0AFFA8FD19FFA8A9A8A8FD56FFA8FD06FF7DA8FF7D%A8A8FD18FFFD04A8FD57FFAFA8FD05FFA87DFF7DA8A8FD17FFA8A9A8AEFD%58FF84FD06FF52A8A87D7DA8FD16FFA8A9A8A8FD2CFF84A8A8A884A8A8A8%84FD07A884A8A8A884A8A8A884FD07A884A8A8A884A8A8A884FD04A8FFA8%FD06FFA9FFFFFFA8FD15FFA9A9A8A8FD2DFFA8FD2AFFA8A8A8FD0AFFA8A8%FD14FFA8A8A883A8FD2DFFA8FD0BFF7DA87DA8A8FF7DA87DFD05A87EFD04%A8FFA8FFA8FFFD07A8FFA8FFA8FD0AFFA8FD14FFA9AEA8FD2FFFA8FFFFA8%A9A8A9A8FD04FFA8527D7D527DA87D7D52FD087DFFFFFD077D527D53A8FF%A9A8FD0AFFA8A8FD13FF7EA8A8A8FD2FFFA8FFFFFFA9FFA8FD05FFA8A87D%7D527DFD04A87D7D7DA8A87D7D7DA8FF527D527DA8A8FD057DFFA8FFA8FF%A8A8FD07FFA8FD12FFA9A9A8A8FD2FFFA8A8FD16FFA9FD05FFA8FD05FFA8%FD05FFA8FFA8AFA8FFFF527DA8FD05FFA8A8FD11FFA8A8A8A7FD31FFA8FD%2BFFA8FFA8FD0AFFA8FD11FF7EFFA7FD31FFA8A9FD18FFA8A8FFFF7DFFFD%05A8FD07FFA8FFA8FD0AFFA8A8FD10FF7EFF7DFD33FFA8FFFFFFA8FFA8FF%A8FFFFFFA87D52A8FFA853FFFFA87DFFFF7D53FFA852A8FF52FF7D84FD08%FFA8FFA8FD0AFFA8FD0FFF7EFFA7FD34FFA8FFFFA8A8A8AEA8FD04FFA859%7D7DFF7D7EA8FF7D52A8FF7D7DA8FF7D7DA87DFF7DFD09FFA8A8FD0AFFA8%A8FD0EFFA8A9A8A8FD34FFA8FD0BFFFD04A8FFFFA8FFFFFFA8FFFFA87DFF%A87DA8FFA8FFA8FD09FFA8FFA8FD05FFA8A8FFA8A8A8FD0EFFA9FFA8FD35%FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FF%FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FD06FF7DA8A87D7DA8A8FD0CFF%A9A8A8A8FD35FFA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8%A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8AFA8A8A8FD05FF7DA8A8%7DA8A8FD0DFFA8FFA8FD63FFA8FD06FFA8FFA8FFA8A8FD0CFF7EFF7DFD65%FFA8FD0AFFA8FD0BFFA8A9A8AEFD64FFA8FD0AFFA8A8FD0AFFA9A8FFA8FD%66FFA8FD0AFFA8FD0AFFA9A8CFA8FD65FFA8FD0AFFA8A8FD0AFF7EFF83FD%66FFA8A8FD0AFFA8FD09FFA8CBA8AEFD66FFA8FD0AFFA8A8FD09FFA9AFA8%FD67FFA8A8FD0AFFA8FD09FFA8CFA8FD67FFA8FD0AFFA8A8FD08FF7EFF83%FD68FFA8A8FD0AFFA8FD07FFA9A9CFAEFD68FFA8FD06FFA8FFFFA8A8A8FD%07FFA9A8A8A8FD69FFA8FD05FF7D84FF7D7EA8FD07FF7EFFA8FD69FFA8FD%06FF7D7DA8A853A8A8FD05FFA8A9A8A8FD69FFA8A8FD05FFA8A8FFA8FFA8%FD06FFA9FFAEAEFD69FFA8FD0BFFA8FD06FF7EFF83FD6AFFA8A8FD0AFFA8%FD05FFA8A9AEAEFD6AFFA8FD0AFFA8A8FD05FFFD04A8FD6AFFA8A8FD0AFF%A8FD05FFA8FFA8FD6BFFA8FD0AFFA8A8FD04FFA8A9A8AEFD6CFFA8FD0AFF%A8FD04FFA9A9AEA8FD6BFFA8FD0AFFA8A8FD04FF7EFF83FD6CFFA8A8FD0A%FFA8FFFFFFA9A9FFA8FD6CFFA8FD0AFFA8A8FFFFFFA9A8FFA7FD6CFFA8A8%FD08FFA8FFA8FFFFFFA8FFA8FD6DFFA8FD06FF7DA8FF7D7DA8FFFFA8A9FF%A8A8FD6CFFA8A8FD05FFA8A8FF7DA87DFD05FFA8FD6DFFA8FD06FF7EA8A8%A87DA8FD04FFA8A8FD6EFFA8FD0AFFA8FD05FFA8FD6DFFA8FD0AFFA8A8FD%04FF83CFFD6DFFA8A8FD0AFFA8FD04FFAECFFD6DFFA8FD0AFFA8A8FD04FF%83FD6EFFA8A8FD0AFFA8FFFFFFAEA8FD6EFFA8FD0AFFA8A8FFFFFFAEA8FD%6EFFA8A8FD0AFFA8FFFFFFA8FD6FFFA8FD0AFFA8A8FFFFFFA8A8FD6FFFA8%FD0AFFA8FFFFFF83FD6FFFA8FD0AFFA8A8FFFFAEFD70FFA8A8FD05FF7DA8%FF52A87DFD12FFA8A8FD11FFA8A8FD12FFA8FD13FFA8FD13FFA8FD11FF7D%FD06FF527DA87D7DA87EFD74A8FD05FFFD05A87DFD12FFA8A8FD11FF7DFF%7DFD10FFFD04A8FD0FFFFD04A8FD10FF7DA87DFD10FFA984A87DFD08FF84%7D7DFD11FF7D7DFD11FFA87D7D7DFD0FFF7DA87D7DFD10FF7D7D52A8FD0F%FFA87D7D7DFD0FFFA87D7D7DFD09FF7DFD12FFA87DFD11FF7DA87DFD10FF%A87DA87DFD0FFFA87DA87DFD10FF7DA87DA8FD0FFFA87DA87DFD1CFFA8FD%27FFA8FD11FFA9FFAFFD23FFA8FD46FF7DA8FD7DFFA87D7DFD3AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T16:59:18+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T16:59:19+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T16:59:19+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>196</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9TTLI0LrE/pyMpCSEcuL&#xA;EbHjtWnhirArH8vtcs/LNzos89nqgm1A6hIbhZEjuAJoZPTuFPr19XhIzncA8fhIrhVNPLGi61b2&#xA;z6fca5cldKW2sY1iS24t6Vlbl5CZIZJCzyM7bt3wKnf6Kvv+rzef8BZ/9k+Ku/RV9/1ebz/gLP8A&#xA;7J8Vd+ir7/q83n/AWf8A2T4q79FX3/V5vP8AgLP/ALJ8VU4NJ1UIRNrV0z8nIKpaAcCxKD/efqFo&#xA;D74qqfoq+/6vN5/wFn/2T4q79FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ/wDZPirv0Vff9Xm8/wCA&#xA;s/8AsnxVTt9J1UQRifWrppwqiVlS0Cl6fEQDb9K4qqfoq+/6vN5/wFn/ANk+Ku/RV9/1ebz/AICz&#xA;/wCyfFXfoq+/6vN5/wABZ/8AZPiqncaTqpgkEGtXSzlWETMloVD0+EkC36VxVU/RV9/1ebz/AICz&#xA;/wCyfFXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm8/4Cz/7J8Vd+ir7/AKvN5/wFn/2T4qpz6TqpQCHW&#xA;rpX5ISWS0I4BgXH+8/UrUD3xVU/RV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm&#xA;8/4Cz/7J8Vd+ir7/AKvN5/wFn/2T4qpyaTqpeIx61dBAxMwKWhJTiwAX/R9jy4n5Yqqfoq+/6vN5&#xA;/wABZ/8AZPiqHvIxZIr3nmKe2RjRWmNjGCfYtAMlGJPIItJX8y2bM0dhq2q6nMh+OKztbd2UeJLW&#xA;6LT5HHhHUj7/ALrY+IGq+frwlbL17JG3jub97M7f5UMVvzB+nG4+Z+z9f3I4pHkEd5dh81WuszQa&#xA;3qq36SWyyxQpFHGkTiQq1GVEdqin2sBZi+rJsCXYql2lf73az/zGJ/1B2+KpjirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdiqlc3draxGa6mSCEbGSVgij6WIGERJ5Kkk/nnQ1lM&#xA;NmJ9SuB/uiziaRiv8yk8VZfdSckYVzIH47hZYHIFn6T86Xv+8Wl29hH1Sa+lZ+a+HpxhXRvnguPm&#xA;fs/X9y8UjyDQ8s63db6pr9yw6rHZBbUKT1BZRV1+Yx4z0ofjzteE9SibPyX5YtGZ00+OSR/tvPWY&#xA;k9eVJCwB+QyMiTzNqMYTpESNAiKFRRRVUUAHsBizbxVLf+mk/wCjP/mbiqZYq7FUu0r/AHu1n/mM&#xA;T/qDt8VTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqg9Q1rStO2vbqOFyOSxE1kYD&#xA;+SMVdvoGSjAnkEE0kv8AjOW8JXQtLuNR/lnb9xAw70kIahH8rhcaiOZ+W/7PtY8fdu3+j/OuoVN3&#xA;qEOmwkf3NqhZyp6h2Y1Rh4pJT2x4+4fPf9Q+9akfJWtfI+hRTC4uhLqNyu3r3khlYg9mHwqw/wBY&#xA;HAZE7E/q+Q2Xwx13Tu3tra2iWG2iSGFfsxxqEUfICgyIFMgKVMKXYq7FXYq7FUt/6aT/AKM/+ZuK&#xA;plirz+0vPOEmga2ksl/BKbsNpF29qZJltV+r8lMSrHISzPIOnTkRsBhVPPJs+rzR3T6hai2mc273&#xA;SPLzlS4Njbc42CoENDX4g30YFZJirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqheX9jZRiS8uI&#xA;7dCaK0jBanwFep9hkoxJ5LaQyec/rMrQaJYTahKpKs7Awxhh1VuQLI3/ABkVQfHDURzPy3/Z9rDj&#xA;7lv6I83anQ6jqQ0+A0rb2QKP068weSMP+MjqfDBx9wr37n9X2IqR8kbp/k/y/ZCotVnkJDPJPR6u&#xA;P2+FPTDe6qMjK5czaRAJ1izdirsVdirsVdirsVdirsVSmNrg+aJBIiLGLQekyuWZh6m/IFV4/QTi&#xA;qbYq7FUu0r/e7Wf+YxP+oO3xVMcVdirsVdirsVdirsVdirsVdirsVdirsVSnU/NGj6fzSSX1p4yF&#xA;eCHizKx6K7ErHGT29Rlr2yYgas7DzYmQCWfXfN+sClnEulWrDaeQH1DUdvUWtd919ID+WTBxRHIX&#xA;79h8uf3MbJ5Iiy8labHN9Zv3fULphR3mJ4kGnwkEs7psKLI7gdsEpGXM7d3T5JEO9P4oooY1iiRY&#xA;40FERAFUAdgBgZrsVdirsVdirsVdirsVdirsVdirsVS3/ppP+jP/AJm4qmWKuxVLtK/3u1n/AJjE&#xA;/wCoO3xVMcVdirsVdirsVdirsVdirsVdirsVSXUvNmmWjvDCfrdyjem0cZHBJN/geToH/wAheUng&#xA;pyfBQuWw/HJiZAID6l5m1sf6ZKdPsW/3VHzjYj5AiRtj1dlH80Rx8SvpHxP6ujHcpvpnl3StO4tD&#xA;EHlSvCVwCVr19NQFSIHusaqPbKzubO5ZCICZYWTsVdirsVdirsVdirsVdirsVdirsVdirsVS3/pp&#xA;P+jP/mbiqZEgAkmgG5JxVglt+Ytw+j6lLKLNdRstRj06KspW3ZZTaqbhjVj6cZvVrQn9mvEtQFU2&#xA;8k61Jq8Fxfm1eFL4293z5I0YMtjbNwBqHPXY8KEYFZLirsVdirsVdirsVdirsVdiqX6prljp4KuT&#xA;Lc8eYtoyvPgP22LFVjQd3dgvvk4wJ35DvQTSRhfMOv7lha6c46LzETA+B/dzT1H/ABjj/wCMgx8Q&#xA;D6B8T+gMLJ5J3pmgabp4Rok9SZF4LPIFLKp6qgUKka/5Maqvtldb2dyyEQExwsnYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqlMcrt5okVonjVLQBZGKcXrJ1XizHb/KAxVNiARQ7g4qh003Tkj9N&#xA;LWFYwroEEagcZCC60p0YqK+OKoXSQBfawBsBeJ/1B2+KplirsVdirsVdirsVdiq2aaKGJ5pnWOKM&#xA;FpJHIVVUbkknYAYQLVjd/r19eyLaaUkkfqqGSQKBcOhNOaLIOMMf/Fso334I2xyZ4Yc95d362Bl3&#xA;IrS/K1tB+9vKTylhJ6PxNEsg6Oxcs80gp/eSkn+UL0yuRMjcv2KId6eYs3Yq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqlv8A00n/AEZ/8zcVTLFXYql2lf73az/zGJ/1B2+KpjirsVdirsVd&#xA;irsVQuo6nbWEStLyeWU8Le3jHKWV6V4ou1TQVPYDckDJRgZIJY6kepa9cLI7qIIm2dPjtoWB/wB1&#xA;BhS5nH+/GHpofsgsDVOTpD5sLJ5MksdPtbGExW6U5NzlkYlnkc7F5HarM23U5ACmYACIwpdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3/ppP+jP/mbiqZYqx2TzzpcWi6jqs1vcQppc&#xA;6W17bSLGkqSSCJlBJf06cbhGJL0XvQgjFVby5qlleXWpNDKnqTyxXKQc0aQRPZWxDURmFN+oJHvi&#xA;qeYq7FXYq7FXYqgNT1aOzZLeNRNfzhmt7avH4Vpykkah4RpX4mPyFWIBnGF7nkglJtO0mfUpWu7m&#xA;VpIZRxlu6GN7lKg8IAGJgtajpXlJ1Jpu8Zz4thtFgBfu/H2MnjjSNFjjUJGgCoiigAGwAAwNjeKu&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKY7i3k80SRxyo8kNoBKisCyEyVAYD&#xA;p9OKptiqRaf5N0vTtMOm2k95FblncsLqYSc5XSR2MgbmWLR1JJr8TfzHFVTy1YWmnDULCzj9K0tJ&#xA;4obeOpbjHHZW6qOTEsdh1Jriqc4q7FXYq7FUDqmpG0RIoEE1/c8ltLcmgLKKlnbfjGnVm+gVYgGc&#xA;I3ueQQSk2k6c2ou8859axkIM9ywo1869CBvxtE39NP2+u4qXhKfH/VYD1e77/wBjJ8Wx2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVjmm2enHQbHUNQvLiMzW8Mk08l9cxoXkQE/7tVRUnoMkASaCG/U8of8AV5P/&#xA;AHFZ/wDqvkvCn3H5LYR6aHpsiLJHPdujgMjrfXZBB3BBEuQKWHS+cPLEWrDS5Pr/ANaW+urKVFvb&#xA;5isdpZzXbTCj0bkIOIQGu+Kqo85+QGsheR3mpTW/pXM8jxS6lII0s2CTGTi540ZgF/mqONcVXxeb&#xA;fIztKj3GqwyxFkEMr6okjyJPHbNHEhasjia4iSi1+0MVbfzX5J2EV1qLu0RkUtNqaRhuMpWKWQtS&#xA;NybeReLb1FKVpVVMdCu/L2s8xaSai3ooDPN9Z1AQK/FWaNZmdVdl5itPfuCAqlS+dvy6NlaXralf&#xA;JbXxb6q7XGofGkfp85dnNEX1kBJ/gaKun83eTLeRmnuNQitFEoE8lxqKtJLFcx2vCKPl+8BllpyB&#xA;pt4VIVTDRNY8n65eC00u8vriT0EuWIub9VVJACvItIKHfp9HXFUdoE0s0+mzSsXlk0mF5HY1LMxU&#xA;kk+5xV3le/8AOVwXTX9Nht4qFra6jkVZGA4jjNbBp1iY1JHCdxtvx2BCshxVLtK/3u1n/mMT/qDt&#xA;8VTHFXYq7FUNqWoQWFo1xKGahCxxIKvJIxokaDuzNsP6ZKETI0glILSwm1C7uEuH5tIQNYnRjw+H&#xA;dbCA/wC+0r+9bblXxZuIyT4vSPpH4/HyYczX49zKFVVUKoAUCgA2AAwNjsVdirsVdirsVdirsVdi&#xA;rsVdirsVS7y1/wAo5pX/ADB2/wDyaXFUxxV2KpDd+UvKerWs1vNbrcwNc3M8ypNJtc3EElpcElHB&#xA;DGKd0p+zWooQDiq218h+V7eyuLJbWSSG6SWO5MtxPK8izsHl5O8jN8TIOh27UGKqt/5L8t3z+pcW&#xA;rGUesUlSWZHRrieG5kdGRwVb1rWJ1YbqV+Gm+KoX/C3keP09EZI/WkVZUtHuZPXcQ8/3lDJ6jbzP&#xA;ybuTvirtPt/JOi3t9HaahHayRxVvrI3zcIVARTK0LSUiY/BV6A+9SaqpPD5b/Kppbcw6hE15dzNL&#xA;Bcpqkv1m4kl9OF1Egm5yB/q6Jxr1X+bfFWQX3kfyxfQrFcWhIjVkidZZkdA863JKMrhlb1kVqjft&#xA;02xVdp/k3Q7HUodSiWeS8toTb27z3M84RGpy4rI7KC1NzT+OKoby110r/tj2/wDxrhVkhIAJJoBu&#xA;ScCoCLX9Cl019Ui1K1k0yOvqXyzRmBeJo3KUNwFD13xVT0aSOW71aSNg8b3UbI6kFSps7cggjqDi&#xA;qZ4q7FXYqxiS6uNRuobuBqSXHNNEUryEcX2ZtQdTsaqaR+xUbeo1J5DwjhHM8/x5fewJZDZWcFla&#xA;R2sAIiiFBU1YnqWYnqzHcnucrApkBSthS7FXYq7FXYq7FXYq7FXYq7FXYq7FUh0W7s28taZCNQW2&#xA;kFpbgujxc1IjWopIHH4YkIVqxf8AUwSf8FZf9UcjwnvRXmjk1HTlRVN7E5AALtIlTTuaUH3DJMmB&#xA;XvlS5m1h9Rh1W1jeOf6xZ8bqROLG/W4csiji3K3DIa1606E4UJxeaTDN5sj12PUoV9J4FRPrTgCF&#xA;I5lmX0gfTPNpUO/XiPAYpXX2lS3Hm+01uPzRLBZW8Msb6ejWBj+N7dvSUvbPL6cvoMZCZeYNOBUV&#xA;wKgtR0SWXzhHrVte2DW6Sx3YeWbjOssFpPbLAvFGHpSevyZuVRuOJrsVdYWOqWvmK/1WC5sbSK7h&#xA;mea2Goz3EVzeOsSwyNDJGiWwjERVjFyLDqMVVLLQLeC38s2D6lbS2Ojs97qTNKPUub8qeD06cTNN&#xA;JM24+ILt1oqy39J6b/y1w/8AIxf64Fd+k9N/5a4f+Ri/1xVJPLXXSv8Atj2//GuFWRsCVIFKkECo&#xA;qPpG2BWHW/kfWl0mW0uNWtp7ue8XUri8Fk6CS5hlt5IOcYuSPSRLf0yld14UKlCWVR3k3Q4dIS6s&#xA;0lkmNk1vZiRnfiyxWNsvL0uXpgnj2G3TpirJMVdiqTa9cJO36LLhIXjM+pzVoI7NftAnsZqFB/k8&#xA;iN1y2HpHEenL3/sYkquh2rlH1GeP07m7C8IiKejbrX0YadqA8m/yie1Moj3lYjqmmSZOxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2Koc6bpxJJtYSTuSY1/pirX6M03/lkh/5Fr/TFXfozTf+WSH/AJFr/TFX&#xA;fozTf+WSH/kWv9MVd+jNN/5ZIf8AkWv9MVd+jNN/5ZIf+Ra/0xV36M03/lkh/wCRa/0xV36M03/l&#xA;kh/5Fr/TFXfozTf+WSH/AJFr/TFXfozTf+WSH/kWv9MVd+jNN/5ZIf8AkWv9MVQMVvHF5ndk5fvL&#xA;MVUuzKKSUHFSSqj/AFQMVTfFXYql2lf73az/AMxif9QdviqY4qsuJ4beCS4mcRwwq0krnoqqKsT8&#xA;hhAs0FY3a20t5IltcKyXF+RqOrI32kgrS3tW278eLDoeMn82HMbPCOQ/H2tfPZk+RbHYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUt/wCmk/6M/wDmbiqZYq7FUu0r&#xA;/e7Wf+YxP+oO3xVMcVSjWnS6ubXSeQEcpNzfVI2toCCVNe0knFSD1XllsNgZfi0FV0FWktG1CQET&#xA;ai5uTXqI22hUigpxiC1H81coj3ohyvvTLJMnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FUt/6aT/oz/wCZuKplirCYLDzIdC1jT5bfU4mnu5pLG4S7ikuUt2dCixSv&#xA;cll25bFxQYVTDyRDrcUFymqPH9YjaBLmNebv6y2VsGYzPI/L3rU1/aOBWTYqxh6XsVy1eT63dGxj&#xA;3rSztuayUO+zIkrqfFxks2wEfxv+Ka5b/Fk4AAoOmRbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlMa3A80SGR0aM2g9JVQqyj1N+RLNy+gDFU2xV2KpdpX+92&#xA;s/8AMYn/AFB2+KqmtXktppdzPAK3IThbKdw00h4RL9MjKMnjjcgCgoPSbONL/wBKOpt9Ht49Ptye&#xA;vJkSSUnx+ARU+nK5S4pEsQN/cnOFm7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FUt/6aT/oz/wCZuKplirsVS7Sv97tZ/wCYxP8AqDt8VW6n/pGp6dY9UDPeTiux&#xA;S3ACA07+tKjj/VyyG0Sfh8/2IK7y9V9LjuD/AMfjy3S+PCeRpI6+4RlGUx5IhyTHJMnYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv/AE0n/Rn/AMzcVTLFWE/4&#xA;yvo/L93J9Yhn1KG+a2EywSCJLYXccUlw0XMmkMEvqH496YVR3kXVb/Uba5ub21aKa4aGaWUKI4y7&#xA;WdvsI2dpUr9oBhsNia4qjNUjuoE1i/rxmmhjtNOC7mpBCH2Zp5+NPYYzl6KDCXIpzBBFBBHBEvGK&#xA;JQka+CqKAfdgAZgL8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdiqUxyu3miRWieNUtAFkYpxesnVeLMdv8AKAxVNsVdiqXaV/vdrP8AzGJ/1B2+Ku1cmSfTrQH4&#xA;ZrpXkA68bdWnB+XqRoD88jLoxl0THJMnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FUt/6aT/oz/5m4qmWKuxVLtK/3u1n/mMT/qDt8VdvL5i60Fnab+5upP8A&#xA;jX6r+OR6sf4kxyTJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVLf+mk/6M/8AmbiqZYqxG2/MJbvy3da1Z6TdTvbyWqrYoPVleK9WCSOYCATNxWG5DuApK8W2&#xA;OxKqpoXmrSZLnUJJHZBdyQXUDiOV4pIpLK2IaOUJwYVqPHbphVMYNY0KG4uZxdFnuXV2qj7BUVAo&#xA;+Hp8NfmTgAQAr/4j0b/lo/4ST/mnFLv8R6N/y0f8JJ/zTirv8R6N/wAtH/CSf804qpweaNHlQs0r&#xA;RkO68WR6kI5UN9no1Kj2xVU/xHo3/LR/wkn/ADTirv8AEejf8tH/AAkn/NOKu/xHo3/LR/wkn/NO&#xA;Ku/xHo3/AC0f8JJ/zTiqnb+aNHmt4pWlaJpEVjE6OGUsK8W+HqMVVP8AEejf8tH/AAkn/NOKu/xH&#xA;o3/LR/wkn/NOKu/xHo3/AC0f8JJ/zTiqnceaNHht5ZVlaVo0ZhEiOWYqK8V+HqcVVP8AEejf8tH/&#xA;AAkn/NOKu/xHo3/LR/wkn/NOKu/xHo3/AC0f8JJ/zTirv8R6N/y0f8JJ/wA04qpz+aNHiQMsrSEu&#xA;i8VR6gO4Ut9notan2xVU/wAR6N/y0f8ACSf804q7/Eejf8tH/CSf804q7/Eejf8ALR/wkn/NOKu/&#xA;xHo3/LR/wkn/ADTiqnL5o0dHiUSs4lcqzKj0QBGbk3w9Php8ziqp/iPRv+Wj/hJP+acVd/iPRv8A&#xA;lo/4ST/mnFXf4j0b/lo/4ST/AJpxV3+I9G/5aP8AhJP+acVQWn6taah5onW1EjJb2aB5mjkRCzyk&#xA;8VZ1UMQF3piqf4qkyeTPK8cDW8OnRQwvzDJFWMUkaJm+wV/5Z4x7BQBttiqWeXNH1zT/ADJeh1ki&#xA;0RI2itI/WDW/AGMWyW9uD+5EMauj/CORIO/ZVlmKuxV2KuxVjfk6x120fVF1L1zby3JlsmvJvWno&#xA;+7r8MsyLGrbRheO3VRirJMVdirsVSbzha39zoFxHp6XEl8CjWy2k/wBWk5qwIJf1IRx/mUtQjscV&#xA;S7y7ZeaI/M2pXWoesunzBzGsswkRi0gaARRCSQRelFVJKAcm3364qyrFXYq7FUg812+rSzaPLpsV&#xA;zK1tfRy3QtpxCv1cAiRZUaWJZQaiikNiqj5I0/XbKG/j1Q3DRvPztGvZvWuCpQcw3GWeNVD14BSN&#xA;uq4qyXFXYq7FWG+ctP8ANd1q0Z0JLmClhdL9eS64wfWHhljt43tmlVRxkkEhlETNVVHStFU68p22&#xA;pW+jLHqCzRymadoYbmb6zPHA0rGGOWblJzZUI35t4cj1xVOMVdirsVYL5i0nzLda1qz2i6nb2T2s&#xA;KW72d2hE8/rQM7Rxy3UKwenHGV+EJzDSEsTxqqy3RF1BdGsF1JVTUFt4heIjtIomCDmFdyzMOVdy&#xA;xPucVRuKuxV2KvMdb0T8w57rV5NOF9FaTTK9jb/XfScTGK6X1FY3M9IFne3dkqoZRT0fh4uVenYF&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirGvzFp/hG65cvS9a09fjyr6X1uL1a8d6cK19sQq&#xA;J8kf8otYceXpcX+r8uVfQ9RvR+18VPT40r2xVPMVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:9017B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9017B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9017B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T16:59:19+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -234.333 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 234.333 li
306.161 234.333 li
306.161 0 li
cp
clp
[1 0 0 1 0 0 ]ct
22.3545 218.835 mo
301.354 218.835 li
301.354 2.83545 li
22.3545 2.83545 li
22.3545 218.835 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
22.3545 218.835 mo
301.354 218.835 li
301.354 2.83545 li
22.3545 2.83545 li
22.3545 218.835 li
cp
clp
.625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
31.6543 187.979 mo
40.9546 157.122 li
50.2544 136.549 li
59.5542 121.122 li
68.8545 108.778 li
78.1543 98.4927 li
87.4546 89.6768 li
96.7544 81.9624 li
106.054 75.105 li
115.354 68.9336 li
124.654 63.3228 li
133.955 58.1802 li
143.254 53.4331 li
152.554 49.0249 li
161.854 44.9106 li
171.155 41.0537 li
180.455 37.4229 li
189.754 33.9946 li
199.054 30.7466 li
208.354 27.6611 li
217.655 24.7222 li
226.955 21.9165 li
236.254 19.2334 li
245.554 16.6621 li
254.854 14.1934 li
264.155 11.8198 li
273.455 9.53418 li
282.754 7.32959 li
292.054 5.20215 li
301.355 3.14502 li
.884 .769 0 0 cmyk
@
31.6543 214.084 mo
40.9546 171.307 li
50.2544 146.284 li
59.5542 128.53 li
68.8545 114.758 li
78.1543 103.506 li
87.4546 93.9932 li
96.7544 85.752 li
106.054 78.4834 li
115.354 71.9814 li
124.654 66.0996 li
133.955 60.7295 li
143.254 55.7896 li
152.554 51.2163 li
161.854 46.9585 li
171.155 42.9751 li
180.455 39.2339 li
189.754 35.7065 li
199.054 32.3696 li
208.354 29.2036 li
217.655 26.1934 li
226.955 23.3218 li
236.254 20.5791 li
245.554 17.9521 li
254.854 15.4331 li
264.155 13.0127 li
273.455 10.6831 li
282.754 8.43896 li
292.054 6.27344 li
301.355 4.18115 li
.873 .242 1 .129 cmyk
@
grestore
22.3545 218.835 mo
22.3545 216.334 li
22.3545 218.835 li
cp
0 0 0 1 cmyk
f
.3125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
22.3545 218.835 mo
22.3545 216.335 li
@
22.3545 5.33594 mo
22.3545 2.83594 li
22.3545 5.33594 li
cp
f
22.3545 2.83545 mo
22.3545 5.33545 li
@
22.8496 221.922 mo
22.4673 221.922 22.1821 222.11 21.9873 222.485 cv
21.7925 222.86 21.7021 223.422 21.7021 224.172 cv
21.7021 224.922 21.7925 225.485 21.9873 225.86 cv
22.1821 226.235 22.4673 226.422 22.8496 226.422 cv
23.2324 226.422 23.5171 226.235 23.7124 225.86 cv
23.8999 225.485 23.9971 224.922 23.9971 224.172 cv
23.9971 223.422 23.8999 222.86 23.7124 222.485 cv
23.5171 222.11 23.2324 221.922 22.8496 221.922 cv
22.8496 221.336 mo
23.457 221.336 23.9224 221.584 24.2524 222.065 cv
24.5747 222.552 24.7397 223.256 24.7397 224.172 cv
24.7397 225.094 24.5747 225.799 24.2524 226.28 cv
23.9224 226.759 23.457 227 22.8496 227 cv
22.2349 227 21.7622 226.759 21.4399 226.28 cv
21.1172 225.799 20.96 225.094 20.96 224.172 cv
20.96 223.256 21.1172 222.552 21.4399 222.065 cv
21.7622 221.584 22.2349 221.336 22.8496 221.336 cv
f
68.8545 218.835 mo
68.8545 216.335 li
f
68.8545 218.835 mo
68.8545 216.335 li
@
68.8545 2.83545 mo
68.8545 5.33545 li
f
68.8545 2.83545 mo
68.8545 5.33545 li
@
67.8921 221.336 mo
70.7944 221.336 li
70.7944 221.959 li
68.5669 221.959 li
68.5669 223.302 li
68.6719 223.264 68.7842 223.235 68.8892 223.219 cv
68.9941 223.204 69.1069 223.189 69.2119 223.189 cv
69.8193 223.189 70.2993 223.362 70.6592 223.692 cv
71.0195 224.03 71.1992 224.479 71.1992 225.049 cv
71.1992 225.642 71.0117 226.099 70.6445 226.422 cv
70.2769 226.745 69.7593 226.902 69.0991 226.902 cv
68.8667 226.902 68.6343 226.879 68.3945 226.849 cv
68.1543 226.811 67.9146 226.759 67.6592 226.676 cv
67.6592 225.934 li
67.877 226.054 68.1021 226.144 68.3418 226.204 cv
68.5742 226.264 68.8218 226.287 69.0845 226.287 cv
69.5044 226.287 69.8418 226.182 70.0894 225.958 cv
70.3296 225.732 70.457 225.432 70.457 225.049 cv
70.457 224.674 70.3296 224.374 70.0894 224.149 cv
69.8418 223.924 69.5044 223.811 69.0845 223.811 cv
68.8892 223.811 68.687 223.834 68.4917 223.879 cv
68.2969 223.924 68.0942 223.992 67.8921 224.083 cv
67.8921 221.336 li
f
115.354 218.835 mo
115.354 216.335 li
f
115.354 218.835 mo
115.354 216.335 li
@
115.354 2.83545 mo
115.354 5.33545 li
f
115.354 2.83545 mo
115.354 5.33545 li
@
112.168 226.28 mo
113.375 226.28 li
113.375 222.11 li
112.063 222.372 li
112.063 221.697 li
113.368 221.434 li
114.111 221.434 li
114.111 226.28 li
115.318 226.28 li
115.318 226.902 li
112.168 226.902 li
112.168 226.28 li
cp
f
118.393 221.922 mo
118.011 221.922 117.726 222.11 117.531 222.485 cv
117.336 222.86 117.246 223.422 117.246 224.172 cv
117.246 224.922 117.336 225.485 117.531 225.86 cv
117.726 226.235 118.011 226.422 118.393 226.422 cv
118.776 226.422 119.061 226.235 119.256 225.86 cv
119.443 225.485 119.541 224.922 119.541 224.172 cv
119.541 223.422 119.443 222.86 119.256 222.485 cv
119.061 222.11 118.776 221.922 118.393 221.922 cv
118.393 221.336 mo
119 221.336 119.466 221.584 119.796 222.065 cv
120.118 222.552 120.283 223.256 120.283 224.172 cv
120.283 225.094 120.118 225.799 119.796 226.28 cv
119.466 226.759 119 227 118.393 227 cv
117.778 227 117.306 226.759 116.983 226.28 cv
116.661 225.799 116.503 225.094 116.503 224.172 cv
116.503 223.256 116.661 222.552 116.983 222.065 cv
117.306 221.584 117.778 221.336 118.393 221.336 cv
f
161.854 218.835 mo
161.854 216.335 li
f
161.854 218.835 mo
161.854 216.335 li
@
161.854 2.83545 mo
161.854 5.33545 li
f
161.854 2.83545 mo
161.854 5.33545 li
@
158.747 226.182 mo
159.954 226.182 li
159.954 222.012 li
158.641 222.274 li
158.641 221.599 li
159.947 221.336 li
160.688 221.336 li
160.688 226.182 li
161.896 226.182 li
161.896 226.804 li
158.747 226.804 li
158.747 226.182 li
cp
f
163.396 221.336 mo
166.299 221.336 li
166.299 221.959 li
164.071 221.959 li
164.071 223.302 li
164.176 223.264 164.289 223.235 164.394 223.219 cv
164.499 223.204 164.611 223.189 164.716 223.189 cv
165.324 223.189 165.804 223.362 166.164 223.692 cv
166.524 224.03 166.704 224.479 166.704 225.049 cv
166.704 225.642 166.516 226.099 166.149 226.422 cv
165.782 226.745 165.264 226.902 164.604 226.902 cv
164.372 226.902 164.139 226.879 163.899 226.849 cv
163.659 226.811 163.419 226.759 163.164 226.676 cv
163.164 225.934 li
163.382 226.054 163.606 226.144 163.846 226.204 cv
164.079 226.264 164.326 226.287 164.589 226.287 cv
165.009 226.287 165.346 226.182 165.594 225.958 cv
165.833 225.732 165.961 225.432 165.961 225.049 cv
165.961 224.674 165.833 224.374 165.594 224.149 cv
165.346 223.924 165.009 223.811 164.589 223.811 cv
164.394 223.811 164.191 223.834 163.996 223.879 cv
163.801 223.924 163.599 223.992 163.396 224.083 cv
163.396 221.336 li
f
208.354 218.835 mo
208.354 216.335 li
f
208.354 218.835 mo
208.354 216.335 li
@
208.354 2.83545 mo
208.354 5.33545 li
f
208.354 2.83545 mo
208.354 5.33545 li
@
205.542 226.28 mo
208.122 226.28 li
208.122 226.902 li
204.649 226.902 li
204.649 226.28 li
204.926 225.995 205.309 225.604 205.796 225.11 cv
206.277 224.623 206.584 224.307 206.711 224.165 cv
206.952 223.902 207.117 223.676 207.207 223.489 cv
207.296 223.309 207.349 223.122 207.349 222.942 cv
207.349 222.657 207.245 222.417 207.042 222.237 cv
206.839 222.057 206.576 221.959 206.247 221.959 cv
206.014 221.959 205.766 222.004 205.511 222.079 cv
205.256 222.162 204.979 222.282 204.687 222.447 cv
204.687 221.697 li
204.986 221.578 205.264 221.487 205.519 221.426 cv
205.774 221.368 206.014 221.337 206.232 221.337 cv
206.794 221.337 207.245 221.479 207.582 221.764 cv
207.919 222.049 208.091 222.424 208.091 222.897 cv
208.091 223.122 208.046 223.339 207.964 223.534 cv
207.881 223.737 207.732 223.977 207.506 224.247 cv
207.447 224.322 207.251 224.524 206.921 224.862 cv
206.591 225.2 206.133 225.672 205.542 226.28 cv
f
211.256 221.922 mo
210.874 221.922 210.589 222.11 210.394 222.485 cv
210.2 222.86 210.109 223.422 210.109 224.172 cv
210.109 224.922 210.2 225.485 210.394 225.86 cv
210.589 226.235 210.874 226.422 211.256 226.422 cv
211.639 226.422 211.924 226.235 212.119 225.86 cv
212.307 225.485 212.404 224.922 212.404 224.172 cv
212.404 223.422 212.307 222.86 212.119 222.485 cv
211.924 222.11 211.639 221.922 211.256 221.922 cv
211.256 221.336 mo
211.864 221.336 212.329 221.584 212.659 222.065 cv
212.981 222.552 213.146 223.256 213.146 224.172 cv
213.146 225.094 212.981 225.799 212.659 226.28 cv
212.329 226.759 211.864 227 211.256 227 cv
210.642 227 210.168 226.759 209.846 226.28 cv
209.525 225.799 209.367 225.094 209.367 224.172 cv
209.367 223.256 209.525 222.552 209.846 222.065 cv
210.168 221.584 210.642 221.336 211.256 221.336 cv
f
254.854 218.835 mo
254.854 216.335 li
f
254.854 218.835 mo
254.854 216.335 li
@
254.854 2.83545 mo
254.854 5.33545 li
f
254.854 2.83545 mo
254.854 5.33545 li
@
252.12 226.28 mo
254.7 226.28 li
254.7 226.902 li
251.227 226.902 li
251.227 226.28 li
251.505 225.995 251.887 225.604 252.375 225.11 cv
252.855 224.623 253.162 224.307 253.29 224.165 cv
253.53 223.902 253.695 223.676 253.785 223.489 cv
253.875 223.309 253.927 223.122 253.927 222.942 cv
253.927 222.657 253.823 222.417 253.62 222.237 cv
253.417 222.057 253.155 221.959 252.825 221.959 cv
252.592 221.959 252.344 222.004 252.089 222.079 cv
251.834 222.162 251.557 222.282 251.264 222.447 cv
251.264 221.697 li
251.564 221.578 251.842 221.487 252.097 221.426 cv
252.352 221.368 252.592 221.337 252.809 221.337 cv
253.372 221.337 253.823 221.479 254.16 221.764 cv
254.498 222.049 254.669 222.424 254.669 222.897 cv
254.669 223.122 254.625 223.339 254.542 223.534 cv
254.459 223.737 254.309 223.977 254.085 224.247 cv
254.025 224.322 253.83 224.524 253.5 224.862 cv
253.17 225.2 252.712 225.672 252.12 226.28 cv
f
256.259 221.434 mo
259.163 221.434 li
259.163 222.057 li
256.934 222.057 li
256.934 223.4 li
257.04 223.362 257.153 223.333 257.257 223.317 cv
257.363 223.301 257.474 223.287 257.58 223.287 cv
258.187 223.287 258.667 223.459 259.028 223.79 cv
259.387 224.127 259.567 224.577 259.567 225.147 cv
259.567 225.74 259.379 226.197 259.012 226.52 cv
258.644 226.842 258.126 227 257.467 227 cv
257.235 227 257.001 226.977 256.762 226.947 cv
256.522 226.909 256.282 226.857 256.027 226.774 cv
256.027 226.032 li
256.245 226.152 256.469 226.242 256.71 226.301 cv
256.942 226.362 257.189 226.384 257.452 226.384 cv
257.872 226.384 258.209 226.28 258.458 226.055 cv
258.697 225.829 258.825 225.53 258.825 225.147 cv
258.825 224.772 258.697 224.471 258.458 224.247 cv
258.209 224.022 257.872 223.909 257.452 223.909 cv
257.257 223.909 257.054 223.932 256.86 223.977 cv
256.665 224.022 256.462 224.089 256.259 224.18 cv
256.259 221.434 li
f
301.355 218.835 mo
301.355 216.335 li
f
301.355 218.835 mo
301.355 216.335 li
@
301.355 2.83545 mo
301.355 5.33545 li
f
301.355 2.83545 mo
301.355 5.33545 li
@
300.161 223.955 mo
300.513 224.03 300.792 224.187 300.986 224.426 cv
301.181 224.667 301.287 224.967 301.287 225.312 cv
301.287 225.852 301.098 226.272 300.731 226.565 cv
300.356 226.857 299.832 227 299.149 227 cv
298.917 227 298.676 226.977 298.436 226.932 cv
298.196 226.895 297.941 226.827 297.686 226.737 cv
297.686 226.025 li
297.888 226.145 298.114 226.235 298.361 226.294 cv
298.601 226.354 298.856 226.384 299.126 226.384 cv
299.591 226.384 299.943 226.294 300.183 226.114 cv
300.424 225.934 300.551 225.665 300.551 225.312 cv
300.551 224.997 300.438 224.742 300.214 224.562 cv
299.989 224.381 299.674 224.285 299.268 224.285 cv
298.631 224.285 li
298.631 223.676 li
299.298 223.676 li
299.659 223.676 299.936 223.61 300.13 223.459 cv
300.327 223.317 300.424 223.107 300.424 222.83 cv
300.424 222.551 300.319 222.334 300.124 222.184 cv
299.92 222.035 299.636 221.959 299.268 221.959 cv
299.066 221.959 298.848 221.982 298.616 222.027 cv
298.383 222.072 298.128 222.139 297.851 222.229 cv
297.851 221.569 li
298.128 221.495 298.391 221.434 298.638 221.397 cv
298.878 221.36 299.111 221.336 299.336 221.336 cv
299.891 221.336 300.333 221.464 300.664 221.719 cv
300.994 221.975 301.159 222.319 301.159 222.754 cv
301.159 223.054 301.068 223.309 300.896 223.52 cv
300.723 223.729 300.476 223.879 300.161 223.955 cv
f
304.271 221.922 mo
303.889 221.922 303.604 222.11 303.409 222.485 cv
303.214 222.86 303.124 223.422 303.124 224.172 cv
303.124 224.922 303.214 225.485 303.409 225.86 cv
303.604 226.235 303.889 226.422 304.271 226.422 cv
304.654 226.422 304.938 226.235 305.133 225.86 cv
305.322 225.485 305.418 224.922 305.418 224.172 cv
305.418 223.422 305.322 222.86 305.133 222.485 cv
304.938 222.11 304.654 221.922 304.271 221.922 cv
304.271 221.336 mo
304.879 221.336 305.344 221.584 305.673 222.065 cv
305.997 222.552 306.161 223.256 306.161 224.172 cv
306.161 225.094 305.997 225.799 305.673 226.28 cv
305.344 226.759 304.879 227 304.271 227 cv
303.657 227 303.184 226.759 302.861 226.28 cv
302.539 225.799 302.381 225.094 302.381 224.172 cv
302.381 223.256 302.539 222.552 302.861 222.065 cv
303.184 221.584 303.657 221.336 304.271 221.336 cv
f
164.253 231.858 mo
164.253 234.333 li
163.578 234.333 li
163.578 231.881 li
163.578 231.491 163.496 231.206 163.346 231.012 cv
163.196 230.816 162.971 230.718 162.671 230.718 cv
162.303 230.718 162.018 230.838 161.808 231.071 cv
161.598 231.303 161.493 231.619 161.493 232.016 cv
161.493 234.333 li
160.818 234.333 li
160.818 230.231 li
161.493 230.231 li
161.493 230.869 li
161.651 230.628 161.838 230.441 162.063 230.321 cv
162.281 230.202 162.536 230.133 162.821 230.133 cv
163.286 230.133 163.646 230.284 163.886 230.577 cv
164.125 230.869 164.253 231.296 164.253 231.858 cv
f
22.3545 218.835 mo
24.8545 218.835 li
f
22.3545 218.835 mo
24.8545 218.835 li
@
301.355 218.835 mo
298.855 218.835 li
f
301.355 218.835 mo
298.855 218.835 li
@
11.458 216.584 mo
11.0757 216.584 10.7905 216.772 10.5957 217.147 cv
10.4004 217.522 10.3105 218.084 10.3105 218.834 cv
10.3105 219.584 10.4004 220.147 10.5957 220.522 cv
10.7905 220.897 11.0757 221.084 11.458 221.084 cv
11.8408 221.084 12.1255 220.897 12.3208 220.522 cv
12.5083 220.147 12.6055 219.584 12.6055 218.834 cv
12.6055 218.084 12.5083 217.522 12.3208 217.147 cv
12.1255 216.772 11.8408 216.584 11.458 216.584 cv
11.458 216 mo
12.0654 216 12.5308 216.248 12.8608 216.727 cv
13.1831 217.215 13.3481 217.92 13.3481 218.834 cv
13.3481 219.757 13.1831 220.462 12.8608 220.942 cv
12.5308 221.422 12.0654 221.663 11.458 221.663 cv
10.8433 221.663 10.3706 221.422 10.0483 220.942 cv
9.72559 220.462 9.56787 219.757 9.56787 218.834 cv
9.56787 217.92 9.72559 217.215 10.0483 216.727 cv
10.3706 216.248 10.8433 216 11.458 216 cv
f
14.6455 220.635 mo
15.418 220.635 li
15.418 221.565 li
14.6455 221.565 li
14.6455 220.635 li
cp
f
17.0381 216.097 mo
19.9409 216.097 li
19.9409 216.719 li
17.7134 216.719 li
17.7134 218.063 li
17.8184 218.025 17.9307 217.995 18.0356 217.981 cv
18.1406 217.965 18.2534 217.95 18.3584 217.95 cv
18.9658 217.95 19.4458 218.123 19.8057 218.454 cv
20.1655 218.791 20.3457 219.24 20.3457 219.81 cv
20.3457 220.403 20.1582 220.86 19.7905 221.183 cv
19.4233 221.504 18.9058 221.663 18.2456 221.663 cv
18.0132 221.663 17.7808 221.64 17.5405 221.61 cv
17.3008 221.573 17.0605 221.52 16.8057 221.438 cv
16.8057 220.695 li
17.0234 220.815 17.248 220.905 17.4883 220.965 cv
17.7207 221.025 17.9683 221.047 18.231 221.047 cv
18.6509 221.047 18.9883 220.942 19.2358 220.718 cv
19.4756 220.493 19.603 220.192 19.603 219.81 cv
19.603 219.435 19.4756 219.135 19.2358 218.91 cv
18.9883 218.686 18.6509 218.573 18.231 218.573 cv
18.0356 218.573 17.8335 218.594 17.6382 218.64 cv
17.4434 218.686 17.2407 218.752 17.0381 218.843 cv
17.0381 216.097 li
f
22.3545 187.979 mo
24.8545 187.979 li
f
22.3545 187.979 mo
24.8545 187.979 li
@
301.355 187.979 mo
298.855 187.979 li
f
301.355 187.979 mo
298.855 187.979 li
@
10.1689 190.085 mo
11.3765 190.085 li
11.3765 185.916 li
10.064 186.178 li
10.064 185.502 li
11.3691 185.241 li
12.1113 185.241 li
12.1113 190.085 li
13.3188 190.085 li
13.3188 190.708 li
10.1689 190.708 li
10.1689 190.085 li
cp
f
14.812 189.778 mo
15.5845 189.778 li
15.5845 190.708 li
14.812 190.708 li
14.812 189.778 li
cp
f
18.7793 185.728 mo
18.397 185.728 18.1118 185.916 17.917 186.29 cv
17.7217 186.666 17.6318 187.227 17.6318 187.978 cv
17.6318 188.728 17.7217 189.29 17.917 189.666 cv
18.1118 190.04 18.397 190.227 18.7793 190.227 cv
19.1616 190.227 19.4468 190.04 19.6416 189.666 cv
19.8291 189.29 19.9268 188.728 19.9268 187.978 cv
19.9268 187.227 19.8291 186.666 19.6416 186.29 cv
19.4468 185.916 19.1616 185.728 18.7793 185.728 cv
18.7793 185.143 mo
19.3867 185.143 19.8521 185.391 20.1816 185.871 cv
20.5044 186.358 20.6694 187.063 20.6694 187.978 cv
20.6694 188.9 20.5044 189.606 20.1816 190.085 cv
19.8521 190.565 19.3867 190.805 18.7793 190.805 cv
18.1646 190.805 17.6919 190.565 17.3691 190.085 cv
17.0469 189.606 16.8892 188.9 16.8892 187.978 cv
16.8892 187.063 17.0469 186.358 17.3691 185.871 cv
17.6919 185.391 18.1646 185.143 18.7793 185.143 cv
f
22.3545 157.122 mo
24.8545 157.122 li
f
22.3545 157.122 mo
24.8545 157.122 li
@
301.355 157.122 mo
298.855 157.122 li
f
301.355 157.122 mo
298.855 157.122 li
@
10.3252 159.18 mo
11.5327 159.18 li
11.5327 155.009 li
10.2202 155.272 li
10.2202 154.597 li
11.5254 154.334 li
12.2676 154.334 li
12.2676 159.18 li
13.4751 159.18 li
13.4751 159.802 li
10.3252 159.802 li
10.3252 159.18 li
cp
f
14.9683 158.872 mo
15.7407 158.872 li
15.7407 159.801 li
14.9683 159.801 li
14.9683 158.872 li
cp
f
17.3604 154.334 mo
20.2632 154.334 li
20.2632 154.957 li
18.0356 154.957 li
18.0356 156.299 li
18.1406 156.262 18.2529 156.231 18.3579 156.217 cv
18.4629 156.202 18.5757 156.187 18.6807 156.187 cv
19.2881 156.187 19.7681 156.359 20.1279 156.69 cv
20.4883 157.028 20.668 157.477 20.668 158.046 cv
20.668 158.639 20.4805 159.096 20.1133 159.419 cv
19.7456 159.742 19.228 159.899 18.5679 159.899 cv
18.3354 159.899 18.103 159.876 17.8633 159.846 cv
17.623 159.809 17.3833 159.757 17.1279 159.674 cv
17.1279 158.932 li
17.3457 159.052 17.5708 159.141 17.8105 159.202 cv
18.043 159.262 18.2905 159.285 18.5532 159.285 cv
18.9731 159.285 19.3105 159.18 19.5581 158.955 cv
19.7979 158.729 19.9258 158.43 19.9258 158.046 cv
19.9258 157.672 19.7979 157.372 19.5581 157.147 cv
19.3105 156.922 18.9731 156.809 18.5532 156.809 cv
18.3579 156.809 18.1558 156.832 17.9604 156.876 cv
17.7656 156.922 17.563 156.99 17.3604 157.08 cv
17.3604 154.334 li
f
22.3545 126.264 mo
24.8545 126.264 li
f
22.3545 126.264 mo
24.8545 126.264 li
@
301.355 126.264 mo
298.855 126.264 li
f
301.355 126.264 mo
298.855 126.264 li
@
10.4058 128.372 mo
12.9858 128.372 li
12.9858 128.994 li
9.51318 128.994 li
9.51318 128.372 li
9.79102 128.086 10.1733 127.696 10.6606 127.201 cv
11.1411 126.714 11.4482 126.399 11.5757 126.256 cv
11.8159 125.994 11.981 125.768 12.0708 125.581 cv
12.1606 125.401 12.2134 125.213 12.2134 125.034 cv
12.2134 124.749 12.1084 124.508 11.9058 124.329 cv
11.7036 124.149 11.4409 124.051 11.1108 124.051 cv
10.8784 124.051 10.6309 124.096 10.376 124.17 cv
10.1211 124.253 9.84326 124.374 9.55078 124.539 cv
9.55078 123.789 li
9.85107 123.668 10.1284 123.579 10.3833 123.518 cv
10.6382 123.459 10.8784 123.428 11.0957 123.428 cv
11.6582 123.428 12.1084 123.571 12.4458 123.856 cv
12.7832 124.141 12.9561 124.516 12.9561 124.989 cv
12.9561 125.213 12.9106 125.431 12.8286 125.625 cv
12.7461 125.829 12.5957 126.069 12.3711 126.338 cv
12.311 126.414 12.1157 126.616 11.7856 126.954 cv
11.4561 127.292 10.9985 127.763 10.4058 128.372 cv
f
14.5381 128.063 mo
15.3105 128.063 li
15.3105 128.993 li
14.5381 128.993 li
14.5381 128.063 li
cp
f
18.5059 124.014 mo
18.1235 124.014 17.8384 124.202 17.6436 124.577 cv
17.4482 124.952 17.3584 125.514 17.3584 126.264 cv
17.3584 127.014 17.4482 127.577 17.6436 127.952 cv
17.8384 128.327 18.1235 128.514 18.5059 128.514 cv
18.8882 128.514 19.1733 128.327 19.3682 127.952 cv
19.5557 127.577 19.6533 127.014 19.6533 126.264 cv
19.6533 125.514 19.5557 124.952 19.3682 124.577 cv
19.1733 124.202 18.8882 124.014 18.5059 124.014 cv
18.5059 123.428 mo
19.1133 123.428 19.5786 123.676 19.9082 124.157 cv
20.231 124.643 20.396 125.348 20.396 126.264 cv
20.396 127.186 20.231 127.891 19.9082 128.372 cv
19.5786 128.851 19.1133 129.091 18.5059 129.091 cv
17.8911 129.091 17.4185 128.851 17.0957 128.372 cv
16.7734 127.891 16.6157 127.186 16.6157 126.264 cv
16.6157 125.348 16.7734 124.643 17.0957 124.157 cv
17.4185 123.676 17.8911 123.428 18.5059 123.428 cv
f
22.3545 95.4072 mo
24.8545 95.4072 li
f
22.3545 95.4072 mo
24.8545 95.4072 li
@
301.355 95.4072 mo
298.855 95.4072 li
f
301.355 95.4072 mo
298.855 95.4072 li
@
10.562 97.5142 mo
13.1421 97.5142 li
13.1421 98.1362 li
9.66943 98.1362 li
9.66943 97.5142 li
9.94727 97.229 10.3296 96.8389 10.8169 96.3442 cv
11.2974 95.8564 11.6045 95.5415 11.7319 95.3989 cv
11.9722 95.1367 12.1372 94.9116 12.2271 94.7241 cv
12.3169 94.5439 12.3696 94.3564 12.3696 94.1763 cv
12.3696 93.8916 12.2646 93.6514 12.062 93.4717 cv
11.8599 93.2915 11.5972 93.1938 11.2671 93.1938 cv
11.0347 93.1938 10.7871 93.2388 10.5322 93.314 cv
10.2773 93.3965 9.99951 93.5166 9.70703 93.6816 cv
9.70703 92.9316 li
10.0073 92.8115 10.2847 92.7217 10.5396 92.6616 cv
10.7944 92.6016 11.0347 92.5718 11.252 92.5718 cv
11.8145 92.5718 12.2646 92.7139 12.6021 92.999 cv
12.9395 93.2842 13.1123 93.6592 13.1123 94.1313 cv
13.1123 94.3564 13.0669 94.5737 12.9849 94.769 cv
12.9023 94.9717 12.752 95.2114 12.5273 95.4814 cv
12.4673 95.5566 12.272 95.7593 11.9419 96.0967 cv
11.6123 96.4341 11.1548 96.9067 10.562 97.5142 cv
f
14.6943 97.2061 mo
15.4668 97.2061 li
15.4668 98.1362 li
14.6943 98.1362 li
14.6943 97.2061 li
cp
f
17.0869 92.6689 mo
19.9897 92.6689 li
19.9897 93.2915 li
17.7622 93.2915 li
17.7622 94.6343 li
17.8672 94.5967 17.9795 94.5664 18.0845 94.5518 cv
18.1895 94.5366 18.3022 94.5215 18.4072 94.5215 cv
19.0146 94.5215 19.4946 94.6938 19.8545 95.0239 cv
20.2148 95.3618 20.3945 95.8115 20.3945 96.3813 cv
20.3945 96.9741 20.207 97.4316 19.8398 97.7539 cv
19.4722 98.0767 18.9546 98.2339 18.2944 98.2339 cv
18.062 98.2339 17.8296 98.2114 17.5898 98.1816 cv
17.3496 98.144 17.1099 98.0913 16.8545 98.0093 cv
16.8545 97.2666 li
17.0723 97.3867 17.2974 97.4766 17.5371 97.5366 cv
17.7695 97.5967 18.0171 97.6191 18.2798 97.6191 cv
18.6997 97.6191 19.0371 97.5142 19.2847 97.2891 cv
19.5244 97.064 19.6523 96.7642 19.6523 96.3813 cv
19.6523 96.0063 19.5244 95.7065 19.2847 95.4814 cv
19.0371 95.2563 18.6997 95.144 18.2798 95.144 cv
18.0845 95.144 17.8823 95.1665 17.687 95.2114 cv
17.4922 95.2563 17.2896 95.3242 17.0869 95.4141 cv
17.0869 92.6689 li
f
22.3545 64.5498 mo
24.8545 64.5498 li
f
22.3545 64.5498 mo
24.8545 64.5498 li
@
301.355 64.5498 mo
298.855 64.5498 li
f
301.355 64.5498 mo
298.855 64.5498 li
@
12.04 64.332 mo
12.3926 64.4067 12.6699 64.5645 12.8652 64.8042 cv
13.0601 65.0444 13.165 65.3442 13.165 65.6895 cv
13.165 66.2295 12.9775 66.6494 12.6104 66.9419 cv
12.2349 67.2344 11.71 67.377 11.0278 67.377 cv
10.7949 67.377 10.5552 67.3545 10.3149 67.3096 cv
10.0752 67.272 9.82031 67.2046 9.56494 67.1147 cv
9.56494 66.4019 li
9.76758 66.522 9.99268 66.6118 10.2402 66.6719 cv
10.48 66.7319 10.7354 66.7622 11.0054 66.7622 cv
11.4702 66.7622 11.8228 66.6719 12.0625 66.4917 cv
12.3027 66.312 12.4302 66.042 12.4302 65.6895 cv
12.4302 65.3745 12.3174 65.1196 12.0928 64.9395 cv
11.8677 64.7593 11.5527 64.6621 11.1475 64.6621 cv
10.5103 64.6621 li
10.5103 64.0542 li
11.1777 64.0542 li
11.5376 64.0542 11.8149 63.9868 12.0103 63.8369 cv
12.2051 63.6943 12.3027 63.4844 12.3027 63.207 cv
12.3027 62.9292 12.1978 62.7119 12.0024 62.562 cv
11.8003 62.4121 11.5151 62.3369 11.1475 62.3369 cv
10.9453 62.3369 10.7275 62.3594 10.4951 62.4043 cv
10.2627 62.4497 10.0078 62.5171 9.72998 62.6069 cv
9.72998 61.9468 li
10.0078 61.8721 10.27 61.812 10.5176 61.7744 cv
10.7578 61.7368 10.9902 61.7144 11.2153 61.7144 cv
11.77 61.7144 12.2124 61.8418 12.5425 62.0972 cv
12.8726 62.3521 13.0376 62.6968 13.0376 63.1318 cv
13.0376 63.4321 12.9478 63.687 12.7749 63.897 cv
12.6025 64.1069 12.355 64.2568 12.04 64.332 cv
f
14.5674 66.3491 mo
15.3398 66.3491 li
15.3398 67.2793 li
14.5674 67.2793 li
14.5674 66.3491 li
cp
f
18.5352 62.2993 mo
18.1528 62.2993 17.8677 62.4868 17.6729 62.8618 cv
17.4775 63.2368 17.3877 63.7993 17.3877 64.5493 cv
17.3877 65.2993 17.4775 65.8618 17.6729 66.2368 cv
17.8677 66.6118 18.1528 66.7993 18.5352 66.7993 cv
18.9175 66.7993 19.2026 66.6118 19.3975 66.2368 cv
19.585 65.8618 19.6826 65.2993 19.6826 64.5493 cv
19.6826 63.7993 19.585 63.2368 19.3975 62.8618 cv
19.2026 62.4868 18.9175 62.2993 18.5352 62.2993 cv
18.5352 61.7144 mo
19.1426 61.7144 19.6079 61.9619 19.9375 62.4419 cv
20.2603 62.9297 20.4253 63.6343 20.4253 64.5493 cv
20.4253 65.4722 20.2603 66.1772 19.9375 66.6567 cv
19.6079 67.1372 19.1426 67.377 18.5352 67.377 cv
17.9204 67.377 17.4478 67.1372 17.125 66.6567 cv
16.8027 66.1772 16.645 65.4722 16.645 64.5493 cv
16.645 63.6343 16.8027 62.9297 17.125 62.4419 cv
17.4478 61.9619 17.9204 61.7144 18.5352 61.7144 cv
f
22.3545 33.6929 mo
24.8545 33.6929 li
f
22.3545 33.6929 mo
24.8545 33.6929 li
@
301.355 33.6929 mo
298.855 33.6929 li
f
301.355 33.6929 mo
298.855 33.6929 li
@
12.1963 33.4746 mo
12.5488 33.5498 12.8262 33.7075 13.0215 33.9473 cv
13.2163 34.187 13.3213 34.4873 13.3213 34.8325 cv
13.3213 35.3721 13.1338 35.7925 12.7666 36.085 cv
12.3911 36.3774 11.8662 36.52 11.1841 36.52 cv
10.9512 36.52 10.7114 36.4971 10.4712 36.4521 cv
10.2314 36.4146 9.97656 36.3472 9.72119 36.2573 cv
9.72119 35.5449 li
9.92383 35.6646 10.1489 35.7549 10.3965 35.8149 cv
10.6362 35.8745 10.8916 35.9048 11.1616 35.9048 cv
11.6265 35.9048 11.979 35.8149 12.2188 35.6348 cv
12.459 35.4546 12.5864 35.1846 12.5864 34.8325 cv
12.5864 34.5171 12.4736 34.2622 12.249 34.0825 cv
12.0239 33.9023 11.709 33.8047 11.3037 33.8047 cv
10.6665 33.8047 li
10.6665 33.1973 li
11.334 33.1973 li
11.6938 33.1973 11.9712 33.1299 12.1665 32.98 cv
12.3613 32.8374 12.459 32.6274 12.459 32.3496 cv
12.459 32.0723 12.354 31.855 12.1587 31.7046 cv
11.9565 31.5547 11.6714 31.48 11.3037 31.48 cv
11.1016 31.48 10.8838 31.5024 10.6514 31.5474 cv
10.4189 31.5923 10.1641 31.6597 9.88623 31.7495 cv
9.88623 31.0898 li
10.1641 31.0146 10.4263 30.9546 10.6738 30.9175 cv
10.9141 30.8799 11.1465 30.8574 11.3716 30.8574 cv
11.9263 30.8574 12.3687 30.9849 12.6987 31.2397 cv
13.0288 31.4946 13.1938 31.8398 13.1938 32.2749 cv
13.1938 32.5747 13.104 32.8296 12.9312 33.0396 cv
12.7588 33.2495 12.5112 33.3999 12.1963 33.4746 cv
f
14.7236 35.4927 mo
15.4961 35.4927 li
15.4961 36.4224 li
14.7236 36.4224 li
14.7236 35.4927 li
cp
f
17.1162 30.9546 mo
20.019 30.9546 li
20.019 31.5771 li
17.7915 31.5771 li
17.7915 32.9194 li
17.8965 32.8823 18.0088 32.8521 18.1138 32.8369 cv
18.2188 32.8223 18.3315 32.8071 18.4365 32.8071 cv
19.0439 32.8071 19.5239 32.9795 19.8838 33.3096 cv
20.2437 33.647 20.4238 34.0972 20.4238 34.667 cv
20.4238 35.2598 20.2363 35.7173 19.8687 36.0396 cv
19.5015 36.3618 18.9839 36.5195 18.3237 36.5195 cv
18.0913 36.5195 17.8589 36.4971 17.6187 36.4673 cv
17.3789 36.4297 17.1387 36.377 16.8838 36.2944 cv
16.8838 35.5522 li
17.1016 35.6719 17.3262 35.7622 17.5664 35.8223 cv
17.7988 35.8823 18.0464 35.9048 18.3091 35.9048 cv
18.729 35.9048 19.0664 35.7993 19.314 35.5747 cv
19.5537 35.3496 19.6812 35.0493 19.6812 34.667 cv
19.6812 34.292 19.5537 33.9922 19.314 33.7671 cv
19.0664 33.542 18.729 33.4297 18.3091 33.4297 cv
18.1138 33.4297 17.9116 33.4521 17.7163 33.4971 cv
17.5215 33.542 17.3188 33.6099 17.1162 33.6997 cv
17.1162 30.9546 li
f
22.3545 2.83545 mo
24.8545 2.83545 li
f
22.3545 2.83545 mo
24.8545 2.83545 li
@
301.355 2.83545 mo
298.855 2.83545 li
f
301.355 2.83545 mo
298.855 2.83545 li
@
11.625 .742676 mo
9.75732 3.66016 li
11.625 3.66016 li
11.625 .742676 li
11.4302 .0976563 mo
12.3599 .0976563 li
12.3599 3.66016 li
13.1401 3.66016 li
13.1401 4.2749 li
12.3599 4.2749 li
12.3599 5.56494 li
11.625 5.56494 li
11.625 4.2749 li
9.15771 4.2749 li
9.15771 3.5625 li
11.4302 .0976563 li
cp
f
14.3628 4.63477 mo
15.1353 4.63477 li
15.1353 5.56494 li
14.3628 5.56494 li
14.3628 4.63477 li
cp
f
18.3301 .584961 mo
17.9478 .584961 17.6626 .772461 17.4678 1.14746 cv
17.2725 1.52246 17.1826 2.08496 17.1826 2.83496 cv
17.1826 3.58496 17.2725 4.14746 17.4678 4.52246 cv
17.6626 4.89746 17.9478 5.08496 18.3301 5.08496 cv
18.7124 5.08496 18.9976 4.89746 19.1924 4.52246 cv
19.3799 4.14746 19.4775 3.58496 19.4775 2.83496 cv
19.4775 2.08496 19.3799 1.52246 19.1924 1.14746 cv
18.9976 .772461 18.7124 .584961 18.3301 .584961 cv
18.3301 0 mo
18.9375 0 19.4023 .247559 19.7324 .727539 cv
20.0552 1.21484 20.2202 1.91992 20.2202 2.83496 cv
20.2202 3.75732 20.0552 4.4624 19.7324 4.94238 cv
19.4023 5.42236 18.9375 5.6626 18.3301 5.6626 cv
17.7148 5.6626 17.2427 5.42236 16.9199 4.94238 cv
16.5977 4.4624 16.4399 3.75732 16.4399 2.83496 cv
16.4399 1.91992 16.5977 1.21484 16.9199 .727539 cv
17.2427 .247559 17.7148 0 18.3301 0 cv
f
4.47754 110.417 mo
4.95752 110.613 5.28027 110.8 5.43018 110.98 cv
5.58008 111.161 5.65527 111.401 5.65527 111.7 cv
5.65527 112.241 li
5.09277 112.241 li
5.09277 111.842 li
5.09277 111.663 5.04736 111.52 4.95752 111.416 cv
4.86768 111.31 4.66504 111.198 4.33496 111.071 cv
4.03516 110.95 li
0 112.607 li
0 111.895 li
3.20996 110.613 li
0 109.331 li
0 108.618 li
4.47754 110.417 li
f
.625 lw
2 lc
22.3545 2.83545 mo
301.354 2.83545 li
@
301.355 218.835 mo
301.355 2.83545 li
@
22.3545 218.835 mo
301.354 218.835 li
@
22.3545 218.835 mo
22.3545 2.83545 li
@
192.248 124.308 mo
296.854 124.308 li
296.854 97.3638 li
192.248 97.3638 li
192.248 124.308 li
cp
0 0 0 0 cmyk
f
192.248 124.308 mo
296.854 124.308 li
296.854 97.3638 li
192.248 97.3638 li
192.248 124.308 li
cp
0 0 0 1 cmyk
@
198.547 104.464 mo
211.147 104.464 li
.884 .769 0 0 cmyk
@
221.929 101.053 mo
222.82 101.053 li
222.82 103.744 li
226.042 103.744 li
226.042 101.053 li
226.933 101.053 li
226.933 107.614 li
226.042 107.614 li
226.042 104.491 li
222.82 104.491 li
222.82 107.614 li
221.929 107.614 li
221.929 101.053 li
cp
0 0 0 1 cmyk
f
230.903 105.139 mo
230.246 105.139 229.795 105.22 229.543 105.364 cv
229.292 105.517 229.166 105.769 229.166 106.129 cv
229.166 106.417 229.255 106.651 229.444 106.813 cv
229.633 106.984 229.894 107.065 230.218 107.065 cv
230.668 107.065 231.028 106.913 231.298 106.587 cv
231.568 106.272 231.703 105.85 231.703 105.319 cv
231.703 105.139 li
230.903 105.139 li
232.513 104.806 mo
232.513 107.614 li
231.703 107.614 li
231.703 106.868 li
231.514 107.172 231.28 107.389 231.01 107.524 cv
230.741 107.659 230.398 107.731 230.002 107.731 cv
229.499 107.731 229.093 107.596 228.796 107.317 cv
228.5 107.038 228.356 106.66 228.356 106.183 cv
228.356 105.634 228.536 105.22 228.913 104.932 cv
229.283 104.653 229.832 104.509 230.569 104.509 cv
231.703 104.509 li
231.703 104.428 li
231.703 104.059 231.578 103.771 231.334 103.564 cv
231.091 103.366 230.75 103.258 230.309 103.258 cv
230.021 103.258 229.75 103.294 229.481 103.366 cv
229.21 103.438 228.958 103.537 228.715 103.663 cv
228.715 102.916 li
229.003 102.808 229.292 102.718 229.571 102.664 cv
229.849 102.61 230.12 102.574 230.389 102.574 cv
231.1 102.574 231.631 102.763 231.982 103.132 cv
232.333 103.5 232.513 104.059 232.513 104.806 cv
f
237.032 103.447 mo
236.941 103.393 236.842 103.357 236.734 103.33 cv
236.626 103.312 236.509 103.294 236.383 103.294 cv
235.924 103.294 235.574 103.447 235.331 103.744 cv
235.079 104.041 234.96 104.464 234.96 105.022 cv
234.96 107.614 li
234.152 107.614 li
234.152 102.691 li
234.96 102.691 li
234.96 103.456 li
235.124 103.159 235.348 102.934 235.619 102.79 cv
235.888 102.646 236.221 102.574 236.618 102.574 cv
236.671 102.574 236.734 102.583 236.806 102.583 cv
236.869 102.592 236.941 102.601 237.032 102.619 cv
237.032 103.447 li
f
241.711 103.636 mo
241.91 103.276 242.153 103.015 242.431 102.834 cv
242.71 102.664 243.043 102.574 243.43 102.574 cv
243.935 102.574 244.33 102.754 244.61 103.114 cv
244.888 103.474 245.033 103.987 245.033 104.644 cv
245.033 107.614 li
244.222 107.614 li
244.222 104.671 li
244.222 104.203 244.132 103.852 243.97 103.618 cv
243.799 103.393 243.547 103.276 243.206 103.276 cv
242.783 103.276 242.45 103.419 242.207 103.699 cv
241.963 103.978 241.847 104.356 241.847 104.833 cv
241.847 107.614 li
241.037 107.614 li
241.037 104.671 li
241.037 104.203 240.946 103.852 240.785 103.618 cv
240.614 103.393 240.352 103.276 240.01 103.276 cv
239.596 103.276 239.263 103.419 239.02 103.699 cv
238.778 103.978 238.661 104.356 238.661 104.833 cv
238.661 107.614 li
237.85 107.614 li
237.85 102.691 li
238.661 102.691 li
238.661 103.456 li
238.84 103.159 239.066 102.934 239.327 102.79 cv
239.579 102.646 239.884 102.574 240.245 102.574 cv
240.604 102.574 240.901 102.664 241.153 102.844 cv
241.406 103.024 241.585 103.294 241.711 103.636 cv
f
248.551 103.258 mo
248.12 103.258 247.778 103.429 247.525 103.771 cv
247.273 104.113 247.148 104.572 247.148 105.157 cv
247.148 105.751 247.264 106.21 247.516 106.552 cv
247.768 106.894 248.111 107.056 248.551 107.056 cv
248.983 107.056 249.325 106.894 249.578 106.552 cv
249.83 106.21 249.955 105.751 249.955 105.157 cv
249.955 104.581 249.83 104.113 249.578 103.771 cv
249.325 103.429 248.983 103.258 248.551 103.258 cv
248.551 102.574 mo
249.253 102.574 249.802 102.808 250.207 103.258 cv
250.603 103.717 250.81 104.347 250.81 105.157 cv
250.81 105.966 250.603 106.597 250.207 107.047 cv
249.802 107.506 249.253 107.731 248.551 107.731 cv
247.84 107.731 247.283 107.506 246.886 107.047 cv
246.49 106.597 246.292 105.966 246.292 105.157 cv
246.292 104.347 246.49 103.717 246.886 103.258 cv
247.283 102.808 247.84 102.574 248.551 102.574 cv
f
256.247 104.644 mo
256.247 107.614 li
255.436 107.614 li
255.436 104.671 li
255.436 104.203 255.337 103.861 255.158 103.627 cv
254.977 103.393 254.708 103.276 254.347 103.276 cv
253.907 103.276 253.564 103.42 253.313 103.699 cv
253.06 103.978 252.934 104.356 252.934 104.833 cv
252.934 107.614 li
252.125 107.614 li
252.125 102.691 li
252.934 102.691 li
252.934 103.456 li
253.124 103.168 253.348 102.943 253.619 102.799 cv
253.879 102.655 254.185 102.574 254.527 102.574 cv
255.085 102.574 255.517 102.754 255.805 103.105 cv
256.093 103.456 256.247 103.969 256.247 104.644 cv
f
257.858 102.691 mo
258.667 102.691 li
258.667 107.614 li
257.858 107.614 li
257.858 102.691 li
cp
257.858 100.774 mo
258.667 100.774 li
258.667 101.8 li
257.858 101.8 li
257.858 100.774 li
cp
f
263.906 102.88 mo
263.906 103.636 li
263.671 103.51 263.447 103.42 263.212 103.357 cv
262.978 103.293 262.753 103.257 262.519 103.257 cv
261.998 103.257 261.583 103.429 261.295 103.762 cv
261.007 104.095 260.864 104.563 260.864 105.157 cv
260.864 105.76 261.007 106.228 261.295 106.561 cv
261.583 106.893 261.998 107.056 262.519 107.056 cv
262.753 107.056 262.978 107.029 263.212 106.966 cv
263.447 106.903 263.671 106.804 263.906 106.678 cv
263.906 107.424 li
263.671 107.534 263.437 107.614 263.204 107.659 cv
262.96 107.704 262.699 107.731 262.429 107.731 cv
261.692 107.731 261.097 107.505 260.666 107.038 cv
260.224 106.579 260.008 105.949 260.008 105.157 cv
260.008 104.355 260.224 103.726 260.666 103.267 cv
261.106 102.808 261.709 102.574 262.484 102.574 cv
262.735 102.574 262.978 102.601 263.212 102.655 cv
263.447 102.708 263.68 102.781 263.906 102.88 cv
f
271.313 102.835 mo
271.313 103.6 li
271.079 103.492 270.844 103.402 270.601 103.339 cv
270.349 103.285 270.097 103.249 269.836 103.249 cv
269.431 103.249 269.125 103.312 268.927 103.438 cv
268.729 103.564 268.63 103.744 268.63 103.987 cv
268.63 104.176 268.702 104.32 268.846 104.428 cv
268.99 104.536 269.278 104.644 269.71 104.734 cv
269.99 104.796 li
270.566 104.923 270.97 105.103 271.213 105.319 cv
271.448 105.543 271.573 105.858 271.573 106.255 cv
271.573 106.714 271.393 107.075 271.034 107.334 cv
270.673 107.605 270.169 107.731 269.54 107.731 cv
269.269 107.731 269 107.704 268.711 107.659 cv
268.423 107.614 268.126 107.542 267.811 107.434 cv
267.811 106.597 li
268.108 106.759 268.406 106.875 268.694 106.948 cv
268.982 107.028 269.269 107.065 269.557 107.065 cv
269.936 107.065 270.232 107.001 270.439 106.875 cv
270.637 106.75 270.746 106.561 270.746 106.318 cv
270.746 106.102 270.665 105.931 270.52 105.814 cv
270.376 105.697 270.052 105.58 269.548 105.472 cv
269.269 105.409 li
268.766 105.301 268.396 105.139 268.18 104.923 cv
267.956 104.708 267.847 104.41 267.847 104.023 cv
267.847 103.564 268.009 103.204 268.333 102.952 cv
268.658 102.7 269.125 102.574 269.737 102.574 cv
270.035 102.574 270.313 102.601 270.583 102.646 cv
270.844 102.691 271.087 102.754 271.313 102.835 cv
f
277.073 104.95 mo
277.073 105.346 li
273.356 105.346 li
273.391 105.904 273.553 106.335 273.859 106.624 cv
274.156 106.912 274.571 107.056 275.11 107.056 cv
275.417 107.056 275.722 107.02 276.01 106.948 cv
276.298 106.876 276.595 106.759 276.883 106.597 cv
276.883 107.362 li
276.595 107.488 276.298 107.586 275.992 107.641 cv
275.686 107.695 275.372 107.731 275.066 107.731 cv
274.273 107.731 273.652 107.505 273.193 107.056 cv
272.734 106.605 272.509 105.985 272.509 105.202 cv
272.509 104.401 272.725 103.762 273.158 103.285 cv
273.589 102.817 274.183 102.574 274.921 102.574 cv
275.587 102.574 276.109 102.79 276.497 103.213 cv
276.875 103.645 277.073 104.221 277.073 104.95 cv
276.262 104.715 mo
276.253 104.275 276.127 103.924 275.893 103.654 cv
275.651 103.393 275.326 103.257 274.93 103.257 cv
274.481 103.257 274.12 103.393 273.85 103.645 cv
273.581 103.897 273.418 104.257 273.382 104.715 cv
276.262 104.715 li
f
281.249 103.447 mo
281.158 103.393 281.059 103.357 280.951 103.33 cv
280.843 103.312 280.727 103.294 280.6 103.294 cv
280.142 103.294 279.791 103.447 279.547 103.744 cv
279.295 104.041 279.178 104.464 279.178 105.022 cv
279.178 107.614 li
278.369 107.614 li
278.369 102.691 li
279.178 102.691 li
279.178 103.456 li
279.34 103.159 279.565 102.934 279.835 102.79 cv
280.105 102.646 280.439 102.574 280.834 102.574 cv
280.888 102.574 280.951 102.583 281.024 102.583 cv
281.086 102.592 281.158 102.601 281.249 102.619 cv
281.249 103.447 li
f
282.094 102.691 mo
282.905 102.691 li
282.905 107.614 li
282.094 107.614 li
282.094 102.691 li
cp
282.094 100.774 mo
282.905 100.774 li
282.905 101.8 li
282.094 101.8 li
282.094 100.774 li
cp
f
288.808 104.95 mo
288.808 105.346 li
285.091 105.346 li
285.127 105.904 285.29 106.335 285.595 106.624 cv
285.893 106.912 286.306 107.056 286.846 107.056 cv
287.153 107.056 287.458 107.02 287.747 106.948 cv
288.035 106.876 288.332 106.759 288.619 106.597 cv
288.619 107.362 li
288.332 107.488 288.035 107.586 287.728 107.641 cv
287.422 107.695 287.107 107.731 286.801 107.731 cv
286.009 107.731 285.388 107.505 284.929 107.056 cv
284.471 106.605 284.246 105.985 284.246 105.202 cv
284.246 104.401 284.461 103.762 284.893 103.285 cv
285.326 102.817 285.919 102.574 286.658 102.574 cv
287.324 102.574 287.845 102.79 288.232 103.213 cv
288.611 103.645 288.808 104.221 288.808 104.95 cv
287.999 104.715 mo
287.989 104.275 287.863 103.924 287.628 103.654 cv
287.386 103.393 287.062 103.257 286.667 103.257 cv
286.216 103.257 285.856 103.393 285.586 103.645 cv
285.317 103.897 285.154 104.257 285.119 104.715 cv
287.999 104.715 li
f
293.272 102.835 mo
293.272 103.6 li
293.039 103.492 292.804 103.402 292.561 103.339 cv
292.309 103.285 292.057 103.249 291.796 103.249 cv
291.391 103.249 291.085 103.312 290.887 103.438 cv
290.689 103.564 290.59 103.744 290.59 103.987 cv
290.59 104.176 290.663 104.32 290.807 104.428 cv
290.951 104.536 291.239 104.644 291.67 104.734 cv
291.95 104.796 li
292.526 104.923 292.93 105.103 293.173 105.319 cv
293.408 105.543 293.534 105.858 293.534 106.255 cv
293.534 106.714 293.354 107.075 292.994 107.334 cv
292.633 107.605 292.129 107.731 291.5 107.731 cv
291.229 107.731 290.959 107.704 290.671 107.659 cv
290.383 107.614 290.086 107.542 289.771 107.434 cv
289.771 106.597 li
290.069 106.759 290.366 106.875 290.654 106.948 cv
290.942 107.028 291.229 107.065 291.517 107.065 cv
291.896 107.065 292.193 107.001 292.4 106.875 cv
292.597 106.75 292.706 106.561 292.706 106.318 cv
292.706 106.102 292.625 105.931 292.48 105.814 cv
292.336 105.697 292.012 105.58 291.508 105.472 cv
291.229 105.409 li
290.725 105.301 290.356 105.139 290.14 104.923 cv
289.916 104.708 289.807 104.41 289.807 104.023 cv
289.807 103.564 289.969 103.204 290.293 102.952 cv
290.618 102.7 291.085 102.574 291.698 102.574 cv
291.995 102.574 292.273 102.601 292.543 102.646 cv
292.804 102.691 293.047 102.754 293.272 102.835 cv
f
198.547 117.43 mo
211.147 117.43 li
.873 .242 1 .129 cmyk
@
221.894 113.741 mo
222.704 113.741 li
222.704 120.581 li
221.894 120.581 li
221.894 113.741 li
cp
0 0 0 1 cmyk
f
228.491 117.61 mo
228.491 120.581 li
227.68 120.581 li
227.68 117.638 li
227.68 117.17 227.582 116.827 227.402 116.594 cv
227.221 116.36 226.952 116.243 226.591 116.243 cv
226.15 116.243 225.808 116.387 225.556 116.666 cv
225.304 116.945 225.178 117.323 225.178 117.799 cv
225.178 120.581 li
224.369 120.581 li
224.369 115.658 li
225.178 115.658 li
225.178 116.422 li
225.367 116.135 225.592 115.909 225.862 115.766 cv
226.124 115.622 226.429 115.541 226.772 115.541 cv
227.33 115.541 227.761 115.721 228.049 116.072 cv
228.337 116.422 228.491 116.936 228.491 117.61 cv
f
237.058 117.61 mo
237.058 120.581 li
236.249 120.581 li
236.249 117.638 li
236.249 117.17 236.15 116.827 235.969 116.594 cv
235.79 116.36 235.519 116.243 235.16 116.243 cv
234.718 116.243 234.376 116.387 234.125 116.666 cv
233.873 116.945 233.747 117.323 233.747 117.799 cv
233.747 120.581 li
232.936 120.581 li
232.936 115.658 li
233.747 115.658 li
233.747 116.422 li
233.935 116.135 234.161 115.909 234.43 115.766 cv
234.692 115.622 234.998 115.541 235.339 115.541 cv
235.898 115.541 236.33 115.721 236.617 116.072 cv
236.906 116.422 237.058 116.936 237.058 117.61 cv
f
244.825 114.938 mo
244.825 117.385 li
247.273 117.385 li
247.273 118.133 li
244.825 118.133 li
244.825 120.581 li
244.087 120.581 li
244.087 118.133 li
241.639 118.133 li
241.639 117.385 li
244.087 117.385 li
244.087 114.938 li
244.825 114.938 li
cp
f
253.951 114.604 mo
253.493 114.604 253.151 114.83 252.917 115.28 cv
252.682 115.73 252.574 116.405 252.574 117.305 cv
252.574 118.206 252.682 118.879 252.917 119.331 cv
253.151 119.78 253.493 120.005 253.951 120.005 cv
254.41 120.005 254.752 119.78 254.986 119.331 cv
255.211 118.879 255.328 118.206 255.328 117.305 cv
255.328 116.405 255.211 115.73 254.986 115.28 cv
254.752 114.83 254.41 114.604 253.951 114.604 cv
253.951 113.903 mo
254.68 113.903 255.239 114.2 255.634 114.776 cv
256.022 115.361 256.219 116.207 256.219 117.305 cv
256.219 118.413 256.022 119.258 255.634 119.834 cv
255.239 120.41 254.68 120.698 253.951 120.698 cv
253.213 120.698 252.646 120.41 252.259 119.834 cv
251.873 119.258 251.683 118.413 251.683 117.305 cv
251.683 116.207 251.873 115.361 252.259 114.776 cv
252.646 114.2 253.213 113.903 253.951 113.903 cv
f
257.776 119.465 mo
258.704 119.465 li
258.704 120.581 li
257.776 120.581 li
257.776 119.465 li
cp
f
260.647 114.02 mo
264.129 114.02 li
264.129 114.766 li
261.458 114.766 li
261.458 116.377 li
261.583 116.333 261.718 116.297 261.844 116.278 cv
261.97 116.261 262.105 116.243 262.231 116.243 cv
262.959 116.243 263.536 116.45 263.968 116.845 cv
264.4 117.25 264.617 117.791 264.617 118.475 cv
264.617 119.186 264.391 119.735 263.95 120.122 cv
263.509 120.508 262.888 120.698 262.096 120.698 cv
261.817 120.698 261.539 120.67 261.25 120.635 cv
260.962 120.59 260.674 120.527 260.369 120.428 cv
260.369 119.537 li
260.629 119.681 260.899 119.789 261.187 119.861 cv
261.466 119.933 261.763 119.959 262.078 119.959 cv
262.583 119.959 262.988 119.834 263.285 119.563 cv
263.573 119.293 263.725 118.934 263.725 118.475 cv
263.725 118.025 263.573 117.665 263.285 117.394 cv
262.988 117.125 262.583 116.99 262.078 116.99 cv
261.844 116.99 261.601 117.016 261.368 117.071 cv
261.133 117.125 260.89 117.206 260.647 117.314 cv
260.647 114.02 li
f
266.137 114.02 mo
270.358 114.02 li
270.358 114.397 li
267.973 120.581 li
267.046 120.581 li
269.288 114.766 li
266.137 114.766 li
266.137 114.02 li
cp
f
271.861 114.02 mo
276.083 114.02 li
276.083 114.397 li
273.698 120.581 li
272.77 120.581 li
275.011 114.766 li
271.861 114.766 li
271.861 114.02 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x008.eps)%%CreationDate: 26/05/15 4:59 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^Ch$u=*1Vl23G2iSD/Nk!KR'/7Isf;N.YVb_dh.skBD:,,Y/*r:/sT&*;H6:7V:3E/Y[)1U5Du*4XsQS+%8BS6,<"qKpl9Z\chJJiCqX-+!>u3C,R$.qE7]!M_TkRD&e]aO1ap*0qgj("@1tmT2?K]#Ln!?);:9VF$/H&ji-]`#7kXd@Of4_QQ%s%*u1[J0,X]!/*H<1C!Z[F>#P%?dHQ'*'FQ0?%A+<BhQ(]JY#98_Gp$/AGSW=+,`0TnVq<][qUN%I9!PKX=V6qa$;?n3DK>h_,n#%!GVn76psG/Np[C%!YL[r\+jq!ph]X/^"T.4Bg60BQ+]reVq1`7Y7'PY9pCgP.?S80NLt*h2J?J>ab#s[&ZPQSr_?+\7cI=/L)u.S%;Dk,#c5L<$Y45T"nXn@mDPL6NoE^3Z]tm//Ii?ZCMBJ!Vo&P2NC@n[_blOP6#*;DYFO[9K>,X4BrG&D,8R$]VfUntTAZb^[(naXm%["cs$eYL#r5[A>2qn(6#gk,r/\rHDpk8I:0U*63b'G^CU$:`Gt%+IV\W2-@A<e[:H8alcs^ql,uW,#.*B:\[`T?[)0O^+#JdYBot%B&2lA>tQ$r"4Nku\Go:s59U`KGq`p=.H*gp8k1c\6-('PO:!VTOI3Fk9uJ__6?j*#6(3^&(u"**TXL<=ACWq.o&"!JmfA61JH!YG%HtjRIRO3EJ8dm2mn5kq7W@Yqc=XHqF<Ht"GV.iaue)6Ri5q,N\;OUXg17Y3JAP<c[QmP?3r.S%G$)QQ!HpXf1#tgITn7JX&:J)o]%;m!pcC/ra@m:mB-=0(C&68>1#cpMOn:Z5%A>Xn8fT25mK"J8Ktg;I/eSjA:m'?WRui"Ohh3'lDT2Sgd=Jel0M?m9tBR%Zt<$13J^%!/3<sSV3K.IOGBeJkmdnXTFIS%o?#G9XmX'"J=aLdW.Z;Tq0P"C'Vma+0cI>+-_BN_'`V74\/aNSrk(H^JG9ka*O+lKtIf\K2;7G%XX!cTT7h68^aG@up;&-@73X%2YG?WGOi[T"cK'cR)53+1*D-pX0tra8'C(-h65QVf?tT@+9!EeA#$T%m'3YWZP?*mFcp%5X;FJ6m%I=s!/?20(.d(2W68N%MLKQEpn,2GqIRB/)V"3QIr&6WE$K(USO4/%[RS^^=-#*cG8@;R6r6Rc%t_+ri7ccJC<3>n5QRRs+bh@L)q%r/\q&4ke">M)60Rp;g]jZ=TY!2j8SmrnqWtL=f&+H^Sm,mK]D@E>%-:\\VrjoWicL?LjsA$MY_@-!F0As!3F`Z2]u:0Qk2rq_.c3%8?44kfRM"->pmDS^Z;"qOPbf/l8Ik@6@h8(s,qlN,5H*U-3"VBEg]2Z^Z8au6@R[=aZmW<8+\h6*IO$!-,8+dne\]0;G)gM/IP1Y%Wg=)_[Aljg=fiH1OXg1gobVp$\-2crM$`&$+D!hL`8l74>B^q7<PV#fQLoc+0_@-u="T=CHq/ZtqA9)g'`4A*!q@&>X]P/#C1<d"%"VpMm*Uj@HX^%tH$C!I`pkqc[#j(hA/PBi6&g^-p?P\norDG<U-0Q#L5daFn\3\<sOog],@OX>-Tluc&N\XS:K!A>3fMmLQMcttk%Bul$6!Zb/B0">Up<F",).tgNFM'MYDXB?6<XE$bD>d^XE%[_p\;AIec#&/'d;bE)$i`8U%Rkhr.X[o7-5KJ@L;J;%.PB]QTU+r07%[SXf:2,^p>b=D]7KZ!!_RC8W8"4aAPD#E@2>$bU=ZT0.ngf2Ia#DAG>h9njoa<ajkoqd[tb>(7D\E2pkgaf2^Z8."8HH@F\9Hfj!%%3;-RRIr3`@ufK0#p,QD14@nCPK6p'h^Z8.i-&QlcstG#o#QWKaqRL&p6msm"j^7L)A*I5[9IeJ\5XUD;+rGgLW6gCqUci^P0Tl@%.4qu5OT0$U6#"[bR.H1i6DJ::$pEcCM:G?J>E$/Q#S%/E$$EI,1!4Q/`+@/ENp3LPEJRW7!RNE3/3C@uSl^.HW?]%kWUrN<'m,O*%F[SIP1+(J/W]Ym.J7eu&8,QU0H/Bl1:>aYma"JC*,%se0Qf2u3"'*'bm!^>9$"L&Ec")?",WK63A,VE[C4+hk<f&_i(6cLi1k&B4%+njdn\3ad8ghs(.ZtDF^N]1,h*@4V"Sm<3%i,)>"E0(16]MKm@V/<*e$(%oG;Qurtg&H_+laP,e1':N94[`pj9VI<d@N&2P\-ARY%In13p!p2S\:7eFMAX0pqO91h@1T(Q3SB^\cb!mLe#J`e'B[:qi)tY>LKY4:Nm?UrPSBauV7^Mo-BcN9-$a#co-'HET'e#?C0$Y(X%M^%I'XIhqY>GRtuO7=VehfW-r&nr\@#JC@)7+srg.!L^sJRAMmd.tJ_I9=*!"LphWWluT]*\oq$;]*\3_a$FAH]=pBlirAc`Kgu2%?\O[P'7,V_S/!6-U^#CW9\U3F"k0FQkj2[8a.bG\'s02T@danfn2@8bU>P%GO4\?[*g=isQ;4RYrbqWt,Bg*egN4-C9K+tK2`erL%HW?!1B!f>HgS',a[]>?"49H7a4a+sde)$Og'pN#OI@A;p#>7sP]Z/Jk/.qg)A@7NoK&_:U]L8\p^#"Ou@5_\845S#+<%?>m[?:3?%V+AY9VYe#%C*0]t"bY?ch_ms\eqo,)[_$-2H"]hl)W.>9rN1(.&!'(9IP=6^cK;2BDn!Nl[X6LF24?\634ZNj)P)_@4`/_U[-;-a%esnnDBgk-c<*0G3QW/<TG.pbm\#!*Po+>bnBG*si9(m?&2OUK,9]c5e76P:)48_p=NI)^2e%q?'l8Ak%DLNA'Ec!4GI,hRRm;^UH%M)]g_?Er[/%r;tA^8YH_=>lB*Yjad3jt0:2\,garH0TVb0NROQDGDCV7qT/Kmud<F7O`=@6R1+X9mG"OlVq`)=C]([j"3r]a'0Z6%]"iBQf]U2m,G%&Fb%>Dn,PHrRY=L3=AgQ0f!E`:3_F_9&Kq6FU(bXJ$5cEDonbc+.*PN=`ihmFr,<c]g-5&mZ<3li7SrG1!$lbaM%d5*!0Hs,m(8b=p7fWN,hKuk85Y5OU<R3U$M9J]8Obsab7Wmnp@LaPXJ-<;%Y8]IHo6onUff3u@FHn0>g?pUg=<^KQ.SQ=p;4L;c^%-PqcYYY/#>nF)_(%P$:N_b*S](dB`]:0U*XBW'H"G5']4S]#!2hK`l^071*N<%N=cp8@FEa<VQN_#AL3C^qAo>-j\)6r\$RHAs1q%LgJ(cg#);.bDhQXn&KmJ5V)6:)Qcc$6Yeu&m<\?#f'A'c5&Jj([9aK`/^0!p^X//_ifT5TL.+A]kk2QD@JCRB`)T)g!U`g<MJ@dI%A?jZufD?>$o$^/iJVE-rG_\/e?F&3&p:lcWSPI?pl[35OVdKpeo)F_2:@S_ZP;ZjrBMGja];@o5n?8krQ1hB^4o@6K0@a7.k%CmK%rG'&n<T*E&Weiir,?THq]QIE&rf8X,*9=KX)`6GVNJkRKK>p[u2W2SFZX$(QLp`^HD<If)gFeX*?aXbRiuEGHEQJRrU&'?t0X"tf%<e?U?8Y3^MK#-?H7R*#"BQsI)`]oWeM8]^qrG'7$i$jl6+4kr[a_W/NdJW7'VU-MRng#C*[JXt8m6&59oa_[O4+WL+r>Y^f7pl6<%d!q4QO??-!4:0+j!oKRs@/9i2T#_SQ\!BSI;8)0HV@YW,VD#<=VmTP-#sP6GoI]%2JHKTN-UtOeSA$@GMcM,4<u_ts,'5s)7bWA#%N71k&5TUNR!]9on"X?DfTFZ'8/)*ofB(VEPqi/0#IPp#6)n"P[pp[1KoB2*:b:u)o`f$0]UX^h;R7)+;()7P]b#MZ::@I9(UYh^j%o=%5Fa.7MYj'S=Ye*<'S>mu$5jY-W-Vq"6?<oBa4jGpn9rVWj&CIei#ao!2pL?%g^mk0$W0D'QJdO6IH5E.t2Nd*9=!TJ>,r)N&?%CMtfWNn"(f&Foc[%KDo&=L62`Il1I'?DC6<\4-O$&C%>jk1ahTKP'bL;7Z[A[9j#1$)?j:\RQjCa[n5"dpN&(PgIDFG5h_g<I`8k%-qCW9^Y93@)b)ml5Dn%%pL/Quq>%KXcgf1c*64:q<p0Fn;%Mhg]@1Zqq\[8MpDAt!*ZBdR\,g#THY_UMY2[4"I=*RE8L]HM=T6R6%+<m#>D=;uPkPqe)Yhs30s*nMS_[X0?%"%FP]O1SDfd8)g?]F42=1IcFa\#<_D=Q-4rKkSeUOKR#rmRqZ^-\;8$X-<T"RTRI/5#hR%X8WTI&^*`?GI?XQ:ZE_-2--Hj^T06lokM`UB7T?H_oB`ICt]D<>V][QFT+G*)K!:)A?nXFe,RVSg?D<k;^.e@5[[I=A4*6l/*sOn%8?(2>X4E&2)_9W.98I'*$D?>MNoXWNrAgs-2Nju/0#Z9\!fgVIm5=a"hHu9'A`LOXA>S-&eD?Xrk2:/*E_%l6oGY+=%]51g%^'EL%f?2?e[oN>&W7Lih<PI'<oEK6)>-C['<43r!5jf94/Z5.OHZ7hT?$=MMoY]b&GhVC@Tf2gJ,VSD:Td=j;<4Nfb@@Vba%in3$&gF*;%W5LK,P@05S[@?W`$^p3#o?)\TSdOX5q-XI^dme[N8:HXoTLLTfAUW#&X3p6"goSgK`h3U)/J=63>B%(#C]7,-]us-tOsZ"mm4`a(%coX>&"qtX!]Hjl8Xh@r5,>5VFqk1p)c^Atk>-_h@'1Fd#5?`&(Slims>%gsu^B88I"Va*)7e($nTB[T;NV0@9Q9ofSMt^D52G)M_%5T6@7q@4'b?#)Cr?V'I$0nKD=M\%:/,Qt@"LWj.n;qrdC1Br`[:7$=bO!duulXmn'oZG.G2J<6.Kf_'hCYVJ<CY'O*XYtP)&Gk1c%>Vt;!D(:fAQQW`ZU)'.E0F2qq0f2$scXIc]W,",B$2`;niU#@@6pMhK]h+![s1!Zn9%6s"6O[_sGADF.NS&"5]hrHm[R(A^QFKQa%MLa5l:LQ$n3LUZ7GhcaN,Zdr2#^sI=oKW2'L#5N=r,jZqg7`jN<<]SQ^VQ6(%:kC!GCrjO0$<EaW'!<e=B2DVBnucnmFqN.NpU;i%jbok%'64.eR!okFWl%kq=[q!K!tnN(1jBX^D`,/KpC>-ds-r@451)H?Vb-3OjjGo"H1i'Jb[c\N&+>VSN+Ri@Rp1urCDh(R!PMZd%d-.V0Kk`mA][^3Z0G/,ic"+<77A]n+T4&*<5K\b:UIMpWr(5TKdnca)MjM[j[4&i!i?3Ei3Ta@45g:[o6$G:ZSmt*Vs+>+MlD&bT%.?`Z9$]4&#i6rL5iLn_;2j4,*YOg$*j\Wm6G.:"ad!aF-It^_d2J?63,2?.8F=%4bDDUH"^Xd/n?..9lFp>*I5IE\_MIjtrmagZG%b8i"t,n%UVa!,Z5pH?&D5aHdc(A0XE^c;SB%7u#X47D&40C#>Co,g;QgHmB0V$=V:]AK_6a6<J?KWSBI')Oo%ea.o?OLQY&18LgF%5<!P?4<f'Z=KDPTh`JMtUH[Drao$-k&Ebc`7G`4Snp`]=3GcL_=tN2LQ&N]0dHH%C]n';[l'fTH7=,L).eFZF9eX"%@RJ>-h>CsS%IlFuX8E"q$(Lp/aV/2DY;@^71>U.fNh\.nNm!%;oa%6oRlS80()80/;TE`o0eWZQqJnubU(\]OWP+na$qMMX0$%h`8$"iW&%jJ^Y%dBlSdabsBl]m:0695l)2XVa/.[X'sW<I9?c6\<K*)\\JXJ4f#1Qi',YYY#H90g[$MeZ*b5?NHNjYlQUrfF[T<:+4S@IrDqNk0Ys?%eiWJ1"^e;+i8<VZihtp=Wr)V`S\o*+F?Vm/,g$k4GgH(i,Es6k\rk1EO?jJoEEj>0S4;=/[3nn&\/t8`*b]ZiF(CEbTCL`dY2/lS%fqB4S6>oR81NZC^0%*(DU?.HsUHQ]kLMoIV!(H1TDXX?1`?i1N:5[`LpF>dlD@Xmlhu\#)i2PV+._DK>rS_JJX!BG\SC>/I\PBUt%$n9O6VQ&$mmfX%IcpK)0di!NjHN&l=EX-?dM,\%WZ1hQPJ>K[W;n@"4l7;,l`WqkFgrbE0[.;cfr7&;q^,i^i"Y!t=.5e?TGJqo2%LkjqJlo1$n>(iLKHF2Go3<iU,`7lB@B^ouLmS=-'X-9tpjW\)%ARS-:\6+'1QXF-6o\+kti<^^iBj&?[G7dcBE:/sm*5`-;RaFqW%^S:YST5&Z[(+R<1P\2qM,.&qQb*<F-pRf48SL188+Rikd=QL=WHDBBqCkp:.5T;UnKB?ahM@R,Cd(e4_U(u]+)e!@D`@>`H5_QG'%$.;<EJYi<GlNI_i.+dLf]Q+LZQQGP)22eV`(NfGoU1\QD3UiHjNIDFer>b*eO`Go!BT)I+;Kt`Bert$%-d+Y0@J>Ao2nX#=Cd[\=%fc#OV`M)RCE+)KI6;=kkTJg7Hplh+eJRp5NYMOgS?+RHWCh083Vu,$/rD+[JM+%`1ha)>1MPa=/OCB5KqZ+?.g5!Ai+]D:6%=:P0%@JlgrqHn5/1bSTa4E5m@CNF9+5os:'bh`qhE__gbWjU!_d>^$r#fRQuXkiCR!X:5/`'PLC5,Ttp#C-7V%OPup&+GkjiOrEV2X>um%3PaAW"3^VX9[jT;CXRfCq`Ua26^4+4Ee+teHt>K"U=u<Re)l-!Xj]c.U[`6.PnY3pg:+VapF5[`q9Nrb4rSp^W;Y7+6F1d?gM.Fm%nI8"4%5ji"HBI"Ie`u'gj30=mL%A7/eiP/PQ+nYScm#[M*T9Od8f%,`LCaH<KH6ul058%6E70GIMFSG2-%IJZ7r[,p)OJ(C*>?13%(OUaSUf7XedNofp53G;]5,s8Do3qh'U"sYrUcSWSLb9a>\5oe%5&/pAfW3cKAfF7o@;bT$>#KKr^3'gERfm@L&XNdi*+p/HhBBl9%]4Yt;Lh3Iu3HJR.)p+'?MV,7'*oK-`!b6qBdb^RhQ5cK#!UK<RqPl2e?,,KTr:3^.H0]5g_`(.i5?jDT#A;UHr*W7U\f;F-+6LlC%md0a=Xo'?tD-B`3jc+?K/!Z6@2c;1%L%@\n[Cl=KT#r&1S#PaU'0U[?aJG2XWu%c%d;:nO+rj0@IcG;X=0JJnR5:ZmooBZ(j_n_r%jE4BR)R?'mCHqRZ/$IK`INo5Cql-gsdO6Ei^#%nk>9V`ahVULNqjYUnqG"-H\Q>pa]uPJnHsaS!XDS_1hSl=ChPR^%F7G]R3(=h<%lRAh"p%)L)`E4imbO;tLBU&V&8h0^9=&YOLG:Spr'V!IV%,WlfHS4BEMfYq2dW!p+f5rO*L6>ir)]Nu.@;E-s5:5:OMhc^K7N#3F%qlRJg!1CO@g4PQP%uoQ=k"][JAnisU2g,gJBmBCKL&a:eTg!s-k0^@)DgP9JnduGu+:k^q]t8ZqbXed-kVWsYnq=(9kt3J\PpXq^%C=P-9]B<8[C[^M3E91#4ktO7CX[lc`U>G>X2kjY`G82o>q"Ck4I:g4.0\>Q8<SAD+k2mH:k0>&gV5.J.C5&[l[I-tm2EPQQI@/lV%.X-q?os/i)<G<Z5T;d!8djND8F0E"Z40tJFhb"^Y&!\A(p0RD5hkbb"1kR'!KY]H'E`sJ7TGNm=8?]2AD:2$P(D^8(Wa+gN/R0_C%>]1@h;Ab[7rMSN$oc'4mb\3iR0BuR91[eK2o?-1"Dl%dZj'i$jRRk&j7D4S5BRb08mp51WriFn(*G2u7m4W;4M-cGod\p@B/$i&g%m!,oQHM(%3R_l=BV)-XtII@#'3q94LW'3@EEM]=lh/1\Se)0PfP$b%C@41qum9St::fqB^l?BC'W?1@7B!Y^KX`l:RY!KC:XDC"^%8h5t[<C`n[lb]@0,!r,!,F.[T3d@GId\p?_lYc%I_gTe-;JfJ7Y#h7o.P2#u92DFc;H+%'G40WtqbQ\Ugp>Fe[0>6mdY#Pn/GN3@%YTd>bA7eXiSo$XCD&bdqB,3W\]j>B%qGqq4F[idB>q+8iX5+Aj&%_)`Poe*4X6TETL3KKMr>FKbY?uHb#'f#!D!QpsZZT+<Y4QD6%o(%2%o]00>e&h?UX&<11XnL)3>-Id%qIg.1rRQjMV8n(s5:<<OHWL!K[t8_-Dd.SQMrg1!V0?!-V>7Id=fHDR16^F@>,e/e=+>4d%BGRq^ddT\TTp<@6):tP'g`P+5E2D""k2NPMV2)qRdV8e4c&U")07SEal$7:KjUtS*d;uA*IV4+^<]\l:G-s/\-Me.M[!3td3>Gu2%f>$$56)?SH.;B6oQ1e6\>>#'"V9<Yd1E*6790?<r<2tCY]?9XoY#Lus/KHf$SHI,DHYZ!VK"J.u6DMHZG<b3?^ZqHA,->t[/E^L2%9W.E,8Z&sdm6u)!([CG=r,ZN$IdVN.G:*;oq`XlZgM?$GP\PZCHHYnDDkfL`?S82>dm";toi*`c(IiWKgMfAoJ'Haqd_='#e%O:%%hku49FT1S*oW.\u?pAdR9UdV)oCq^fD]^U@[j;!OD^QWB?;E;r[+UY2pU=G#[uK5>h=[g4H2=f8CV"Il/N;;\d&5mIWr)&8r^E;r%biAMAH'qg'*`$_&Du#Xte&V%ELAc4IA$>-0IEqTS5D.GQY4'j.CT2R@oosL`kI\>$m.WDQmb+&oqfH1C2K+#9^:2uP%fJCGT:4Ya%>k3;H.3-#YI%Th">;N!<`sO800!jj7[^mtg2O7I7<u9In:R<`\qHNT+.C\^dQ+NBd4%fa\kBP3'c##1Vf^%eQrUpQt'Y.hGB38>?%.Y/&8n5-E]1Yt!i^8M(8R5C95caT-Bff/A]kPOET5&pY(VR#=T&q&IW<G0U.2,9].U1%_`[IYTkS%T\R@H2H`c3@aHT-6+*AJjG(%5K)5@Xr00enjc/r!P+?%6dWrrh*EoIXBYABk*m<.)5Q#!.cB`r30Z:-l12FXH0/&)2EQ99D*@C[^0N<a\+dV%U+,;ekZb#_rA_O\%Wg&M[Qn[F2g'X+rq+?p13Nc9?\9Phi>+_FZ[4CXjIPoE]H!b_LGk6.IkCHXEdrJEV\aup;Z$/S+Wg$]IfQXRR._?N+^;I9QV0>`7%/Y/m7(!!uUCb,3"Hn,BXiQJj]oi05;;XB>#C(D,.)2p-[hb(^+\TIIX_dq<XDm]8$YuSB=rreZ6jdq5lmEfn-m-f#Wp4V$O4se`4%.X+j!'N(>A$d2dCar\'rMa,L#%oWGX@1Ok)`0Q<uWfufdo?Gt=XSoEW?*%C2=!,J`&5tO"RIr0K56:tWk3h"H9Z*a<o2%nkX&ae?%A`iN&"Dh,eoHS_4TbUr;RT3`oK:96r,t/f919C,*q6*7JD1.p94UW2!3jFR/Tp?_5\Zbm7N9%$<oQ)(D\`"1]%^Gh8J\!Z(,L:E^%FE(X>=4:m]!?ue&7aecVk=&8m9o406/g/P)b"<%G_O_dQE<RgHe"rsNn\AbJ2p:04P-/mt9Zc*WL]O:qZk%Y>p>6&E?Gh,/enX**%Du7?>^%1PTnAM*p+S9$]-)%$VU8Yl=(e#c((&q7NO@9cT[2!K6T3/CB*e/h<Sqt[;A/a9b3HCX"+#-D<hOFCP1<ZYC1:HJAo0/o3%\`2sZH/.8T4RVle"sSH='6f9#4B=X0]R-e`m.I&!>KN$=au^C'*L5?j($DOVe[G4N`3DGNVVSdPV:?N)RO2rY?QKA,)Z"%.?lnMq%pE?BG*2QYpe(d(Qr=NJAi**9F'/p2%_-;p(CCiNab\Lf3O`t%'l)&8uXN`?`L.S$K>G)bS(r;Onq6/*7#*U'#P&Wb.S&_62Pnf(2%L<M[GQ:@eM>1IE<iJ:suEEAX?*<u5uXI-[6ZgdKMgHns\7K`g-`l6)ODhkXdKFcS'FqB""2JR1[PtMMUaA1#3U,^:l>6[0\FD^HY%ot;9#,T/c&()hh+r.l('cm?l1>uKSMS`:>s?fg<"e)*XPf-'Rj(p1?sdD*bkGo-ZZ9^_oQleNT>aKF!DF\PPlXf)#U;bt$'V$%B9%Hf>JWC9Y,76dj(:V8e995'B5Jni,g7Y)CeZk+'WW+#,<uD15"T[=\oLdXT=SMpd5>Va$@N"#hG,ZA\F`,g.p5&3VoPZFaKl-6C2o%m(.E]Hg+7aA%Y8MK4A3-7KgC`ij]IVh+EKq`St"?]5_)lF!!PG]_tGkF_n]\j^;k9C88(Zq`>V1;'n4$q(fFJlbT,Dn_c)NGJ'l*%Mh:A/jsT68B&B&CI<Di4;g=dd]AZ@*KFk'cOV6Kho-YeK$RF.tH/c1_it4VZMr!l2n+$mRI:gaM>mO_#\4"=0`OpRcZD_IB\^,,O%dSp/ta+^kI[loiJ8mm=j>liVn0Z#n^#t>59E689;#MlB=m)qP.Gf9*,rCNFeoCjI[J>Y[o,gO9K=KhkZMk^:-m;r("W.bWLRI8=?%LS`oh^UU)jc^+U;#7H,B&_`RBL\>,$+BG*1443(+UHU^2plP,ta\u^#a8ksn>sr.f`t7t["t[k+AiYXV4D0-+SO7e^4iBLS1e2Z0%-UNE\G%T0)_S.%R[FZt"oL*jPIeK?+]5NA@&X;s(g;5+0,FX*(Fu:7nqSPVXN@f."ka[rMk?JlCi4pT_3V\lZC_.u9q]iH4(ic1?%I97?#F0W\o((4\I=KKiF$BRL@D-I'cZj>IG<.Q:Bi&%:>LLgE%DbMB9L_<Ai2l.%$;qc0&7,Znd=ZVogHQ$F79>?<[hR_,O_BgC:%)C4A)^c`9ie[19Rdh:o$>3TG5;2ug_[Np&-gb[hi%8&XY4Ps7JTE<cW8uqIsJ7BBPA^$&o9L"gpMg/`+FFfSpc'F(&WWdkG#.+`R%1+nW+gi6C^eE!>l]U?h'h<N`&pCcP3ZQ6Ko&[H,i>63:<d#4rg@F.DEUi8o*F*B\22r@1[Wl/Bu[N!>3GDqC!@g%*d+VnkoSdAFI%Cb3ZbO$3+1,'0mtqH=\t<[o5_+M6jE2bSCRX7+-'X.g3d?7!7,2?%^XkuRpA.2R&bc^0oH)G:WsnR8<@13]B\l[NP:1g9p+3>"#j%8(D:/1#'Gdr=X"mh-NgMd9I9.KPYBAmE4!nj',+eQ]A)n!lmLi[jbuIh##CDfXQ0X2-M1bT#oSj0qNpgTPSVq>0"a3NZ;\e\NFQ<%Nm''^ED))D<XR[H`HECKO(T^r%P[&Im+?Zf?kGMa&d$5bXDr0B[=lQq8[)fcXCRHP<?A>B'3k-gY.GSO[F^40j6cN,^9k4RT\j#/%R`823JAksLo+ArdGQP?>\?Pbq<5EfK?0ZF.=^AZN>i?,Kakb$i!a/k,a+@nje@oMgCkuIL_':<>I5\1OS9o,cLun0_hFtu(-`EPV%Ts'DDR14)/]%2^[OGH$u`jbD,oH!5)7!eFW&F]hKL!aKeN$k?J+#Jma4;6KDJAl:V[/BlIZf0q_cnHH-$VBD/E&N(]>q#t[S5"O\%0>=dOl=.\[=S=W]n(-N)C+m8N0&]st@ghd9kgjNc4+62RU\cs8V+^[(GBD_3)Vq*%RrU(.&.`t;;,?>e7_.D/2'9F7naed`9d7G!%]pPaS'&c!`SC8,;;Cgj07OG!1cCa0":7>.pXUkC)N^h^4k+p1M'`^A1(rHaM5agJH><it<H4slW##HVoo%_s8i=psTPg^krPPs&:%S:12G`R6-4I!t(f^s0=uM24Q_jB<4X\abpn>^JZh<0,b)SqT&qEP>]X1UYXpHQe0CX;'`.aIK;!c(VJTdkcUdT+Wi3*4k&:\jUj*%3HQL23\ooT[[]I8/i\InZ3@.g6V#.b?NqPD/1/Z9$dPE?fn'n#d!8Z,A^G^6$]^E<(S!e3cL.&VLFtQ=cH^j-/;Gi;K+@P+1ihg8%.a#:Dg3^LgILb2t<5riH`Xriu9VBjgC7#7NqeZ7W5Yt,CAet\L!@.j9T1Vr/0N,ni[3)pCaZm`)?:c][mGC`(q,tHCAUCRmHPOQ]%P:OR.]"OYR.1r/+\$k?/=H@lB)fLYNWF0t1&(9tH1p3`$:L<q&h#9r73ETLBeNRmLAMi)b)7f<JH8nKAf?2/o9W'.i7BV5unkGQ_%.)JpFY`+8DCrO)k3d0!`HfE^EeBK,P>=!Xh`pQB9KWoGBr`0Sk>g^0KfnkpK4Ea&OQg>K#.u8+=@^\?iW637Yb6Q\t0c8rc'ngWq%&eTMdMJn5M7%^@BgdU]^Niq'J8\\\S*_e$6Wq"nOn*YRe4Z?3CLgmG2e(W$.46nR[E/&_scaQEg$<YK3&3+0.6T-0-IN)QoQit*N%25PC3Eg!#dfbKeXk/mbs27gfKiu<`t829]1hLb?+AfX/fs4"EDJ3EB6Nh^QToJPr)dPdG%'e,h*A.O'H>m0g@B*?]$*/r[&4Ze8[%CKneD(?T++n2\20OG0OP"OZ=9'a8,VN^iY1g>UR2E%EtC1a^8[N^=$1Qn*N\G^HpZh!294RlqG8Q=[T5&G;#BfKJEmi+tF>,`3-I%h_QE4]LpKoI(XcbD/S8+maRc?cWt0kfB]LWbLuJU&Z-U=&@aR@kAKeJ.""h28<e2YN.grPM\+G!nJh@eiYFDmi5\VH(XC@1oOgZr%C96$UN/,Z=)AG6X*RTCfXo,6p9]:%oN`C?9a3F8&oPsCa8<Q?gO+Pj@**UBDF4`"@XZu<GcXYX<HdJ'-NVG_bXqC,6O%&)-`:/f1%clUl4%%1W$l%jlW'O&&td>7?98W#bG[rXMW""dPA-8<>4R1c,Yo3R'*E^jS[UCiodIG]j>O,Wm&AG4'&a>c&9GVD(ILl=I*R[]?N%]8.#\fq67o,(sEF$7UThV`tieVhFn/4<fuFP(kl76j?\mc!P$#N!W&#)9I.7g?\l4HHmZMED$V-O^372>F,H.Be1?Zje2krbPXpG%o%)@^m"E7&4n&gC3-VAjoNKTe'.J(R$L%];aJ`gRM\A#YS%IJ.+%&@<IEXpeA2bnKSl[l@\RF:rfQ@j;gT4a@V1NpW7G9m1N0tr6%PkU=N!e[/>a`[$2HDfOZW[5ae%:=K"1ES7KH%"`6_tgG]9f4"&C7-mr2*;s5@\1Plq/BB+Kd.g[m-G=VI(5O]WFP).H"RL[4!-([%>>?CbcEd;d:Xt8_%i>$]P)8bg4Sn/8@qjZmE6]-N=mjYTb;qJ@D=YnsR,4Pi%b[o5IN_?L2X-f(>Ou3G,413qbP776\37E4'k@N5%7Q3ksQ&UgoA1'7(9<RXj!I<\`Gc$YG"a_,7rT73pOb,_#a`[R`Z+)le_=CcM%74NbKlf`$@<h2*5s%l8$I*-#F,e`qU'Si;[5Ic_%M[/3Oei7V1MROF3NL-M_)DK8K/;GK[72\8pMuW:'I!/$%hVSm:)U<pd"Wn$jCZi1m87:nm#@e`.PKAj)YTWV_iD=m^MacAn"nB@K%$k1QoZ&]Y1b"/YZ]Qg<9NffH-RsFT6(rXTg]pVVblJq=i1/\.r1bqrP?YgVuWISXPN)[UPc:IUi#!+krlXn)MG&17\D&Kq0a>jZ1%4GMg3E*OpiDVI`\iOid-l)2Dop<-E6iTtXDUH%]%VS[V"Ctbk-&cKiY;rJ@OM4,\)DIc8UR&P&@L*;mfI2B9#'(86`P&#]'HY"IO%?CduujBAf[Ua)to!4#-CFntD2FI^d<OA-F\j>l?^@b?/^.=?+9Vm&TM?Yu+3=8GT$DuH=TSEQ.=3DJgWjK.g[HVjMDckj5K0'g3+%K_>G\+ER/8CSu;\HR[:lLR"l"\,BRFgcV]Tk6DBklK+=\LT`KehcG-YKjF(d^JrFjQV,6p!F.s1d:JM=]&esgd[64S)_3'"Cd%IL%Irh*![X.4t-p!RJf%s2_q!^(@WVX#e?;G_AP21!X1@4ineU!f/+Kf7abG'K@*F,UMo;hL@0Z.d@`T/Lkhe0C/gp\bU-bI2pe(1XU%Hib.qO)Ha$fhK]d<k>rXp>_KJVp3NdC;WR!%(j-,TY.V'TFAHXjeZ%Tlor/$``LtL_laT996bXG?YSWs@>FHng^KcibA/b[Q(Etk%&fRp[HMicFq5QsRH^@uqKMd"W$n_dmd!Wl4;NaeGLRNuIap)a+fQ'cc6"d06F1Z96*rE_-*n_li3o:8#Z]U'67hb+uG:mVCFH=sj%0N!s(EZXBb]&tR:9laRk0:=>gH'=cMKLj[V6OmC_asZ'uP4A7`PU"sCi\3%gmsQ/H&ihUE=>V$Vbd_[)HJ&SV0V^5l,V%lXJKU,c%H+t>C1M$PXY/p,9j(5,#EXe/Efp0m6QqfQ1(PV;-KZURb]Q37+mS'$.S'EPB`U;`U?8e?U/mY9:-Y$`:q6*jp1RlZc>>@,HDPF(P%jD6k1kJKZM-d8H/(^W$cc8kTrO\P#(9BW-[-Hi:Xns^:kc_g<VV6e`ZVj:%I%7<W<*SYEm]kfa5>WOqV1TbISYMR5ql`"LFH*<*#%4.FNRU]a36FL(/DqTnbDj,()+]Q37g/Z!Hml+Bh=@Nl3+VMht$4(1%<)\kpAZoAh;'?9*8KP\6`*1J4Cc7>6AXM.CbS'EONcMOKO%8[@Tn&<,b19U\\rZ,Klun]Mdf5F]sAG##OX,b$c_c7>56jBg4gZK]#J.,^'P0sg->k-A7'BRZd24!LQZpoh>kRn`(r+SV;tZ*NVa%,R$/X!?%k3#LHu"p!6soUROT_UqO!J.\l*7+c\_YJ&;IPci10GlFa6WC#;u.q;-eOqs'p<X::I3SGQ^7j\pF9CflXfW"X-8Rkm>R%/kO:LO)e6+eF_&6.qnl;KgYVLC&th>3=?tPIk*rMP$kp*a$77:VUHdD')2:+:q8]$G$X_=kl.>*@B_`Ch"g9srM^eGrj2(Uf\$'5%"0]7n*4qU%RQG;t"C6*c3DIWaR_*hAPK1B!c?2a0pI0;r_JUFHgkFWBiNl6%ehqYfXphu,cFnH:Ia)0JF5a\8'1_3GXXc-nS6s:m%J9VVKZR?F5kjBKcZ4ER"12>T6B&Z3>hjoNWp0-KE]((r@>ZmT]M)/NM]XDdtcUri%kuJVh_Zm8R':I_uWJEWuP$k$G'4DcJ?#XEj%_4djE)f6h%p["FL\G_aK'?!4\K?)URKoeaWM]?Fi'LERH7sFJ%Eif)6P5,shN_)m`git0kWPr!'Pio5%,NA7N6l#$Z`+`I5amM`j%C1?RaHd`,32rUJoX]#6$Q%seNO^AtPiri3u7@?/SRdf.DG8ZO.]HcZL6J.F$bgNF[&%QrFT+0`(I[WT8MYl1=O)l$[V_TB*LV[+*%0lA[5O%poN&r5<$BA)a;ANiRXA-fnZ#k1N6CG'"_`[LrL3k6@XhVOeENlO-gj'528H;A!X.RWPjL1T*9c=(r\SRL`niGSSkauD?8%d9?I'iDa^),AS(oGML.TLAj-e`QW]L1S;bKVS($+iQ)IP'ASfg_j:kG.F3J\`k:8jh#?>`;KrI&GP6^9%<l6mDB^FYh?7b8MQ4]<%IjZsl7WRC`Q<=%Zlb3O1bhL_nhi]%Nq04`M]QAfQ2u0$qN$lQ!8jpWSOo*)(jiHSQZ1H_lFa69"']\AcY:aEWL>hEl4#>Q"?XKU;%GT//iaYO:ebQrRh2'sOq0j-FPXtKQX%i/rk#uJ1-3?oN%HF,[TM_Zd\j-EH#[3HY3(WiknNLIj$Pf34Bo:9N6/b*jdDrW3"iS80t%e'R-b7%>_AdkLF+O0=e;I%MEh-/AAU]c>Wch\@*R*fHWMH5HTp.fXRmm\Y'],J,CC8ia&N>i'Z*-]oH9k*P*hZ44]Q,">*A4bF#r%R_j3.1]dg9E2Z-.]U6K.5KJ*(h7,"cMksm3s/%p5fY8hQ/RMb#FC(:koPNcUjS%Cn<pS2Nk"M1:4?0RgF,YNkUu<>4Sb&+-o&9GO%f6=-?W60ArgM6!3cBSp\jX'`#iUqr/X.jO/6<..YbP]h$kOeAi'CWUq'=Jt\'+SZT?.m!@S_<lj=/B$jZ[:?uhK#6;pTS31;U\B@%s*V?UJj/)Pp0,YB/B>uoejIV.2(]Jdj'9j"q1j0m=q!Ss5P;!TRnYERj]B3E\<h_<GNLa&G]@)4G;ag:;lR%f8?Hu8HL@etm(9L_%pYac?dRrW$lKm%]Gac%Sd1jg`dRN(nNc8gAUg+NV?kcq6<XTM^+c`[J"r2KR7'41%gq+?'jVj2ZZP;=]E@6B-gc1.XWb.d%605'"%-6q;T[Lo%`1_Lu%aSm>@IlZZB.Y!URT)76OP?XcY2YH,!-24iV7KU0K[T7Zc8\r%\E@59&T.WGgTLI1!Mm0T=C0"NZ*mH,(`),ts%?6OZA_m8\Sma>R970$10qm>@HKX3Z$40eKn"d.jd,p$R/F96W";//42RW,7,b2_WI;dEBMN\OK$(#e#-Y[A<2=6?QSA)I6,[h>t]%`ln>Rd4eK)00`NS4+HVl=KDVbr8V:PBe3CO=)_\1n-l$^)4TFfLX7@l0P4Rn`ClB;&Y7o0Rmu0@XRm"7W>l"GSYD0MX2YYSqo/@S%i@_pkMA6Dq<Cc*IEDIWr``/2[O]*(1NF)DIV3)G5DM(\E$U5lQOU;q;[s@\Mf1qV-:2#*'e4_2FAS2B?3Tn1B].N5We-OX8K.-cE%q@O>@q<06dkkEks;E::`MKkD!lr:di9<SUNmZs7`AAS!YLXKaHU]RjLRuPI*jN)Z/7**5cH/`coAE>Qfa$NfZ@l<gRH1^4N8@l%/%1E5XL4`5]d,7?2?%\R<2`m+W*V854ucs_pSc2nDVH&`Y9Ng'\a2$Yi-#'N3FZ#8(_g^OuY$SZ<*T_CI[;6p7to$_BWN1L1i2$Yge%NuX5b(c;OPAG%N6$ZMS31YO>QV0lg7U*K3d+1ROg<0BVS[\@'M(NpG1F=uZ")J8F[^6Hrd?d_/\.A+rbaA]g;02<4!r(Hk@B;thc%Qh!.KZ%)+<5#4g#.\F'JgDNp'IPt0<Hi;rp%5mReI_:OV^"%&fZ_:Xuq?:eD%*<gUI'6mbdhX=gVmJ[ZZ_8T!lPFk*e5Yl/$bk.E%7XjG%\I]fBM.>B-k@LmP\,*XQ0q6%W@BWo6`l[;!^K])MP:PM'I_iMi9mhF:^"72.\7O0:rIVBDE%P"uf.VB`I^C,qiV31;c**Z(%?9cJT(s/08PiOReos5>+]I(34HS!IUI_e23Q^'J*FE`&3?\CCgUjN&lB=k+STYp3jMgcc*`&[;#\,)),+(+@`chfo?8OfA4`R`jr%.onCmoaBB;e%"!_3'Ds`i$Z:k06gCrJ!6!K_7b:BXE<7_(YCCr8kmsOI_iMiH"RQ)^Xk-k*":"_Rne8WSL^V(pY^J#?gP&dF0ArT%);oc^h\c+aH!naKomZgcrIV;-grC6,?GGE&r;tRFioN<[Jo:8!H>Er_q?>dAQUo.7LAprD`QUrD>*_$qX'\gh(3Zn=ACc"THi9\o%a#Eh-I_iMi`Oh1Lgu7;-O)Ng#rL@!Fa8C3qVSp7$cRY@ulU7:7p\G%TeG*;7.GX5*I&gV1pDQ1454DT;mcNMcme)K\C=Ci0qRP#d%?0bYRho?N\RMC&hhrMoKoN&^upKXtMrHuK8F@-MnWA="WISnBcTDW$1i4,*E:9O-Up%(ctZ[FEd=_t0drIWjKZ?(9]Hi8QPG5%pT%pKg';N^__0)<5&<LjnH=p\I>44ZMuFINsT@j&SCFQ3m$QZT?\/<^6#Zq2+P4$VlLPKK6XVn+@&pZ/IZ#dCk!(]%k-DZ#(?0]mdeU%$R)DM7D@A,pf9V"DU7D<qD"/G'4T(PGl4mGnfF"4^$k#IEd4d^*+HLio/1Q_,)5os@BtmeU\?$[,VH[hM=AHD@;Tn(3Lrf;2HnY*%Eu',IF_o&'q3-PFFn2fT(Hq-ZH;abnKr1.6eFLNIS<1Maek$IpVb52SD=6M=`HEa2rm4[+hUd2kENJhDSm<p"Y5DfGMSDSgp[bmK%q`??DWQ/1J7c.O]kDZfWAcCoSpK[[q^3e5WSFUP;<Gup`\R%lkgehC9kMK?Font'^k3K<mXSuNZ2Ep8@$5o]<BBJd_+HcY0D6;]=%)I&-eh\Z5Mh:lg_a/PQgXbAc\ECWZO4RDHHL0q7t9'<IaMRsX:G&CVl?<jCKbKnoll1=XqH!Ob/(95?+U/:f5h\UICq=@q]eQhJ6%N>j]\qQnN%>@2f*342Wb0:+Wg.lTKad%"NYDh%>kraQ0cRkn]j=+)+BV/,g\04s2AX:&e6U20E0ga>+0("5g0mDF?*AmokUjppO#%4aAXpf[?tBg-XhApA4c/F0=?BUOJVtPgA<)X.H=Y0'PPm%S[D=?0)psWu\Tf:1C5"]t@#HF,`54ST^M-He1-&:t&04G%?lXPK@(O%h/A/"RMR>0[<-+b^99G4nb&<HVk*E`mC6,fg!1,ZpUBbmqHDF>rB@@=Cs1.\D=,T=f(JE?,$ijO;Juieoe/[*0$mi;QbRZ6B"WKI%?9:jRE2s=1S\op8i9'05\T3,1$f=d%:KohMg<C8.IT*rG@F%Nd%i/S,_TRK*aE]YP^qPY`3-L7*U:8NGI0o*8,)*AT76``:pa;NL%*d[$_.E>bqk,T6]a?XE_L#m>54fg:(md5kaKs-h2RLsk-i?+J?Re:'VIrMpqDEV+\+$AiulTq+lcn0Zd[><V5S`2<`(E>*uYcG`%%<qnYt5PS4Ceq4sVhb`+!gD40hQkO[FW\U1?O%&%PjEIaP?jC.<D.&Zu[CdpKOfUgrA!Sn>FDllTrc!^oUXR+#/qQ%!US$_$o[J@(%d754+hFciCbp@Z$'$2ZR/S4'b);9@[HajS_/L>Cr<dJtQ_mRQS6T3L6c^BjBQW?6u[Z"@Ao/8L&kC9_46mISl8_rK0,IHY0ph308%1)`T.-.ln=X,YY-iG*i/[Ig:;F:4Fhp'o4MVGqqFHEOtm*Y,!iqe_PibGB$533na[7Ebh#pYQIeei9TO+jU$/fJsfN&.$C>Dmc#!%(&SNGs'gh4/)JI]0\tMU:W)igr(Wb=Ig-1pV[>jnnG%W>^9<Xg3jU'**]+Z%,D<\58A<X:8fP-1^2&m#bo<\@C5Y7M<7k$X=08pD%a]hhHfT5cAJ;e4:/*2.qI=Cjq]l6tWY:+liP'2%ec_qpY53<m/"4H-h09q0F4AZ<(=28[ui@*L\14aIf%mFP56Y=qj"k-s[UYYt:%[`T]VroNkMeu_h0\.rU]k(;&GR!37;9:<cGQE*e/S]/`GnS#\)C%^Ct!c>DK&TX4Eg<tE*n,aK=XKOD/k<V_4.^%OpAMV,[\'JaW%IF%!Fc'd%+degmjY$ZJSr\^s8KUX<+moFCl'`jO-:2WO+gkMH%b=GY2f`VJG[<hKX]l>V(/;J(&fPm%l*@C2:k9.LCRs-HO-*0Yc%0&F0;Z9gnLm(pL^m!8OEZU4Q>;L1mWD03M2Can2:,]@R17028p3DrnIH[.o*3rj.?^o:$<odQ."f/j$`F<Xmdqb0&+N7jb]-.]fj%A_b&Ik='%g"=&q.8G,(#<A6Xud>*1aRn/lP^C(LNfQPP#gdp4!6`2qHihQCLs#:ArFi9`P"U?t&9*6c23PIFNbO;uYpaE#F;Y?FT%bcDniVR"h"H`<;._KfnlCh=`[?DLU/ng8b6;q[r#h,L9'bGMSEf*)_DCKlUos+9mq`\L6#oXo^sA+eG/(Y<&ud<;A[>5@#ms5m[t%Y8>LQ$C>OX(<_%8g4&!i\2]*F9f6PiqlakBjhK67XEugU<#_OZ;R8FA6hT:7DKg8NGL`&HmVLkCF8`=^=]X\-+(tOnCjG\P:CCa-%So0mG@iP0KfQ<4tmjD=7-RWZRBB>3Mmd-rY._h[3^V@:IMe;%##.Jpbj+ZLdpcs^E3I$+FBg@`%3,6?5>9O[fR5mVGqW2njjE18J%Ofk!MoecrSEQsPVXI<;,i4>cZQ_j)Wa01hMmejIoqUfJr7:<^OEk0OiQ+^<!:Wh>Pe]Uj%,]Z<`F[>^E*3d!R6P%><^2R/_P?E3T%p$d?U[F/_(^D@^4._DTQEVm5,09l3[Rf.!3,o3I=V3IH?nX^94W*ICm]7ll6H9./B8Fu`MHY`;53&-o?q39(qNn&(oa`3d;BR"Vb%_mc%%DgIY&Dlmm%o5f!?G@`TeKm/6'eEG>tm!:/YgH>ZsH3c.p!ICuu"6Ffjb%A)EVHkZ`;_,l1F!@0t1g<M][a-#RD#oN4!E!nJ%O$;]6G7A]EqiM*[,\lJQJU7@m?t6D:1:U"X?F?!#aFenW%HH'uM00b![jSDr;4@rF#.MPj6P:nPqWt+MpK^JHaW>:gb3XG7S-2%L%BT"q&OGlo6efuScA1>Kh`T,;'f]Jg?d5&uu2G%sEUYU,X7V6e5jrt0KMjd#[M@3qFm+^Zb=j1qt9djLbh@I'Hioh-:bh7P'gR4fe%,P]5U0dfN5Fh9^fA@o^%iVi,Q>2EF`pC#["l2pPJ##E<[HTg6b\Ep@uH;AH,C?t84XureVSo!S:K=U"-Z#ii#B@Y8,3Hnd_4mgS`%XpmTSZ\`cYVt@-gKrq0l=+#rIk*=!-@c_QNJt6A+S_;\FA\!*d<Of]Ul)chehD]1tl:_054[6$tC(%SpI=:79Su0L"6+ZYe!Xh:\%T!>fgBQ_gnkN7jHnbWSTJ='\iI`05/RU<qUM>f4mZYYRmDkqD+[sitrjHm]H\@o?NI3-Xf_3I'@Lf!CdOe13EN1eMe?A1pkpGarf%Z(=/1SNDVeniJ>1V`TgUZBTN&Fk^HWUUEk8IL*):OcJlX`7M3mUaM2&f2(X98NPjTmcSQ+NXt'[fDIrAYc<2?3!PI8LX.IFOO&>5%co02*P8]+*n50HDKk%;.JR>t\WNSLV*gp^4d'h?BH4`jcZcDk(qYJ?B*R,]gLM5\X38Ddi[LNYVl;\<g2qJl0VbgZin!$nsZZT";%8*60%$38f>Tl;B%='b)LlMND?c&&ecgF\\Jh[AhlE_^!*#>_J)M=l@BIL2Lsa?J6Q<l\l+dP0K;="n5305::!(o5Xpl':t"d0b[<%`3"LU@'9E0hV$TW7Tr7[`=9lZ9;J/N`.YuX,;JB5p`c;#:GE:?>;N[NU\FRdK.E(E28$qFY)aWn5fUI*)^&Ws_eT<:(1VTK3Of-$%b\MH_3Om00YrdF7Qui-RIPG%jQQW)JS6EX6geKH1P\M]F;W!8%$`WLET-oHQ*Q,J1)?fe0;OQ,I!u=ic:_)$=>1kk'm,6bX6[tD%%LV24f8)(_9Rm_SVEJe`\,U&'r_/XoT#I%MpY,==XO$&[eKic/hmg$i6VrP^Gs"[V'104(A1"`bKrk(BWG'kj,`.KH*B?O(h3RPlo%%<a&s_&08/qfM$:+%&D1EHf(j=M*=g?>_4$fHmMc1IL!M=7Pi\a?J8GEPAYZC8N%-;(!6.:Z1ei;nF1g/=]=5)iWa^M@5D0kt?M@%"R@t7c,'#lhSZ8jgcSie?bejl<P!$([Y_83^@YO;]__4>d7_@6W\5gnD(SE?EEj&3R^A4Ur)he_eX,aU;ROlOrJ<5>nMc,6\_9hr%4L(GV[GRL@HFIfLpkLmOG<=Xlo1sNl(ErSZ4!&T-bV0!0a5_&m]57JoNb>CTs(oa9DBEYR02BRBA,i1fGhh\jLZBQEGhhZtJY-,d%;o='g[HuU3Aab0t4/f6oqlj_&]9\(b6,k'?@[DT3gK\dedT8q7CNT#=A36^Z*4NS#;5l@hpjJa;$I>O6#<2?M.[;XD'`Jk(%%[@I%L.;ZkCYFbWpicMWfq@s2dQZ7a$qkHmrE.q@Q/bU]lFl'EiS]!h;g"jspE",b(Ban96pa#PS);;Ihs/C:PkccnOERiVmQ>t++9uRZ%;J>HAM*esiQ=8gW]a;&0iZLOVna/fs,sFuV2bQ"Z(?beUH["2KDtcg_1F08aFQfn+S3(Wb@:OVcF`e+GcG5&ok@I/AG/)h03r'-9%:>[SY4`I1eC[l90r)'Q?-p+Z>hl2l]*QG?m$7\a^<\"''GrDhp[8,kc9o[DAI#jQB@8,=>3@:QR;m2,d9&=.];"Mr&fScrS+Y5&9%0.[l$g+5LsX:67H/1.m0REG@]_.J82IC?XV=]!j6ENiiYDs`:ReY`*o$"X/Xo[]qG?d'Kl/D,Bnc2>+maT384c?l/8.;2,*ooj=:%"DK:TEq"Nuj<k0?7)'A7V9^sc:9LM9-ob?t-mBeLIO1&,>U:'hKc:',gqu,n8A@P5&Wd4%ZQ,SADCoRR(WiqN5u+-I(tP'aOdZ;S%-T<@]7.W(QF67[q&toYu9#Ru2'T9V/qMajXZ+YtFOY+*`$O&2Kj(XlL?7pL;;'fZ`9-rVc573td2[Wb=rO[,dot([H:J`U=h'b7n%*(R4LD5fp?)%VEQPlZ8?,D1sR&JUO9$G5DX2s]&)[^05Y(-\F<=gVkUHZGC0-t<:[b!aU(+CfsNHt4e.S7d'a)fNZ-U1ukr`^WgE%1,`/hGSqI,)1F@'8HY)02\cp:jO?NlnVkm=oq.c\Q<]l>RusId@`aqYW&2"sjJ<-n0:2rM.[`\LbfBguZ"22%_2?F4[^[3#C"sRD%]3L=[NBD@.XG[j^2nVh)H04lq^$<cK9A)>mYWT.JY*f1cgr.Jac16KT,^@p57*=P^E+mE=rV!,iR>ngtDZ[*3A)S4dhVDc>F*/(r%_VGt'o2),/5-@ok/?<J\YYoM5pjB>@4_$^loL!_b4PEp"*c[TXS#$ks!MAnj\X0cIaE)-h"no`sD+*BL3u^gNPipjt.Eam4C>RXe%JN,;+p$dbng0gHN)<-l*3"T\)gtb!rpYh(,JKdl0-U,4l/jn.I/5,oMpGmYep0dTm6h6`'=#Rki3m6PSMYOon#9@t7dPoIS0Ntu9%FF=q&A\pm?Ut``G>>_%(0"EN6.C6FqAd&@`Mlkdt;W79Hj03p8Qb'EmiQ)RS,_4Q\!YqQUDKVM..?0DOlu9k:VPju"k8HEXpVpk)%@Q;u@gt,=FHgO^!11k*'8l*@fD3fGC/2JH`<4GD`[ra-UpP)53<'Dg`Vfn8:q8bK#pY/UN^5:E$,jGh6o'4"Lg%qQW'U?'J%K3r;%(gl.#_#F3n9C'2+XD_>V0\f]<jcA9AI.!Kr>5k+gKAl]gC*dJ,r,PKs,$i<ZRHNrpiHfC0gQ(p;8<:>.%C/2h>O5kL2V"^q?)]rY%3<?QPToZf)E3l0)l^PhZ48MnVVKbpY<dhZq.j`X*AKt-U<fX<l]2t,$D%ufm(u`U9%o%AO^1<%/Wm0m?6Y;`$62CfqU`;2nW-RaI%dlc7ZNsMEQE1T$\ItUHs*I6W\$<8m_Mn_s1Cp2cq(au))1q9]&,'r9KVeQq1U^-''gt&0B+4&]&D?du\a=RXBE[R-)%Qmk%#_&MI%lUX+rCe-B4OU^ecCsB>fcAZcEk:As>@bjd17QP';"5SBYO/P>!0grmjSZ>0]NL\=YAXl1adN:[g:aj@EWfnTQ4ASm+G>8:BRWo!,%'$0$VJZo(QfhCUaTd:/ud$+:s@B7d;kqt\pm:8,[QH0m97.I9_mo4Xn`b"2FK6$.'psWmeP,l]PiM*]gB;jq3H`,^kiX<TP=.P7X%O9pdKm.^ZD*;]bm%Ocgo45[ZVk8Ui"LN'`ehCXhOG;jI^,r2-Z2o!s9^/4O(q$#LSEiJ0Zl31]$PuB3MOT`"bkP7bU<;'Yq\R/]h%X`j=U=fCrPMf/:Dgit>[]>sg'#A/J7fNl86<BKrtFf"hW09kq+GF-j>_T"YI^I?Er[?(.AO,%qT6HqmWVughLL6e-(F(HRlnsg8-%+8/&APFW<L_%rA-](A)=K/fLns-j,j5'$]75tF0Tnu(4FF!?U)cCg$MVcB6F]jrWjcs6haIfnqu'@aFf-[B`_6h0ko%fO$Qaa"?V%aFM_E3Ic/@%5ZJpZ>CFd7hErk\3%&8o?(h,e*KGcriK\P7[!bq6lOJ*/klqQA+_7VDk*68%Pj]c(E/Y%^%t3U*U7So>*a]WRlda=%=Xma%22+,bJJ55r'659!NM+$ljk0YLq6sQoHop-,TPk>bS\EsPV+l#,6@JN-PM*FVJl0mtrB=R3a#:`\@HclkT"b+#+L#e1,1l^1%d_aSo-9Irq/otYa4K%6VEXp(Sd;PHk$U7gjUG8dd(1!57;]bfYa(X/(@LR-q<i,7a<!L[#\0GlEU2MoOIB2*-9>&a/rkT\1*p(Ai%UCOH-9:=$^rH`&;W;:h)2Ye#gHr!k=X$&mp!X,#9`KkVI"2j=TLkXCTNhfWlMSIctq8#sSfi45ZG-jtf$Qn,Rds9;mN@fM;!o>]K%,g4q98W7)V`&CWQlI<=u8piDucc@gMQ2"qu=o+%hW5LPlliS]M:.aFshN=!Xh+"a2#d/$rnsa-7)+/%/Kc+Y,mb5('#I"Vt,293/%&1j11[OU'1j.^fHo?1\^3]"+Q[DS:K4%l`Q`r8Z>C2ZSp'cJlChM'n]p9\3NBJ*KC0Zj,<4"]6qK^"cB[2!t9m6O,\?d?M[)W]+0%%"j1"EWl*cJ!%!l1]@/*E:BDfK#S7g/m&RWCQ%i7X:<9XiIVf@-bR<Mm'2[a^?,&6bC"9JFka=@72LEdf!r@n\G0X'(kF(f#dhf1%iLqX60dbhD=2opAIJoS9F<YIE(4`RX@0+bc^kAOENX8pdh[[EF[oi(;?gd$BasUJWa[]It9Vd<,HS^R"(\%j7LF<<Ma=Q(MI`=d\%'U8l=.=%XiN\r"C&D2o\Lh#I&@jMm@]gcQ[2eb)=/fO6!U3Ooo+paGAJLg+C,K<745`j68NGZnEW1uGd1o>T'2reEreM,[X%tY6>%l?8-QMD#;Y)L)D[:qCHq6>m"oLWI&\b!cCQqgm!'@Z:g-"<t=O1k65?@j<KY"PTq?\GA!C#:12,nk4/J\[K.o8kW37,R;>:'ER`=%Pq?MAm"C>>q[(?DaNI\IR-(.LLbB3j@j*$/h@(QpQ#)p`:bsHK3dJhK`hJLg]Gs\a0'`CpUXCn`dG%W3#7>0CXWqDf);1X>5T9QS%b!gqG,J0qr9dgSdBA=c\@js#ZT%;k5AF*nQLMXRuU@V$3`rb`'mbB?+\%m.t/'k9^eG2.>[&J7qqn42em+/N<*%/25o[NoXrZ^mn%jK5I#I,a5hMs&;:i&bQ?JVD&:[14b+5A:6$H+rA&;nkWDGa7ICf3`OQ"+91mm8(n-jU$(#6-)2;V6**c&,8LmZWElDaQ`f8.K\3N%Hu==NI]iXpb1tj?FYITc]!-rGf(lSkr;!V=BsQ<]Nqr9VGIjgV3Pa0K0KKuj]&'T5#i0`!U:'"8F5"KZ[S2RkF[_DQZPCYmSg4%O%#aV6dK3AScS3\`7d#7A)-Q#+r^>D/2lkJ(:Z5"W15.Qp*<\;<rjru?A@;Y76Jf4qh=RPrqI[h]9\gZa$;;cYAk@a\Xb?&IBD=^@[%0'H+(7Cp9ZJ!"41^BZi@okKDOPSr&emGiP3ZMZcCmKSXKRiG^#]\ar"%63lKV;GHX')a_9GU=dD<&1itqG$fc!J*iR%Zt)c[fPN;%%W<tb?<W-FG[K]HGYW7nAo927]B<[lYA<eqecUUf]@CfBlV4Ct-$]WpbH`)`>R,YR>q<:&HFRSkJ"H4APg<!($=-AVBRrdjQ#"r+%kEAS4?N1_pe=;aUT;q#(b^8=Hno:Ao[^(>!qXg`R3^;.uZ^A`=WkRYoJr`%%'3'D+:UQ6aS\b]5^?;C@dSi7oebAu@=SB4!;!n1Q%c,:O#G>Ao[.d]:34IA[;&`fZ@(j;U'qGM-W2VX"p^Djk>QmD\<kWejlc(la*8P)q0%i(amDi$nf2CW7$LWFF\aVT8UEq=_+m'LQA%^QY\u\ii*eg++OPPGIOQ._D!O7+;JqW&/gbJMkOc7,^d*8/BSP\,T#.d@ZVUO<jjS-Nm$IHMBGqZ&cWs6(n6'73Qr@I!?9eFa3F=%+_l$mcic'PX$TS5%6=6J:_Y?+W2=1E%W.T5BaeUeCVa0qp^RrZM-j68Gs]RiL6=r4c,?Cu,U>dGLaWpWR\V;1P7Vjc-`a,4PRT@F%abkYJ&`Kc;84c77Ef);;:pVV3&1rbJPpn278:lqe<7=AfMSVnVJsfPg(.CSj,J4!iNLU#,.(YcZ,uFf4AE6-`K5TgF=U1%ik7gmH%U$"74;uiYc2W>';-)V*)!AINK$p_49BHdGDVNN:)JsMToN*fXW$WL!I+dt9=))AQa't'QF#e3K*-7r%?+f?4_:b)ndBn7`_3F.^I%RuEFGR\1dj5oq5;,a&qAZBR`#_=,MJ1dRDWS0h]+AD&5&:h@QJ9a>]M`MEI4LcJD!J2UOfE\ad`;0%C?@[O%A2CRdIWC+GC\q\si%H<N30@$5>>Zjj$gY_g^Zfi3#BY!H'/MM0/%JjS4bl8d[bJR1cEBH'cd$+^GN.[#bFTLh/c:k2jU23>12;f[bOBu@6U#qD6.7DiDP%!Rc_$6rJTm6\>D^[YZ9TQ7t^dMKmE>Qu&LO$_#(,(a8r7;KPNuQkKnI+^cd7%r._(^^r5pTIWb<6_,A,)D>MSie1u),n0IDN#?1u%Qsq8JbED4V0KFoA;f[\]@)+1SGnED$8>MIr@YdS.e5`E&8P%E4fdUAKWn#Ie,)3[52]X)s.M@Osfcm:<c7>Vf`)(FcNtP4+A0r"\%Lr%/p3!fZqZD'E,$p'BhVCc3`)bliUTdC%iSD+[2C,]^%N_((&SZWf)#t'-E#dRCGO:9<WP[*^(om]DkIO/kEmDN/E9J0q?[l9i"%(Qll7U4@liSjrn-=$pKr9Q?b'Jp"@M&u?S.(aHS1&N%?C(pXc@^qW[6N*n5uE`!.Lq"E`;64"SXQA,FiTok6;5FOQ.XTSq9$L211%"qV4u&46Rs)ZVTm!s/%aWZ[l(Na>YHRR.&X0L6B&,X<&4"c.oQ/5cZl"MUP.KtKoaBPJ,RnfGc'#-Xu(>]l^$aBKEO'%/bH$mci%%APiIPXi=3D]SBHB)BO8T1pLf,_.,g\Lk>7:?QIQ$8<NEf_$Iu5/@$i5f/O.MZ,"4eZ,s#+A#;\Z`GpfTX&n))=%ZGSN0O-EL$8qA%6::pTJ(',Q7`3Sq;QkVJ+b45Q/VD8+P>Pd-\,j05$Rl.+%B4T,LdJV+>;4%!NZ_4*DQYmcTI-j>RLne->frdFB%:%dUQB]T3`@s3%6>-?iOol:iR>/%+7%6I=OO=8t"r8D@C^\*;c@TbRFVL%Y-<;/-8rG$SiJ_TR:Y\)<ICaNS#&MtaE&gq:_(8Sc%8n-BOne/sX":/l%31(>>L_(j26m1O9`+!2T/S*,g<#]di!PjL;-3:,4dNq*p)PA8mN\(['F^6.E"\i%u;%/Z04I.<fXf5-QM%mfgISVb6.6Q,_`"4A@%77&d]5YP&<+Qts#RCn\lEhs?3Jj:Il&dJEXRR2ar.>]C#:!=d'71<+W8Ho/n:^daDAVu70OHS#tPr9$WT8p!PN(DHT^-sB67]KBQ%+RC6U<1:mm,'jmDAeH5DV@_"OM^%*eZA!E?6F`cTP3a`R9I9NV+q6n-!S<)L)PZ.1pG"QPEI@m,2?6&:UM+FXJ5E[Fi4Gq$\8X,^%Vs1-A>!u[*M.h!I/7ImsY$m-<9R9A7,$c?'ke20i*@@>%QmAUCjcqC],)5<YrL7au'"JY%^D:Eae1a9L(%RZF9J+sOJkX^`@>L`R%k_o_3SZ"Ol>^op2j@lLD%MP:%'p(ep5*^4-Pr_5H1<U.)*i3(Pr2)'@^M.&D<",laZ:WTA%Q5*j92d3Z4RQMGSfgRO?&8O%N$bj1%8WoJ%`\\<@=d3W-3la6/(<\;f<L=5RW!=OknPql@pWKNi)\u9]7RZ63"<%PFYeX(d[h[tqM4t/7j?[nA3Q*T9R\=.,EfVJ)bf&?g%IT;^@s$[bt"GUGanU]B$U1Qs%kmaAUi/h^T"gpf<"a2RT@$0?1'24$797JWh7n/^PPE>YmlCq`,:&mS[b[FfYb`HAk2SoH')MVZ>%C)k0\pc00KqD_0u0]_M/eg![!;d;6>e-tH-B,R`_o$ibZD"=E!X$fhE1$LBdpt?9Iehi4.#sloLjJ]KeG1.uRCVPj`n]7`QAu&-3%A%,/gl]RBj@s0?r`3N>#I3"_A2@O)[7ELj&J4MFI6]ETiM'?sU(m&O5pcWAgE=bXP.87#4UR7u[aOOqVNZ;'K^uQo1=aa?JltKE&%;aOHRV0#EFGtc:MctF:t+39OQQlK*EKQlp4N,fls&6T?M>d,qcS?hG?ph<T:ES[AEl5=gGERq-)>2^/H#E,IUUE]5,OEQ#l<j3Pp%R[/tk`)fU$LiFoP#k7a&mgEgg2g$'_aMW+Ug>G46H5H5fJRP=q!JAdtf^E9"bF0kk5m5Zd)oU9aFGmq5kCA-NAMQkk.k%L\d5"PL%Z@F3b]PV@t=jWR*b7S7#/:/AneKI?K%C9kmJ70\EZI&\^RL0XK4H*f:7H/"o2iZPT!0[Oh$<qcU6'QHA2aA(]YrNb/(,VcC\5F4`%(Xt5F)]\q20'6tlBVHc?,UNLL3WKl1,Us)SkT%OHkr9Nfd0V"Za:#H(EHNr;E68>lMP1\fS'Zc@@VVcN:U%@BJuL%V)]`ulf/:8V%iif*'pV;XgLaM'V//oU;aO[6]JN\hd?D=8%H%O8m@bKrbbd,XT9nCRdfLEp6WJ8A=3WN-EqXE!&a2275<"BX.5`LmTX0;Vb45EjM%)a^!PVIYB6Kt>pR%`0dW71<r1;_oG<]1bdD&r7[!7Nrl*9'64ULY<keUN:+INQtO9g#sDIe8FEi<Z/r[``[IG-i'du0>rF<Aif(D%+ArJ"dkQ=Ubu#MH!^S!hMTp6\E*HrNk^WntC.5j^h/1%R:&klgpeCfipmomi2D!hj&.sa`&ZBI[h)<F7Fl\$E*9`Ih=lqFm=]X4K%)hF,Q>8X0X<-7YV(K?6h#*:fqW@:i?C.>us"b<OE&%[sn=;%kHnPTqr<^[_V1\$"5MHM;N6$*9^(m79L5!6]=#9cs>6c(&Jjskp!%@kn?&+Fm'/.!X"b!RZ"`R<Y*uP'PD"mEh8nWTSB?>oho_PX\ZH1Q/9]L.I%Ig[bb<.#Bj80Efq,4%h#)!TQ2n,XESFe7e1fh!B7/%Iq1g,qWNS<,=p5G]M5n)*G%Vt;?`nM!sB)Mm7<GO0/>EH9W\0-h3&$g,Y90AZtSYQV-D>A)ZF3s*c22l8WD(k4,6-NTD0TGD[e`f%_'=U'ec>)0\jW;j1p#O6TUU&K((J^n!AZKa^1P3_rmk'n&sBDZ7VeGaM?nqZdaqGcUL=EH$;a8T5j50b,S<=1%#'sPnsZLTR?UC%%[Z*h`@$ie5.M7rIX%]fF66X9bWKCT0e@RINOnLt'Pd/1h9ZX6T,f$j6<3Qs/c6`XI---GV/cgXNTU&L[0]\!&%V*fm+GM@D9*W$b%%Utk&*/s`>*%'qXEqM/:OX#`Xff%g=n)TpMH)CX0'^C&p_/eZe,/KkT=`)5%61Yac'!-=N1/G=^i>Q@F//D?T/2gY]EQhrM=WFol%[X,pKGK`A7SlcIP^f9,(D&>M`PA(t4XT5'dYN8R]+f7M+_m%mL8])NUXr.Ia1n;Ds<hG)&\q418QG^d@7GURrEgbHj[El9);<K1B%3aW6eY@K[J8RtiW;'-DqOU`d3'gb/bVFA$!ECd4Q'W];I#u&lH:0I70r3WE.\8G0hoo-6WGR'KcSF`V3%?"nl6q$$M)Ha'7S7uEL%,2+CVOn]Rjm%pCgC7h0N'd@.RI:@hF>Jro<Q6jc\B%\Q1!_F)>]GoTQ#bmb#M51a\`0?,(k7&+.;`0-I4u#l-R;C`b9b[^b9pGlF%LlGl<2Bs.iC"k$AU'LgOOD,7K-FHCCN<5T=8>MIf.0uZiP/0jr4G4S$4:G"@J4MG+c:C54=eZ:Ne4;<&S59<@(b)t7K#3ot^]7Nq%bSJ&0aja$t.7%B`)BMP-]t1&'W0%-4=#^is3^o67BE=PK1/l(G;0WX0;=J@COs_R`7SL8ri,NNfDicbPJ4<Pj3"s8K#I?Wgk1ao'%M?tG>?0"X]b[jh4$/8`6F.&;&JtjuWS=+sObW$nLM?U5D'FmOC)ZaJ!'#[<A`5D_]N>)L/2:]-4cu3ZI1E-L[W)Io$R4&%Zo+s8]%TODZmL=dmsa+>f37LI4mY&Q@W.9l,l`'eU+B$bh/$%%N-7>IZ30ZHi*2FFcYLHLM&-,<p_'qNT=@:0Sg-C,&o`)Xr1+92EN*;':3%[_<?le0MW0$+:VV#g&2u94<ea&53Uh@$eq;4-\HVb_&D>_ka@&ZkP(HOr7:G"2dMXQDnd2'?GM%B`U%l9%;0FOAcZ$\crS*",)J_%+>.G31cUk]/IIHX+MY1B"I4g)km7BVp"qJc8PfK\UFq_<))AZKKeuhNRT@3Na"A+N>CkL37%eXKgBrTLaBOh';eH]#%J2]>#O*]t%/I8)oC_[cGM5:=[P@9jnGGW;A!JnEs"fdbL@`/Pfq?)+4Wof]N78fiCKI<&gR+,1`JM:aiE??W_oVAKcUY72/Ebd)=7o>IA#o37<%PdcMmdAT/C%KrKZ;Seh:*<=fS%[_f;Nf=;R@g+.#Y)XI(N$L6bReSauC6c'YC)_lRY10CG9hX_]M]M="JV,;J-otYmhBhX4\fgS:%JQ=,$W=mcMesKL[cJ"H%3!\3Sg;2t/T1<;:9V&+Qr2^=I7TK3[;,*U[8Gn<0ehgO[;Ba[FiV/J2/CKeI:fdWn9\QgD*ltKclBePf%7K]#dYb7S>7N"Hbin5N.5X?'8"!S,I6/SFk,e"]?*#Ol)(D13i8PF\/*B/Oo13ht6G&u;DL;p0tcE/9?ZH7^8Q8/IX$/P-JA.h#&%g&rNB)9`_U8U(aP]HFMf=[W?WE3h5$_?'_":&5pTI&-rNP0$Je(5Af)Ihpn9$kPc_WI5(:"d"9$3?"!57tbt&LSB->!MX<QVbh>r%AVWGM^/.=k'g`Hg.QHKk&.F0qe1#`5k2kNg1mSNN2"B(QA;,Xq]$l8)hB\p/S&lXeJ?":F9[P+X!!dTPOd`8r#R./6JDe,[=R3cj%H"\/&*]4m7,!:uFY10-YL992tN*jA<&VIJFN-bL<7MnK;$b/0.%&=85ZR?PO=d&,cS)]f(@`Al`NlX;,$8/nX#)%Ml(Bdraee&Pf%V\N_R1>^Bn)"q&diG:Rr[Wsma=I(\Wa<\rq;H:<TO!CHf<>#`DikQ1P:GAl8D2Cf]9Pn>]2QDB0ZT+[q-jCE.$A/LlKaBec&SYU7%p7Pf.g^XZbJ0NIp)DO<.R0Hrr",@[#2;;Ym6P?mj'lL?*iKD?&dmDDW-8CfT`?_HWegP_OZ3Ed_)3'L3%IR=!Yp^:r)K66iAhk*u%n/)T2Q2j5D;UZ'p-B)/:njJEZXNVrBmMZ/h@C\(*oEm68N9Xsm=AqJqlC)5;LP#3+b-tSb%M4Wj.+TT8*=;k8/l7<2CJo]0>%pfi%K3/]m%RpP"*$uTBip($9/rh=u%^YD3MV)g:XfastBTgT+Js@Zt6rHG2(N]Iji&-pu*,m0S6`lb=fbT6VS-?6$?t$@nA6$Z)diuqD%\OF$Y/ag>_JMlkP'j(PTh-<EX(o+kd&#,SUcR^Q+SKC*'<N\/`KP?WDDU/CiEO;7Q'NUi[M2&7EqQ)pu7hqN)Cs$<iT@H+UYbp?$%)cP]g+^$0+KnW++"3sqqYk5$?4B2rt:jBhp^`g&fA?ip:A$O.UN+8_RP/VI"Cp%!4S`eZ!!F,4/:)U-<o]:i1d=(t(8KYM4\dqI^%r^_s&6"kg#>=nr"Je10Z^eof.@hf\===8\ketlqm]#_,>!&4ZY-?Y<46I%euQ^2bJAf-36-U;ho<si(k'(>uWl!U:(c4?&#6mFGm%,RY;3MZS/u1_%kK&tS#*GY_fu_8/)`Lrd/o9ck2hDN[;pB[Ct:?j?/>>D+n7,HNR.ec:D5,G(gKG5`Y@A?mPM#3H_BNpor<!,;OU%*qfU@KS-:X;,[b^]]gu$L5QBN'PsQNA-j-!1^#c2\&m()J`A;?FB`L1Vn/$2OY!S-4O\@Nf;>5QV]mUR:sXmjN3K"u_o?]"4HNeN%AFl`4\?.%GXGJ]MLPc0E2FmsH%<#jr90m5p!shcm&8!l*q["rc*^`c[7(.pXHU4nc"hA9Cm!o@P;ZXPO?j_-&RZb$4+c$EgUiq0j%hFBo22H=.qi)BtO\3`.<fr\`qGYKFs&m#F.5e8<4L]k;H^fMnfh0To7&Dk7#N(#^YnBJ:I()%N3Ro'6rC;JQEW3Vi:.(;:Xh0W0d%&-#%jBq+=7*J`,]$m:E6JQ8WbN+IO4!@M@_%=\@O'Jp429Nh^99p$t;0gl_m24T;%eR:k%?Pp7X)f1Kf791A$8MNbpeYX9$FpT@n%?Rb%V[ocY/LfgL0K!6sq__oD9T1kuA**(qd3U!mP<oY%<iW)>UF,<o:Z]^G]1RsSEGDa#u\@GL:<N6s7RnOi*L=!+XDp,-i4*8>Y%1uQaV/r$brnA091&[I?14A6p2Y%_"M$.P/OYX9HY&Q]!J0d*uBqS3ZS<.WP8cl!0ui(="Q[9Fh""^E4$k]d.0#V;=Tj7`t9Pu@,8%0o2.9)6O=Z#&s[_#/FFi$tKhP[,YRG@t=_F!8F_H=rYb6IE*orFP?Hno!r`u*\e]YNLQg.&HJa1R+"V>T*<-U=;[/iI5m\`-.mgP%5^"`YN\#j8.Y;4L9XmWa:TCQ+[f)RlC'KO(3(i.+226Y5$P9ns_]XCiGu#!M%M^\`FLHtV+O1fh<46.<e5c!J*ACF1!?:s66n$Y]%K=kltFHGbhl!Mi6/AOD=#Z)d=J1Upc/VS=2DD6o`;$cD^@\_SP+I.gm#Fu;8\c]i*f._gdVT%LR"+\IE6+%?l_/qrD%V7=/2Wk%s%[=(c1D7Ph[0=_$*-RI/m/o?)V&)jNmC,chsJ=7?*'u^8(msD0_:E]X"H`\#ka$+e6hIODQcUr,*K^FS73$NalVHjkf3Hi\c%t*Bh%l]/Zq%K(@AH.tIeJ#k(-cN'G0?h[kr^40[n#TZ?!GkHqK^\UWAg:K)p$?YmG\0T!sf\0_F8$hHmDth:H:C=WYQAX_TVtHkS=7Tia%Bn*ltS54=fZ^(Gs5dhY!Y-MR&*`5NBcOp^N2KW9BGb3-kd?qVB&Z_b94,/r.>+Z9E#;<.eLJBlJ^OTdgeZ<761"]u_YuY]ML:t>=%Q^Ie14ULk:A'1l#&X2BI*ZGD;XRAI`cZNB(:1@a!e`\KcW?bo4M%c@gjN+t74tR81D"J\ko!N)90jC/+:)JB5,X^^Rm$T/92LqcE%cCb>HPEC_d@O3^ZN\`NQZk3sJGK,jIh-D'-%QsXC*ge0!Z?S+193FH8>n]1P=$UF0qm,0K^3Tt&9=)J"pI=l72Wb_+2*$e"H\%9Z%=,Yk7kA*[R9\`Z/f70I-2bn'SP\+eP@uWU?q(<i.cS41HE3$-eM$6X1@b@e^.K&U3R\:o1,`I+Za)94<3`Puo&(t_p\'5J2"mQVa%nt(p,mB)d67-n3n-*%a1$EaZ<$)41u)/g$9WRs>5=&>_#(Vf]l,@T7X/FW;6-E#@.0@4e5C/`r8^1ZSRrhA96I!d4T$@Fr])Z#sX%pd$2j'F*On`Q(3tM9f5na2.f\o4q-%`%p?[<PfkcAD>`]@MT+j-9Q?2M=GWGL;<tfmr&j_hKT=;`;C]cTik%Qne,GOGu@^k(ll;E%(n/VM.V(e7eZ<'3^I#,+fHXcF_Yshu3qiQI5.(HYNf,WonOXis?N#R4Dlh*\r3=eKf,.7t[Fp[p7gELBH^-432Bac2l0M4TRD%9+%^Q+AlB\<GRmh?tVlapq"k)JT:M>UJf'QedPCHup@FtP139CJ#hV[4_#b.t1:\Oa&)WGp`Jj>oKt;3t*(#+_uAQ:bd;5WR'NGVOOg%BiZ$c'k[_Gd]h\)bWh3Te>2'NMQm^%&'AT7AE&RSF;F/DS1Pk3\2:jYE[o&TJ'L3!Ij-YD%&4/m+!CDK>,kHbd"Sf<PijS-OJu*G%q0[/k&!LE2FpK:Z4]ej`e[8JqZr4O]jcGsoMMN?!cOic8"'Ds`AjEL4NQU`sb4tp4e19BgM3G:/Qm2EF+_sOL`j8+4.4Yfg[(#E2%]3!\6K^>:CVtq=(+Z?1Qf%HK2*ZT]h1Rn=/>sK:H`Uub^2Kqk_5?4^r!Ofa!"BOZD54A=%\YFIq<g45WI9P-J^QK[sRf32N&teO/%B.NeLW8Rc.%Kk"%MdNG/&&Sq1Tl_(`/+cY`NS1d%"'iOd`@TJ;kYuNd6J'J11dGM4(ZS,"V)o8c$LF9]`n.79V_/(j%^If\%(0e8%_q^OEJrndi_LM_pY#Qqq0]R?4)BHdre#WpW?l>s../]66V9r*5L,?GDhCq!<l4Be]["S?=m!u%ij>!UZ(en-rZAuhdIh#LVDBoTC%g_XG>jg3eO>ti'GEaT1+1T@*abggOJB-oL*d_#USXg`V\+"%R"Kg6,mG(0C1_s"n8$)N[`Y_ao6XM*8/?>4$@54)D?R*En#ZmSiI%iRhX+b/Irp5#U'i#Z\HcFrEA:^HASQN7-"+rerbjk#tP"SMBB'luX6'*&j\mm*lK+9f_Rs[Ofiq6JW?+^$oY-4Pa+D)ni,mm>pDa%_j2Xe^1aVh?"Gd/mIVDV11J:4M^S,.CL'Xd$Q9O+I4>b74A"AALk@*7>-KG*i=F<GXb-H$jtWlEZAX)SG]8kH-!'Hd,@]<\.@I2I%h\u4fU:tUE^5@TceQGVH_4!teQEt<Bd.`=d-l&5]FX3[V8p@q'<0MFV2!*S?7#^AuP&hJ*.ZIH?-DW)re%R\P<)S(o.G.M'"PN%@%Y2q3-S.3dUaXFa7KMj2d]0f$)(\hmN_4P@p4sA%%07iCX2FI3%2Wchu'fh\*CQ"LZ7o&O/l*\3rB.fdjm6>RiPfSLLVH]EtXKgJ*%^$2i,,[)(t>@g=Cb`O:%8fc3@]cmJccjo0nQrT>MF_E>*@[e6X.4K?mF?=b`CN,#!=eUc3XjdthWen8`D$P<4<1%LJW`M/82h'pQ%hagkS$Zd6QR[d'`]g0flX1"'"f(1aNc]e+on3,^Pd+_9_EU;-mdJ#0eYsu+8hoa.j47Uur^8DQS*$[)0Tdc'mF<Wba@?65@CY'"[%I+*T8'kCZDHsUR)8W7P63Yf+tA.6V<,S"i8jV6>kVLM0n8aI(2]#Q>CLs%bG$4F7CV'>0951ifddtSR2MnbfNkV>UR#2rEEkWrdc%8U\)a>+]uq31?#mB([8hCtQIClsaXkBbs,L18V$a*S0N>n8<G=M@Sgb9W5d],nD175#@oq*"e<>0e-rLV<YEc@WL(rQ>mOF4p,Le%o-?=./7N?CS`,-))M0f?CHHZ]r8P/^&K0.Q[5',!dZLW6o>pcK:@$Ci8RcXdX.;!%VT`>]5\Qju-6(("?R:K^7U(DD\"U_a/_ZWA%'FuF*:XpI5&8`]8:?aHFJulc'>(&^eipY.L_QbuUA,)KHm:[P@l_a*i%XnS:Et05EOf_4[29<*JX%\,U;;]dmLT@u=3h9bo(FTY@%eoEY/d^OV['_ScQS!@`!B<UmP&qnT#g3')ER<[NXK%`rnaE;!RLkU8j^,>9U7=FL!HY*k><kFuUS+WU;0C3]!\GY_p]A'pqLdB6\%2`nF`%1N];agZ_>[5DM,Ud8JDAmQ8;Bi?Ih0QdUcA9+.$V*jBq8Ci`9RouR1UCJJJY)5%Z37i*3FG%ER[T%4-OF"o5`AUFYk^Dkk%*3lU'/lnbWR%]X8,[RN='?'O%Are"QT3JSZ.;SlQEbS<dmN6&Hd4/9&:'JCPQF1\XMh+u/[4L_)BO7]7;nS9Y1/2^I7?VJpG/rEU%BXF\l*VUB`%QW9;)V^$UDTFq\l&I*N`_r_;#uOuD"]1aXMq@LP$rEkpMMPl.n["q=KZu=Z3uJnHM5P,i>URjO8:s"/1manB1>4H*%@57r9O!/!Hl`kj!Trl*I<fa9B/)ItB:@U2"6YnsL]hCL.WFe8'ZAZ\h9JN*H^T9;6QfQ:PV_i8FdoS2b?1mNAI=<t02.XJd26'%S%I9*KHDA>AGE*?U%Fm,#0pfnP`XAEL':3IDtQT-^RlBnLGT+;s]00sIJ<V(BKj#Tso3+3k$,8m%P<TSh*KGoUWl:D#eQ;k">=Vb%5%1E#hkTE?(*Bp*!1$j"FiaKtNi^b1?a]qm(L'DEmB3X0NsKpYt,Ni,eN>4=kIqm0ia;d?b<C;e4KB3jB@e<6q81`+9ecb?H$\rB0U%;9fb0\d].R\?jh]HT<9^m[:J^[98^Z;EXLN@j3Ae;HM%.AB./OhM@Ob@TZo:.dN7CeLmE]<0nG3DS"iD;FRi`e,jS(aeoim1D4<L%0Efq\9"8EQ,Z89?p+RiZ^@[LaQOD\!=f]\&MVP9IhoDD`ciW]:LP"%$NBJIt8I^?DB.4dHf1fI\PD4oN[WuBu5V/C)`M@Nl<]ma+%/to9[C:&TUh(qrijWhAk-Mq4G7hIKeT*[-ViIPA&e%p`mPab78b*bm<5uE%7_AJs=db?MFKkfS`)n:Bt>5O(VFP'`NGAO90aeOma%#$%4_]F@*dcp@l_>c)m1L&b`8^$W^7P<PLhCkD?kgO@g:Fd?1d$aeZ4kKpm9fgHT33%(XUF!G;+?'W$))B4Y&%pAmnM\!SelD.!c%j#!M&,_e7b.QVVfgjj]'s5Sef1l6U\f`IYr>Y42.cF&kI)aDMSm$2R0>SYPf9C'"jDJXTd#=m?4-5lXObWH0uC130ZA]4GT8o3B'%pAUf#BHF7`-qHf`%p#Hg8.0k)g?4pmAtF(Wg.Wi'e%DpH`,WmH.?]Auf;'YKO@/j4!`g%L)JU`/FUda"TB@t">,SS=\f$4On\stK%n:FV!)*\rFd<8N!79H-OO0(]>F:P9&_=6&Mk,I)Sfn53M8?clM1@=3^0mBOcjK%0R_*?9%bs:LmiK^nj#[uh%Qqf/:eq9q^W.k`s%l'>1uh2m0T9MIi2GhU;)]paYV;(o$=`iPoO\jKuHP+I=:\S,5rcJDZj:a1'_S'/Ll4JIYN+lk&V.HnCmA2UuOeT@BCoQVThW<V_]%;HAnlBXP6^\@U^Bp("9oGb2*?2F4uW75btt:WGZ$]RIVY+02UBqlP6pZ4ik4jEi@-"_T>%+"l#\8L`MH*>VQ$OPuB<_E!bF)b2kO%psltqa-_SrR(7@TQ*Le.NjUG_<FH4//mu5Y^n<*n>>MmdU+!O3HpfUCb=)H..58cI8-OUX.`M@iPAG[UEPZPMX\q"_8?#6gVG!Tr%dS167pfnc3C$I1-A8K#E`uQ'X&@s<[=;P##G3*g%Bt!Odd%.Y)d+LD<G"UFqN_^d>$284))rE'@C,_OOL`E;5oDk6jWPfu`g=*'i%MZDHYq_MJ@Vp7UF-Z7CDs3(U\IKJ)"3n.E^U"r=3ETNTh3?ZOYWZDYG%0/:ao#$9K\rK<ZH&laL2BptBWDOH)L_rg_]t&c7i@6NT%\nd_?DG8&\c;[k;FW-IWY$T7SFhMS.n=i(-W[ifW+OGu3!#2Y<PE'_,BZ^<:Rg0.F".@2OUF7ccn;Q4(>a,4i"HZ59,A@Q@(P?4n%=:."8*:Tr^;j+/#.&Ts/fI87j+X5-th1YC3Fn;%^l*JTq!egO&1,mE$;p7U4?fE8Ib#"UcQ0MOQ8]OUNZ[;%;:\NUe!-RtiLbP97%FkVTd@\iSKXVC-p261ma3!;]k<7.]S2[(ua?A+_%lCM/ud!NsK,GgpE72Elo!(7<$B2$E4V7)K;F?-_^KmG]Ob3TZHJ$P?+PHDJZ%>BUaiqNbXhKfPJAA7!fYQjf?N5!S&9L:t@#c`Obp>76W?X7"':DsVJaNaf_hV_Yfq`k!pEaK!u*gKE-2hJB^DW%rITY`pHBdp.S_%:=YKa96-V*Kg<r$<*%kf/B$plj=jmI8k(`"3\/>'CE''&ZN[_uCA_j&^9&cR:s$IMmh%ilR_G:'*CF9u<Q#3_W\O1YBl00D1h^bb%M:Q2mA6rr+.eB`R=PH0t(t`IPFXdW#OD(QIR>KG-1s49?/ZlQe.9#;_'?(TpQuVl-_(fALN4[)JMVCNoV$32V1G?T2U'YmRlKM0H%8MjcZ/P<(Ce8A-Vc0MkN+O7,i]JN.`qQP`dY)DU8b#L0-BqAU7LZH#iCFU-Tr%CVG@B0](%QdouHVL);[cH)?98Sh:B6CgJ\_#IB%Z)\7>oiC?WSf8m0#[+KTLX]VWce8#C[<F*^Kud]]%^r]PGcAe*6Z9U8DVL/3*P-.#+-ZVuK)GR>rgsg*/`$,aSbR"I577"Z7BTEH%_jZu02nBBD7'%h^cgT<Xm;%ZtjQYE[=P[Da;!*f;#MB"kd<?V/`Ks\nj6ul'Yu(X+&@Bu6.Z3hePZ]85]8\/ErXlJT+870gjr_MQ%TP]-&FOoJWd,PUi(u4dqLr$dT(9B2[JJ"hV\O"=E,E%=e3a%J76uh5Uk:WZYIWjnsK,3m84-`aA)MT7h]HTG>,"&l9p9c$JAtI\f%VIj9+X1>5A>J&`jT;kE2YC78u:gKhH0oVBYgP/Tn;(\Ig,iNY.efN$a#7_$?;]!:e13^btZA5nD-c3%.$+8OBjP7FhRdZjF]R6*[%BSTaj3H,Uq*Ccnna!gBPWLd?g<;0g8YRE.P]8)4$3Xj@i/\^hP/`I[Hb8,kKaDKiC41pe-C8sA&el9'>a8/d.E)GhCp#aihl9=B+%-60]6iq(s!U5@JKk,l2>FI>".MF"]tKmlN;XBNN3#.pa$Vq#)rk3CJ@\T`GGb4FCWRg_+O+W^mb)bpIlM"PX&DTW"('Ce7#PN<G1%nDjZR"6*rMVE_cJ!EQBk-;0VQkW=&TDe(D%(bppeL#4J">5eM2qQooXVS,KT?/09UNs4En_)8;\g#0(=o,KH]ZiO'DTuXl7fY\N.%_S]$<IdC^$1Q@C)oA/_3l/C+E"(!E=@>o.1L7Co=/X"+_oF<JK).R@#j2DFTPeHn[hnD\]p-7%-?G/u0+2=H9nlG=fY@#$sq6<G6%%HO2Chf!@u!eWq(LM&UaR9=Na=$eg_*W^n?"!9U3?OD(.;:iiYVk5F5s1A6EIUQ't)rmsOMgrd&eMA!p6isN#Q&#B#K=?iRdbFo[%nD#]a__3kcd7'u8YO,qH1)TY>:m8-a=@[bdCM84]\b'2oq=[O3W\ihmTA0@$l)QZIVWiLMP:7FSINWa,m^UY/3S9>UEVZ^6=W`-"%rT[&sKk\CC,/BRHXMAo=<,_+8P*'jY$KR<G&MV06G50Q1Qd^KT&<TM.r>LfD(JE`#kQ:8,Tr5GETg!$!AEAb4LK8YuQ_$D;Js[c%%=C[@3E-(0Dle.G%CnrI`O1niN<+F-j"e(]j?hJLJZ)">6(l/0.10=@W,cmLnn;D(dbS9K\f1915O!j/X7dgL<5'hi!!!D<1X/&sS%1LTU9>>Wi3Bc@m2-3O&_$%e+bRNim>*"]5BmQHe#fO21LdaS[OL@SH[2Ya)/&sK;G6G;Y7#$_/-0_&4Zhi&ro=I3C540`5@M2fim%k>51&.u<<&^nD5c+1`>Pef`1ZUp]9\j%ufc&ZsDiHAQD/@10,(<j#C[`,%GQG=,,4+Eeich84e*a,4D$@K3F^H/<,uh%4n(+l!:*%J.LN(U8O6o$fbpYPI;5HL5b2_aCF"qi$(e$1noE`!/"9E0@1ZTODfQVYY-`dF^N=7C/6N*2<L5S6Lj475ogCO%qi]M\-Dd8cSY&B%k,Z?Y&DF],d29mH:rlmaaA/,+%h"a""M85CqGdrYEN#FRO3:b[!q8E(,9g-e8T3A*8GRKrno2Mt@jnpNZe:cEILJlsN9(Kn(D&c?%5_L#'0;KduQ&&>l!\<&g?!]>fkl)TGcEN*U8+9Xt5sqVh$#m"B!;N,e2uCt>!q>MfHqZK<$jZqn?0Z:"b2WBmbD*shiI<ZKa.Ltt%\sPH3s552f/1LL1(<D&T,/2p!m>X2s)>iY]>=BVtN2s365Q]KR'a4kK.b:1ZJ5'1YfZ60E/7:7g'\1L^8ni*0+45+#%-`ZD,fB)_%#[&[/Sq^T:Xq&0PG@o^JOcKsAl@<.1_PY$iWT9IiG7B3A$HTZkM!dlH:8nqi/]P:Iq3[=e9^DLR655t.*5P_Gk_@s-9/R)_+QL>g%T6RrQ=o8,qD+Z2UBJ=ElLM[TZM)J9)[`?uQ!TOg'g1J?u%mOKVb^A_b@gI]Y8h+kI+jNl93JT;W3$rck%BCN"2H^5o332@gMl\lN%UpL^YU?$2?Fe'IfesJuI8M^p?_tK7"W5PM);nZYs%AcqDl?Pi)@mKDCnEZEkM$-E'%6j[u'Ns(_#VL:!N>+s1F65rSA/WKJ7?X67%$"H,'b6eqD`.3"[Ua0Arrh@Ja"*s2kM@=#".5aq4R,)7NA0[Qf)\X/Vp?OV#rZhm16U:O,f2ud?0?PEJ8o<&P8l[V_Sn'ce6.29d%SZdhaT,p*c^;?:#j9$J^c(TnDDHeV?JSuq?i=U2A+DYa'70R*o.*N@ZNUO3D:d_#+oY`WbFguKbU9#-F&Xt@mJI-I,S>HrcOe%7\%kbYf6Usrri'"GCOdZVj0YPeQ$U!tsscELbRFR5GI0K(bS4Z-I-</),!a`tJUY,1U'D-d-'I7dS?iJR6,BLlOMk"`RU`(fWi3]ghm%GJ=ru#IbhR^ok\VZl<5Fgc]\(mp<2OnN:ea`S:DiL#4k'dm[!15#:'N]K6_B2sZbrDuDrD3QcTDB>Uu87=\\ghaeUV_XM<)PIU4s%L.c+AXCs46+[#+)C6Z+/WYqFb7)'W:NepSeXu/1+IcZ)5k0cSqM*6-K:t%Q)]X$;0$Bj'4?<rA]6WVMl&m"A9+SW0V\!i7P]=CY\%h5Nj7eT%4IVl@9k$>0r\90.N[(g5\]nces\F3B/p\La*TTVj2g[)3PS]_inQ37mIp*HCOP-cMQj8CF`14J%k%@+q=TmuJVRFspoc%q@Ws#Y@\g>FA^slEm_pW97g:\pp29_7^aSpQjA4!W(6^ZF*%<Y`G<[TbZTOPM0'!hp=:pYBeQHrL7,%TT\0`0!t\fBS$"p-UKr7W%@k!eOnNj<XTIWUf<j"'NV*dd8FO%]q8^et:qAe'UqcU+]4YIqE!I-5QfiVXC`lh#$JP1lu6&u!TAmT`#%gBY]W/L,IDq(^*>6on+%.,SgdpR9\=ruIT(_R&-R+.ZfR782_/SWNL;Ma/sq^i?eof@$$KWr24BR(Eo*CGA5q'V:9.$P-Lk#jAc&J-Mp*i3OsBIjbJIM4`K>%PBUP@Q,t0`$!NC#&YreZg_.]3hP\A52!31h8@<F9!&6h2/_#DL([+&`Z(aC]5$F$*;g,+$p"K1S(u+&YRfK.Dd3re4003:,k-&+n%Z*WFZp2n)g(1#ZnL+m.M*4TF)))'9Feg#C?]4Po+[`sa\DW.onjFIo"Ae#QUid%C'!(eqI/klB-@%+r/.d?UkBaUad?"D57';(k+%S(WIcN^\_7;5C4B6f/+A,VH#E(+%I_a%7uGh:f9<j?17B,u[?G9fa,_jSXWt46QHW1K]\V9@s@W4`;6_!]6q3"Elrub'>s@Y=?%F%a*e6mJil`Hh<j4ggDrAY\\keOjS"80^`_d;WmgYd,+=&Od3Tuh0>dlRA9dG61_Fb8*A3+n<JISe<>3/\a$(!6&<_V[-SE^.5aW!a%<lLq)@BM'&c3^;2VMV&[re>OLC]RFM4t8n',NjChAL6@U_/=JIBAKu7@gpmNV77BV=1U,C_/h:GN#BJ(=]N1-d5UCLJu:U=;:?#k%e`9:oQGlB1/^ZL-'S(qPE@=0jh_LrQXL3@ER(>WA).o;+3:$/m5!]Q'k.FBQag+KWNe\MKpu2J?o<o+W@6sO*ZVI?k$_)9B+TL<l%duH\E2,&A,KY0Y_+L5Q(;?/u&2=C3)M&A!/#J:`1'e@>IB5g\N1G7?6YQC[>21&]:X-$Qa]eBdL=)tCu=H5UbPO)k^>:D_(L!$B5%+l-A)D0NcdbDZtf]OudD-(iA7)j5(,7nf4#:6N^4l%N5GfhQNSaVD<Cc!i`m2p=sSD.poY@;cXZ)'bq-in$/T8CUL*iMjlcBp".b%&h/4\]%9SWQj#2i>N*>;ApR7Mo,QTKF;\5G="kb6*iFG<>aMj8IOb4;'gQ,$b7NRmqT`60mbDqd*nZ@@e$rheCOA2<.n=/-#*=)h%Oj91W@TO^d<"Om&O/,[l4_6Mj^5hlK!Lqf`f8c"o78ACm,/+@><[ErV1'S84G"r'T]#LoP]:S'G"!C)gBqTr%e)d@!PhNjoYu5]d%<NW.`#+R"j'#$^E[TTCDn-4P+NOm*;!B:q[m6gdI@^s"9#9ei)\@Hj'EV/XYAH],!fWa2V)>5\AforZ6'3eMW_er7GEX:KE,9tr#%"D'^V77?j6X7<P)6n&7jrfp_PmS[=.U514kBA[p*`ba)m>7SiS#c&H\)7W]c8rbR]2Rj\bQ@Ds#\(c\^_%>qp92=\9T>N9bLL_OY%Lb@psb[?Eh&K!M4D!&.Mg/E,E`%#=aq-+A&7ItdL<,p*o7Dgl"WqLCoPC#Qp-g_=EK*R?MkK=0)=(clocRiiYVgY!7=neMTiq$E!%"l',=g]2p+I%\^`hsGtO^S1^>o3lgN9-Kf`P>"'Jp-Vr\83Xma^!FmT/.!,N<G97`DZ[;cU)eG$URRDkHUMHkOHm'u'XPIdZS%bu%e7)G[=ri0Y_tUerS8(5=C!nVF:K2S:!%b;\]5Ri6k9W+iV270Ie!DQ[dR)NE;nt0_mo5gpLS*m].=CY(1Qqf#[#MuM1pY*Y0B4_t%VmbDAEVRW_n]hG/10L_j5f/7UK&=.$=oYtQYR;dQ=H8_EqJ+6&itSBDDObT[_/>c,XH/-"G*oVSHE\"2N3%h*I1']dJ@UpfI-Oaa%O1!pt+4+RF#kb;uJ&(Wgrd:pHDC9CcQVU8;(dq[o'lU?g?=l[c)MDE\IkGn)+dnZm,uk6JAm"Jg--c!WN)c*f\L[M0Pj6C@*,=aI%%uVVbGK[q46saaXig7m4p6^)hGot&<A6tjR0.tD[Lq1aQc2BW1bX5%"/<Q9gAOflI0D@%D>ib"C2n6rP=Gpkr@?u\@Ji5"&_ll1'%WDaZ:[`HX2?o5-%+qGp%k*%$PQRr>PMnD1.B"(4c`g4](+&_1=\g?po!@G,_+qNMR@g8'NThp5E_@-N1m["V1PUW*&PW`3]7:'lT%iG'%+.2m8c]Nj:%_aWEO[`I3jM`fM=UVt@#kAEr**-=<FOPK)Z[lDoWFa3F3J!8>SSB;\[7:&1V/@.bdAjl@n0(S]sFclE,27pq>%W2<SY(5RdW"TgD6eQEtO/ArJJ2[b9DYXT!'@YpBaP9*6>b4N6($RM9dfX=&0lrrF!Pg&X_#)E?#s($YiYVJpCd)k?8o"5h_,%:b4%#g!'tMY\2"&83]L6-'HGAVh<a5SR`7YMkWc""E8JJ@M9/SdZ/=PY/5da8f(p*sgX%JZts?A:Qq`?+LmrMPY[Q#)J)F!FfPVJ3\oh%F,qK9gsC[6D5Wj(!o[AFAq2;>2i(]3!qPklJ,iltbl@dup%Gi]&"r^-gE2<N8;@):*%%rHr_O*$KS]>WNG\Op5*TEHZSg5oDY=;l%hX:(BFKjWg%snk*=hml*PPkNgH_dQ;9Dt1T!J,8^HQDJaTWFVYAUc*sQVcH9&.uB96qm:ZcI'o9^qdT0A`)kcfU+PM+0[EIc2N7P%V'l/X-Gm2UPiO1l[m-+a%taKfpRtukBR_Fr,^J,db-<mnljj\JqnpG)/jGH4.,#aMr6<K1dEE,gjD7"f1-[=]ic^$=Fk7M5&"q*c%ZTc2'=_B@r5%+9AiPpifOZgk^:l;gS0C-L\k53[liNJeYhI+IKDs7`"dES"Ah<nX0n>hc!TPXXCa+!A^/PeZ#9(AJ?_AckK21lqN%_P<*e\5T`JFR8s9D7nflk3$*@3>6iL=KM!KU\QF!Gtf4uDE!lH]c@AW%0ILC!sm]t.eAG=&`fB5\Z[_D"l)r5lA`8F.^Q27_RC&$%-njX_qKuY^Vo;Qi`$oGQ6S8qI/ZLE""%0j6/qIWk9SJfJ70qeThE]NR(4N`Q75?\]MS6lg0uJFk=+.8,$e].Da@2L/"';ZC!+Kqu%cnrs4FsA0VUdb\`ER^%>H9a/i%O(iV>oif=^<_N2askeVcRsA*Ta]M4%"geLSmqfLl>lU$AbZ,2PaJcNj5RosU2M13is8:q@=a0W%1s;]a0<h\A2WdYMX@;)@%_eZJ6=ItZi@\.1[H-71b$2ckR,FUi>J;[LUmTCbB<)a6`G<H/+d?e,X>hI=72E#=ifLU2.]T\^%I=h=%YXjIWG4\j<=C&PQf9ibOiJs%9`F/c=.9e=j)P[IEm1hRK>r8]!#No:I`3-KNJ(Dc-ZWA,YK<YfreF5?Z.usV0[L:g['@o>&>&nU3%Butd*>[2;gihQfP1]PR8&VHsrQX.)Xcq>o==4ngIqZ7.hE`Ul#?U4-Sj@cT7&$XCos7?J*j*H20<f^X>9++bZeo[2UN@l0iXpkIW%2&Vf,+Go'+;9BRh3Sciq,<:it0['7rU==?'mfrrXjVFc_$qp<Xr2p@Z<Efjue[ZZK=0M+"m(m"RchYLoJ(qjs5i+Ko\;?QWGHF1h%bb4d]=SA;s\qF>OkD7r#8/U.!(("#9MbMu6,c:<NPMA76Vr`3pQIfC>%n522@LPJ+(u9^UZ>!=jeT;Sd@IZZVWSS6Df4,U`/-1l'%4]i[#Z%+OrKd?m7KSg6c?4!a%K:0GPT+JDJ%TVff"YfKi9WB7>$].X=]+c<B3(#jRhYW.h2.e<H4mLabU"9[_/Qfo\!+*tqd;!LH%dJC1`m9ST?nN:SGO#]0[>5qNtV%51JVYD&&#[$"<leA*.IAi3-9/pKR)`8FU\KC@[kg1P><IFg4#F!YsbC@G]<S+j.lC<V!V'EKp%/D6H8^IT/l5`5ARA@pb)`\'#<h%A.!+F4H-94n"Cg^7$h5Z;DEF4M5+jc+0'$MMnFeRLc+AolppoW%Qn8VfX]GD7,]O*+Q&/?VCp%"4/(u$@"^Zk%lY!\u3@`bA8$K@eJT3(_t*7Ru,,.819p(6^^WS%tIjEe3brtrNUCRfhdsOElc3_IrP;eE^H<\dT0cCacqeDO`t&Q%]kbGl-.HYT/KC&cSAXIE-_,LMOrE[$$r7mVH:I>Se,6U'NF>'`n4X?F\hH+<g!o<?V-rsEFYdh0qp>3^h/%6<?HnW@p+=n*C562-%A`NI'7`'6O9K.a=VPG1tTfieEZrP.Q62s'L=17Pi\D&'r!B-M!%j4nB5!he[2i%4C%K":^Em^43T%t/UD1:E;(:s6_eoMF1?gMpf%dP$m3?IB*!!8$uDM$6;+=f`Zb:uH\GS+kEbYNXgd54P$/XC=&&f_^T0O@:I:A&!-tM76%2d(t6X#?*L,60JdG6ZHkN@=B^=HFV_c%4oEYCo^G(pR;`,jn)"&e5DQups5qL#s8&AAJ,P-es0p$%s6$lKs8MK%r:JHfpuP;drMSP&q4I,jrVknSJ,SJYrV#s.TE"hU^]!`4%hu;a6ceG(@s6[">qoeHC^&@VRr8iD1\N]QC5Q13bs8F+Tr*Q\BbV]~>%AI9_PrivateDataEnd