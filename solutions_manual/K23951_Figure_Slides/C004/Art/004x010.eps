%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x010.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 282 215
%%HiResBoundingBox: 0 0 281.9331 214.2793
%%CropBox: 0 0 281.9331 214.2793
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 7018 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7DA8FD077DA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FD04FF7D7E52%FD087DFD11A87DFD11A87DFD11A87DFD11A87DFD11A87DFD16A87DFD04FF%FD09A87DFD37FFA8FD23FFA8FD15FFA8FD0DFFA8A8FD26FFA87DA8A8A87E%A8A8A87EFD07A87EA8A8A87EA8A8A87EA8A8A87EFD06A8FD26FFA8FD0DFF%A8FD27FFA8FD21FFA8FD27FFA8FD0DFFA8A8FD26FFA8A8FFFFFFA8FFA9FD%04FFA852A87DA87DFD04A87EFD0CFFA8FD26FFA8FD0DFFA8FD27FFA8FFFF%A9A8A9A8A9A9FFFFFFA8FD047D53527E527D7DFD0BFFA8FD27FF83FD0DFF%A8A8FD26FFA8A8FD0AFFA87DA8A8A87DA87D7D7DFD0CFFA8A8FD25FF8383%FD0DFFA8FD27FFA8FD21FFA8FD26FFA87DFD0DFFA8A8FD26FFA8A8FD19FF%A8FD06FFA8A8FD25FFA8A8FD0DFFA8FD27FFA8FD0CFFA8A8FFFFFFA8FF7D%FD05A87DA8A8A9FD04FFA8FD25FFA8AEA8FD04FF7DFF7DA87DA87DA87DA8%A8FD26FFA8A8FFCACAA7CAC9CAFFFFFFA8527DA8A87D527D7D527D7D5352%FD047DFD04FFA8A8FD25FF83A8FD04FFA87D527DA852A87D847DA8FD26FF%A8FFFFFFCAFFCFFD05FFA87D7DA87D7D527D597DA8A852FD047DA8FD04FF%A8FD25FFA8A87DFD04FF7DA87DA87DA87DA87DA8A8FD26FFA8A8FD0BFF7E%FD04A8FFFFA8A8FFFFA8A8FFA8FFA8FD05FFA8FD24FFA8A8A8FD0DFFA8FD%27FFA8FD21FFA8FD25FFA7FFA8FD0DFFA8A8FD26FFA8A8FD1BFFA8A8FFFF%A8A8A8FD24FFA8A8A8FD0DFFA8FD27FFA8FFFFFFA8CFA8FFAEFFFFFFA87D%7DA8A8A87DA87DA859A87D7EFD057DA87EA8A8FD25FFA8FFA8FD0DFFA8A8%FD26FFA8A8FFFD04A8A7FD04FFA8277D527D7D7D527D527D525252FD057D%527D7DA8A8FD23FFA8A8FFA8FD0DFFA8FD27FFA8FD0BFFA9FD04A87DA8FF%7DAFA8A9A8A8A8FFFD04A87DFFA8FD25FF83FFA8FD0DFFA8A8FD26FFA8A8%FD0FFFA8FD11FFA8FD23FFA8A8FFA8FD0DFFA8FD27FFFD11A8FFFD0FA8A9%A8FD24FFA8A8FFA8FD0DFFA8A8FD27FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD25FF83FFFFA8FFFFFFFD%0BA8FD6EFFA8FFFFA8FD04FF7DFFFD087DA8FD6DFF7DFFFF7DFD04FF847E%7DA87E7D7D7D7E7EFD6DFFA8A8FFFFA8FD04FFA8FFA8FFA8FFA9FFFFA8A8%FD6CFFA8A8FFFFA8FD0DFFA8FD6DFFA8FFFFFFA8FD0DFFA8A8FD6CFFA8A8%FFFFA8FD0DFFA8FD6DFFA8FFFFFFA8FD0DFFA8A8FD6BFFA8A8FFFFFFA8FD%0DFFA8FD6CFFAEA8FFFFFFA8FD0DFFA8A8FD6BFF83CFFFFFFFA8FD0DFFA8%FD6CFFA8A8FFFFFFA8FD04FFA8FFA8FFA8FFA8FFA8A8A8FD6BFF83FD04FF%A8FD04FFA87EFD047D7E7D7D7DFD6BFFA8A8FD04FFA8FD04FF7D7D527D7D%7D59FD047DFD6AFFA883FFFFFFA87DFD04FFA9A8FD07FFA8FD6BFF83FD05%FFA8FD0DFFA8A8FD6AFFA8A8FD04FFA8FD0DFFA8FD6BFFA7FD05FFA8FD0D%FFA8A8FD69FFA8A8FD05FFA8FD0DFFA8FD6AFFAEA8FD05FFA8FD0DFFA8A8%FD69FF7DFD06FFA8FFA8FD0BFFA8FD6AFFA8FD06FFA852A8FD0BFFA8A8FD%69FF83FD06FFA87DA8FD0BFFA8FD69FFA8CFFD06FFA852A8FFFFFFA85284%7D7D7DA87DA8A8FD68FFA8A8FD06FFA8A87DFFFFFFA852527E59FD047DA8%FD68FF83FD07FF7D7D84FD04FF7DA87DFF7DA87DA8A8FD67FFA8A8FD06FF%CAA87D7DFD0BFFA8FD68FFA8A8FD05FFCACAA87DA8FD0BFFA8A8FD67FF83%FD05FFA1CAFFA8FD0DFFA8FD67FFA8A8FD04FFC3CFFFFFA8FD0DFFA8A8FD%66FFA883FFFFCAA1FD04FFA8FD0DFFA8FD67FF83FFFFC9CAFD05FFA8FD0D%FFA8A8FD66FFA8CAC9CAFD06FFA8FD0DFFA8FD67FFA0CAFD08FFA8FD0DFF%A8A8FD64FFCA7CA8FD09FFA8FD05FFFD06A884A8A8FD64FFCAC3A8FD0AFF%A8FD05FFA852FD057D537DA8FD61FFCAC9CAAE83FD0AFF7EFD05FFFD09A8%FD61FFCACACAFFA7FD0BFF7EFD0DFFA8A8FD5EFFCFA1CAFFFFA8A8FD0BFF%A8FD0DFFA8FD5EFFCAC9FD04FFAEA8FD0BFFA8FD0DFFA8A8FD5BFFCAC9CA%FD05FF7DFD0CFFA8FD0DFFA8FD5BFFC9CACFFD05FFA8A8FD0CFFA8FD0DFF%A8A8FD58FFCAA1CFFD07FFA8A8FD0CFFA8FD0DFFA8FD57FFCACAC9FD09FF%83FD0DFFA8FD0DFFA8A8FD55FFA1CACAFD09FF83A8FD0DFFA8FD0DFFA8FD%54FFCAC9CFFD0BFFA8FD0EFFA8FD06FF7DA87DA87DA87DA8A8FD51FFCAC9%A7FD0CFFA8A7FD0EFFA8FD05FFA8FD087DFD51FFC9CAFD0EFF83FD0FFF84%FD05FFA87D7D7D847DA87DA8A8FD4DFFCAC9A1FD0FFF83A8FD0FFFA8FD0D%FFA8FD4DFFC9CACAFD10FFA7FD10FFA8FD0DFFA8A8FD49FFCACAC3CAFD11%FFA8A8FD10FFA8FD0DFFA8FD49FFC9CACAFD13FF83FD11FFA8FD0DFFA8A8%FD45FFCACAC3CAFD14FF7DFD12FFA8FD0DFFA8FD45FFCACACAFD15FF83A8%FD12FFA8FD0DFFA8A8FD41FFCACAA1CAFD16FFA8A7FD13FFA8FD0DFFA8FD%41FFC9CACAFD17FFA8A8FD14FFA8FD0DFFA8A8FD3DFFCAC9C3FD1AFF83A8%FD14FFA8FD05FFFD04A8FFA8A8FFA8FD3BFFCACAC3CAFD1BFF83A8FD15FF%A8FD06FFFD067D52A8A8FD37FFCFCAA1C9CAFD1CFF7DA7FD16FFA8FD05FF%A8FD087DA8FD36FFCACACAFD1EFFA7A8FD17FF7DFD06FF7EFFA8FFA8FFA8%A8A8FD33FFC9C9C3CFFD1EFFA883A8FD18FFA8FD0DFFA8FD31FFCACAC9CF%FD20FFA883A8FD19FFA8FD0DFFA8A8FD2DFFC9CAA1CACAFD21FF7DA8FD1B%FFA8FD0DFFA8FD2BFFCACAC9CFCAFD22FFA87DFD1DFFA8FD0DFFA8A8FD25%FFCACAC9C9C9CACAFD23FFA7A8A7FD1EFFA8FD0DFFA8FD23FFCACAC9CACA%CFFD24FFA8A883A8FD20FFA8FD0DFFA8A8FD1DFFA8CAC9C9A1CACAFD25FF%A8A87DA7A8FD07FFA8FFA8A9A8A9A8A9A8A9A8A9A8A9A8A97EA97EA87EA9%7EA87EA984A8FD0DFFA8FD19FFCACFCACAC9CFCAFD1DFFA8FFA9FFA9FFA9%FFA8A884847D847EA9A8A9A8A9A8A9A8A9A8AFA8A9A8FFA9FFA8FFA9FFA8%FFFFFFA9FD0BFFA8FD0DFFA8A8FD11FFCACFCACAC9CAC9CAC9CFFFFFA8FF%AFA9A8AFA8A9A8FFA8A9A8A9A8A9A8A9A8A97EA9A8A97EA9A8A9A8A9A8A9%84A87D847D7E7D7D7DA8A8FFA8FD26FFA8FD0BFFA87D7DFFFFFFA9FFCACB%A8CACACAA8CAA8CAA1CAA1A1A1A8A2A8A8A9A8A9A8A9A8A9A8A9A8A9FD05%A8A9FD07A8CFA8AEA8CFA8A8A7AEA8A883A8A8AEA8CFA8FD19FFA8FD11FF%A8FFFFFFA8FD0BFFA8527D7DA8FD067D767D7C7D76FD047D847DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA77DA87D83FD097D837DA87DA87E%A87DA8A8A87EA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A884%A87EFD05A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D7DFD0BFFFD04A8FD%10FFA8FF7DFD0FFFA8FFA8FD0FFFA8FFA8FD0FFFFD04A8FD0EFFA8FFA8FF%A8FD0DFF84FFA8FF84FD0FFF7D53FD0FFFA87D7D7DA8FD0DFFA852537D84%FD0DFFA8527D7D7DFD0EFF7D527D7DFD0DFFA8A87D7D527DA8FD0CFF7DA8%7E7D7D7DFD0EFF7D7DFD0FFFA87DA87DFD0FFF537D7DFD0FFF527D7DA8FD%0EFF7D7D7DA8FD0EFF7DA87DA859FD0DFF7DA853A87DA8FD0FFFA8FD0FFF%A8A8A8FD23FFA8FD11FFA8FFA8FD0DFFA8A8A8FD0FFFA8FFA8AFA8FDC9FF%7D7DFD7EFFA87DFD7EFFA8FFA8FD36FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T17:12:33+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T17:12:34+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T17:12:34+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>196</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9UMqspVgCpFCDuCDirzZ&#xA;/wAtNbmbTmSW10wWD3ohhtmMsdvHeXJnBgVoYhyVG9L9mgAYH9nCqin5TatSMC7tbWiSJGbdXH1P&#xA;krr/AKJsu03OstSPpxtCd+VvLusadcT6WdQ/R9rDGt1HY6ckPoI11PcFkX14ZH4qI1IpTflilkn6&#xA;Kvv+rzef8BZ/9k+BXfoq+/6vN5/wFn/2T4q79FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ/wDZPiql&#xA;baVq31eL6zrNz9Y4L63ppacOdPi41t60r0riqr+ir7/q83n/AAFn/wBk+Ku/RV9/1ebz/gLP/snx&#xA;V36Kvv8Aq83n/AWf/ZPiqk2lat9YTjrNz9X4P6lUtOfOq8Kf6PSlOVfoxVDXTm2uTbSaxqTzBFkZ&#xA;IbWKaiuWVSTFaOBUo3XwxVT+tf8Aa01j/uH/APZlhV31r/taax/3D/8AsyxV31r/ALWmsf8AcP8A&#xA;+zLFVOC6uOB9fVNV583pw0804cz6fWy68KcvfFVT61/2tNY/7h//AGZYq761/wBrTWP+4f8A9mWK&#xA;u+tf9rTWP+4f/wBmWKqNxeyoY3XVdVWFWLXJfTztGEb7NLLrz49e1cVTaPTruSNZE1q8ZHAZTwtN&#xA;wRUf8e+BV36Kvv8Aq83n/AWf/ZPirv0Vff8AV5vP+As/+yfFXfoq+/6vN5/wFn/2T4qpRaVq3Ob1&#xA;dZueHMehxS0rw4LXnW368+XTtTFVX9FX3/V5vP8AgLP/ALJ8Vd+ir7/q83n/AAFn/wBk+Ku/RV9/&#xA;1ebz/gLP/snxVSn0rVuA9DWbnnzSvNLSnDmPU6W/XhXj74qh9as9UtdIvbuHWrxZbaCSZKpZkExo&#xA;WAINv0NN8VT7FXYq7FUug/5SO+/5g7T/AJO3OKpjirsVdirsVdirsVdirsVdiqXQf8pHff8AMHaf&#xA;8nbnFWzP5gqaWVpTt/pUn/ZNllQ7z8v2o3RNo98yMbuKKF6/CsUjSgj3LRxU+7IyroliPm258zwe&#xA;aLE6bFcy2PpReqsSytCH9ZuRb06CvGla9sCElu/Nn5p2ltDGdOinnLKZLz6ldiMl7WCVYTHEZnA9&#xA;aSWMyCtOIFOXVSrwea/zEvteutNgsGs7P69FFBfT2Nx+6tybkS8ySkT/AAwxFXRyvx7nfiFXpGBX&#xA;YqhtT/45t3/xhk/4icVdpn/HNtP+MMf/ABEYqicVdirsVdirsVdirsVdiqTebryO30G7idWZruC4&#xA;hi402YW0spJqRtxjONoJThmCqWNaAVNASfuGKUlbzr5ZSGwllvPRXUpZobNJopopC9qHM4eN0V4/&#xA;T9JgxcAA7dSKqqKfmD5RZYmN8UEwdgZIJ4+AjBY+rzjX0qhSV9SnL9muKqmh6tYarq97d2Ls8Btb&#xA;ZPjR4nDJNdKytHKqOpB8Riqe4q7FXYq7FXYq7FXYq7FXYql0H/KR33/MHaf8nbnFVQ61pgNDNuP8&#xA;l/6ZV40e9v8Ay2TuRFtd29ypeB+aqaE0I3+kDJxmJcmueOUeaU6z5u03SdStdPninmnuWgVmgj5p&#xA;CLq4W1heYkjirzPxFK9z0GSYJdqv5meW9L02LUbr1Rby29rdigjDCK8SaSP4WdSzBbZyypVvAHFU&#xA;HqH5raXa6wtoljdXNl6cwF3EgPrXEd9aaesNupI9T99e8XJpSneuKqkn5paWb4afaWNxc6it3DaT&#xA;2ge3Dp6pZWbl6pSsbpwZCwavtvhpUw8s+dYNcZIYrWUygH63NEA1vC1WKIzsUbkyKG2U0qK9Riqd&#xA;6n/xzbv/AIwyf8ROBXaZ/wAc20/4wx/8RGKonFXYq7FXYq7FXYq7FXYqxrzpWWL0DssVjqF5XxaO&#xA;D0APuuicHUMTzZLhZMSl/LLy9cmB7+W6vZ7eaaYTSSiMsLlpHljdIFhjZGed2+zXeleO2Ktf8qw8&#xA;uMKTSXM3qAreF5Frc/Cyp63FVr6Yb4ONPeuG1ROg+XdO0zXbtUU3FwtvBM17cBXnaSaW59Ry4VaF&#xA;ht8IG2KslwK7FXYq7FXYq7FXYq7FXYql0H/KR33/ADB2n/J25xVMcVdiqT655V0bWbizuryL/S7G&#xA;aCa2nUkMDbzpcKhFaMpaIbMDTqKHfFUFN+XHkiSCWGXTEMMzKZF9SUA0DoFHx7JxmdeA+GhpSmKq&#xA;3+BPKA1BtR/R6C7qhMnOSgMc8V0pC8uIPrW0bnbcrv3xVo+QvKP1m5uP0eouLtvUmcSSg8vVM5ZK&#xA;P+7PqsX+Cm5J7nFW4NG8paRfJcQRrbXcMaikby7xyuURnjDEP8bkKzA07UxVMdYureGxkjkkCvcp&#xA;LFAp/acQvIVHvwjY/Riqrpn/ABzbT/jDH/xEYqicVdirsVdirsVdirsVdirFvM1vb3ja4LhFmWz0&#xA;gmFXAZVef1i5oQfi/wBHTAObHqynCydirsVS6D/lI77/AJg7T/k7c4qmOKuxV2KuxV2KuxV2KuxV&#xA;2KpdB/ykd9/zB2n/ACducVcdAsSSfVvN/wDl9vB/zNwcKOFFWdlDaIyRNKwY1JmmlmNemxlZyPox&#xA;AUBivm/yA+v+Y9J1kXgQaZxpbSKxFVmWbnG6spVm4cW2NRSuwoSlir/kxqCW0OnJdWlxBI1zLNdz&#xA;2xdrdri2WALbp6oKrBv9Wof3ajjv9rCqbn8o4ZdTa4vbmC8tXu/rU8MtsC9ypunueN2xZlmMYcRR&#xA;niKIOnYKpa/5IzOztLqolMmnrp9XjeqKtp9V4rR94j9vgejb9dw2qZv+U0Md5JLZvZwQNMHgiFqA&#xA;1vEt4t4scDqw4AtzDACnxY2rtJ/Lm90X63dzahDOvqm7McMHoKWW0urdmKh2UM/1lSeIA+GnvirO&#xA;tM/45tp/xhj/AOIjAqJxV2KuxV2KuxV2KuxV2KsZuz6mkebLgCqyfWI4nO9VhtEjYD2WVXHzrgjz&#xA;YjqyVuXE8QC1NgTQV+e+FkxCfz3f20FnNNpcb+rJfRXcNvcPLNH+j5JY5JI0MCCSL9yKszJTkooS&#xA;QMVS0/m16fMz6UALZS196Vx6lCVZoxBWJRNUJ8f2ePvhpFpv5W8x/pXWb1prc29yIYreRIS9xAGg&#xA;mugStwI0QqR0JA32xSyvArsVdirsVdirsVdirsVdiqEu9I0m8kEt5ZQXMoHEPNEjsFBJpVgdt8VU&#xA;f8NeXP8Aq1Wf/SPF/wA04q7/AA15c/6tVn/0jxf804q7/DXlz/q1Wf8A0jxf804q7/DXlz/q1Wf/&#xA;AEjxf804q7/DXlz/AKtVn/0jxf8ANOKu/wANeXP+rVZ/9I8X/NOKu/w15c/6tVn/ANI8X/NOKtHy&#xA;15cOx0qzp/zDxf8ANOKpiqqqhVACgUAGwAGKt4q7FXYq7FXYq7FXYq7FWLSzrH+X93dSBiL61uro&#xA;LGjvT656k6ghQT8PqUJ6YIcmMeTKcLJLIPK/lm3eKS30iyheAloHjt4lKM3UoQo4k+2KqsOg6FD6&#xA;Ho6daxfVQ4tuEMa+mJd5AlF+HnX4qdcVQ2mWdnZa1d2tnBHbW0dnaCOCFFjRazXRPFVAA3NcVTfF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql/mC5kttCv54m&#xA;4TJbyegw6+oVIjp7lyKYJHZEuSjrdtFa+U7+2iFIoLCaOMeCpCVH4DCFTbFLsVdiqXQf8pHff8wd&#xA;p/yducVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlev&#xA;VkGn2i7G5vYPiPYW5N2fvFvx+nIyYyX+Zf8AlHNV/wCYO4/5NNkmSYMCVIB4kggMN6Hx3xV5xJr/&#xA;AJ9K2a2EV5cOr3Sg3FkYRccLpljNwWij9H/ReLqVC8m28RhQhk138zgsfoRXVweEn1Qz2Sx+uwRy&#xA;31oenH6HBgvp/Z5/5XXFWQeSr/WZ7+4/SMVzKzwQrHeXESW0phWe69N54CIWR26UWP50xSzHArsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSqek/mW1jpyWytpZ&#xA;38FkndY4m+ZRJhkerHq7zXI8flrVCkTTE2s4KoVBAMbfEebKKD78kyTXFXYq7FUug/5SO+/5g7T/&#xA;AJO3OKpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrSS&#xA;J9T1a86gTJaRN2MdvGGP3TSyjIjmWI5qnmX/AJRzVf8AmDuP+TTZJkgvJ/muHzLp31+GFYYWCtGn&#xA;qiR+LryHqBRRWp2BPzxVPsVdiqXQf8pHff8AMHaf8nbnFUxxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVZNNFBDJNKwSKJS8jnoFUVJPyGKoDy3DNHolq04IuJ1a&#xA;5uFIpxluWM8i09nkIyMeSI8m/Mv/ACjmq/8AMHcf8mmySWJflLLEbO/t7a6knsIDALOKaV5XijMZ&#xA;2WpZFTag4dwQRVcJVU88eR/MGu6/aahpt+llFBaywc+REiPIkqc1AjYn+9X7MidPi5igCqVN+Wfm&#xA;Z2JS5tbPnb3EUKwzTsLEyreARWx9ONnjk+txlyStPTFB9khVkXk/R9T0u/ntJngjRYEle0hDSJEk&#xA;13eSRQwyn0fgiVwu8fbYKKYqy3ArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdiqVeZayaZ9RX7epSJZ0AqTHKf35H+rAJG+jIy5MZck1yTJIvN14BouoWcMqi6e0ndk&#xA;KNLSMRNUtxZOFaUVmPXxyPGLrq2DFIxMv4fxy70z0/SdL06Mx6fZwWcZ2KW8aRKaEt0QDuxP05Jr&#xA;RWKuxVLoP+Ujvv8AmDtP+TtziqY4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqlVx/pPmS2iNfS063a6epoPVuCYYT70RJgfnkTzY9VxvrnUD6emnhbdH1FgCp/5h&#xA;1Ozn/LPwD/K3GV8Zl9PLv/V+K97meFHHvk+r+b/xXd7ufu5qOs2NvaeWNWSFTV7S4aWRiWd29Jvi&#xA;djux+fy6ZZCAjyacuWUzZ/s9yc5JrQF/r+k6fcJbXdx6czxvPx4uwWKMVeSRlBEaD+ZyBXbFUD/j&#xA;rynxjZtRSNZEklrIrpxWESGT1OSj0yBBJs9CeLU6HFV+jajZ6lq91eWcnq28lpbBWKshqk90jqyu&#xA;FZWVlKkEVBxVOsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqHvd&#xA;QtrNU9UkySHjDAg5SSMOyKNz7noOpoMhOYjzbcWGU+XIcz0CQ6FYSaslzqt+ONrqMxlhsR9loUUR&#xA;RGVv92K6IJAn2fiPXtWIGW8uXd+tlDKMf0fV/O/4nu9/P3MmAAAAFAOgy9oS7zL/AMo5qv8AzB3H&#xA;/JpsVTHFWN+ZPIGgeYdRiv8AUBJ60ULWxEfpjnE6uvEuUaRf71vsMtf2qjFUFJ+V2hytM893eTPd&#xA;xul+5aFWuS4uAryFIkIaP67Jw4cR0qDTFUboOgWuma3dRpNPNIlvFNJPI/FpZbi4u5JHkSIRRMSz&#xA;mnwUHamKskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku6bnFUtOo3F4&#xA;eGlqrx1o9/ICYR4+mBQyn5Hj/lVFMp8Qy+n59P2uV4Ihvk5/zevx/m/f5dUJqlqLGwlFtIz6tqLL&#xA;aRXkhrNzlNOQoBRYl5ScFAHwnCICPvPVpzZ5SFco9AOX48zunNvbw21vFbwKEhhRY4kHRVUUUfQB&#xA;lrWqYqlXmuBJvLWqK5YAWs7Dg7IaiNupQqSPbpiqa4q7FXYql0H/ACkd9/zB2n/J25xVMcVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQl3qcEEn1dFa4vCAy2sVGehNAzVIVF/&#xA;ymIH05XLIBtzPc3Y8BkLO0e8/jf4KH6Nnvfi1VleI9LCMkwD/jISFaX6QF/ye+R8My+r5dP2tnjC&#xA;H93z/ndfh/N+/wA0yAAAAFAOgy5xUpQi+8wu3W30lPTXbY3U6hmPzjhKgf8AGQ+GR5ljzKbZJk7F&#xA;Uu8y/wDKOar/AMwdx/yabFUxxVifm38x9F8talDp91+8uHtZ72VBIiukUMM0qURjycym2dVp3G/a&#xA;qqAn/NSK1Mq3WlyK9ok310RypJwmi+uFY02HNX/R0nx7carUfa4lU18u69BqOsXLzBLW7kgS3NoZ&#xA;FdjJZ3d5BLwPwl1DREg06dQMCsmxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVQu&#xA;760tFU3EgUueMaAFndutERQWY07KMjKYjzbMeKU+Q/HmeiEpql9StdOtT1UcWuXHufiSL6OTe6nK&#xA;/VL+iPt/Z+OTd+7x/wBOX+x/WfsHvRlpZWtpF6dvGEUnkx3LM3Tk7GrMx7ljXLIwEeTTkyymbkfx&#xA;+hWyTWhNV1BNPsJbpkMjLRYYV+1JK5CRxr13d2C4CaQTS3R7BrDT44JHElwS0tzKNg88rGSVgOwL&#xA;saDsNsQKUCkbhS7FUq813EEHlrVGmkWJWtZ1VnYKCzRsABXucVTXFVK4tLS5VVuYY51QkqJFDgFk&#xA;aNiOQPVHZT7EjviqBTyt5ZRYlXSbNVgikggAt4qJFNX1Y1+HZX5HkO9TXriqnpllZ2Ws3VrZwR21&#xA;tFZWixQRKERR6tyaKqgAYqm+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN1e2toge4k&#xA;EYY8UB3Zm/lRRVmb2ArkZTEebPHilM1EIRZ9Uvf7iM2Fuf8Ad0wDTsPFIuiexffxTK7lLl6R9vy/&#xA;X8m4xxw5njPcOXxPX4f6ZXs9NtbVmkQGS4faS5lPOVu9Cx6L4KKKOwyccYj72vJmlPb+HuHL8efN&#xA;FZNqdirsVSaInVNaM3Ww0pmSE9pbwgpI48RCpKf6xbuoyPMseZTnJMnYq7FUu8y/8o5qv/MHcf8A&#xA;JpsVTHFXYq7FUug/5SO+/wCYO0/5O3OKpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqGu9Ss&#xA;7VljlesziqQRgySsPFY0DMR70pkJZBHnzbceGU9wNu/kPmoctYu/squnQHqzcZbgj2UViQ+BJf5Z&#xA;H1y/oj7f1fe2Vih/TPyj+s/7H3q1pplpbOZVBkuGFGuZWMkpHWnJqkL/AJIoPbJRxgb9WGTPKQrl&#xA;HuGw/HnzRWTaXYq7FXYqlWr3lxLMuk6c/G+nXlPOKH6tbk0Mp/y2oViB6mp6K2RJ6MSeiPsrO2sr&#xA;SG0tk9O3gQJGg3oFFOp3J98IFMgFbCrsVdiqXeZf+Uc1X/mDuP8Ak02KpjirDfOXmDXrDW7Oz0YS&#xA;z3E1rczG1Nsz2zGOGQxBp1UlZXmCBV5AcQ1f2aqpCfNf5ioB9XtZrsLbzvZGSwljN2US7IeYcU+r&#xA;srQ2/FCRz57VqKFWReTtS1a6v521CGaSR4URbt4hbloY7q8WCWWFzHIjSRhTQJ77A4qy7ArsVdir&#xA;sVdirsVdirsVdirsVdirsVWySRxRtJIwSNBVnYgAAdyTgJrmmMSTQ5oE6usu1hC96e0i/BD8/Vei&#xA;sP8AU5fLK/Fv6Rf3fP8AU3/l6+siP3/L9dO+p6ncmt5dejEf+Pa0qu1ejTN8Z+aBMeCR5mvd+v8A&#xA;sT4mOP0xs98v+J5fPiRNpY2lohS2iWMMauQPiY/zMx3Y+5ycYCPJqyZZTPqNq+Sa3Yq7FXYq7FUs&#xA;1XVpopBYabGtzq0qhkiY0jhRjT1pyNwgoaKPic7DuREnuYk9ytpOlpp8DAyNcXUzepd3clOcsh25&#xA;GmwAGyqNlGwwgUkCkbhS7FXYq7FUq81yPH5a1QpE0xNrOCqFQQDG3xHmyig+/FU1xV2KuxVLoP8A&#xA;lI77/mDtP+TtziqY4q7FXYq7FXYq7FXYq7FXYqp3F1bW0RluZkgiGxkkYItT7tQYJSA3LOEJSNRB&#xA;J8kJ+l45P947ea7/AMqNOEdPESSmNGH+qTlfi3yBP48238uR9REfv+Qs/OnenrU/95JFZJ3WEGaS&#xA;ns7hEU/882xqZ7h9v4+S3ijyBl79h8hv9obj0axEiyzK13OtCJrg+oQR3RT8Cf7BRiMUeZ3Pmg6m&#xA;dUPSO4bftPxtHZa0OxV2KuxV2KuxVTubm2tYHnuZUggjFXlkYIijpuzUAxtbSr6/qeqfBpkbWdmd&#xA;m1KdKOw/5d4HFT7PIAvcK4yNk8mNk8kfp2mWmnwGK3U1duc0zkvLK52LyOd2bam/bYbAYQKSBSKw&#xA;pdirsVdirsVS7zL/AMo5qv8AzB3H/JpsVTHFXYq7FUug/wCUjvv+YO0/5O3OKpjirsVdirsVaZlV&#xA;SzEBQKknYADFQLQba3pAYqt3FLIDT0omEr18OCcm/DK/Gh3t40uT+aQPPYfMtfpYv/vPZXU47n0x&#xA;DT/pIMJP0YPF7gT9n30n8vX1SiPjf+5t3qa3LsIre1B6O7vMw+caiIf8Pjcz0A+38fNaxDrKX2fb&#xA;v9zX6Ou5d7q/lYH7UUAWCP6CoMw/5GY+GTzJ+79v2r40R9MR8dz/AMT/ALFUt9K063kEscC+uP8A&#xA;d71eU/OR+Tn6Tko4ojet2M9ROQonbu5D5DZWmu7SBgs00cTEVAdgpp9JywRJaUNJr+hRsUk1G1Rx&#xA;1VpowfuLZIY5dxRYWf4j8vf9XS0/5Hxf81YfCn3H5LYcfMnl6lRqdq3cBZo2J+QBJP0Y+FPuK2Gv&#xA;8R6QSAkryMeiRwzSMfkqITj4Ultv9PWP++rv/pCu/wDqlj4Z8vmP1raAl8/eU4pTDLeskw29JoJw&#xA;1fDj6dciY+Y+Y/WjjC5/N0LEC00vU7wdeSWjwrT53PoV+jBS8SGOqecbv7Gltp8BP2wYLiZlr2Ek&#xA;1usbf6yvh4PMD5/qRZVLe09OdLq40i/vr1PiS5upLORkPjGonWOI+PpqtcfCj/OH2/qTSZHU9RIo&#xA;mkXIbsZJLZV+krK5/wCFyXAO8fb+pNtC811jRNNjQ9zLchV/4SOQ1+jHhj3/AGLu36/mH/litP8A&#xA;pLl/7Jsah3n5ftXd3r+Yf+WK0/6S5f8AsmxqHefl+1d2q+ZDvws0r+xylen+y4pX7sfR5ru2IfMR&#xA;G95ZqT2+qysAfn9YFcbh3H5/sXd3oeYf+W20/wCkSX/spxuHcfn+xd0Dr0GsjQtSNxdwPCLS4LpF&#xA;bvGzfum25NNJT7sBMeg+39i7p/kEuxVA69Z3l7oeo2VlN9XvLq1mhtrirL6cskZVHqvxDixB23xV&#xA;hOhDVdM1waTHqMFtfTxlGtJbee+ghX1rq6gt47n1rU81glNQUOy7bUxVkj6X51blTX7ZK1px0/pX&#xA;w5XB6e+G/JQhzoHno/8ATVqPlp0H8XORIbBkA/hH2/rWt5c88MvFvNux60sIVP3q4ODh82XijpGP&#xA;+y/4pJ9e0jXdE0+XUtQ8x3NxaRAtcGOCYiNFVneRljuo/hAX38AMPBHu+2X61/MS/o/6WP6kNoeh&#xA;W2pXl1Zx6hFc3mnnhJNPaXcTPwlkgZ0ZLyPnSaCRGPYjwIqeGI/hj8gv5jL/ADpfMskXytrSqFXV&#xA;ECjYADUaADw/3IZPxD5fINBFt/4Y1ulDqqEHrUaj/wB5DD4h8vkFpr/CV/8AtT6ew7q1ncMp+am8&#xA;II+ePiy71piurXGkQazc2RubD65pscaz21po3qBnuqsqjlM4aREhLED7Kn3x8SfeUUn1t5QmureK&#xA;5gvNNkgnRZIpBpUNGRwGUisncYPEn/OK8KsPJurqKQ6nZ246n0dMgFfnyZsBnI9SvCrReXPNkKcI&#xA;fMixpWvFLC3UfcDkDZ6rXmg9dGv6FpU+q6l5t9Cyt+PqSGxgpWRxGg3Pd2AxrzWj3pfo093qd/8A&#xA;UF8xzXFxJH9aq8EsSMrpFOY1kt7hEqkd1ESEPRtid6PCtJ+fK2pnrqdQeo56j/2X48IXhaHlD+aP&#xA;SpW/nl09pW/4J7hmx4R3LwhMINP1u3jEVvc2MMS9I47KRVH0C5AwsmO635wbTdbTS7vVYY72CL63&#xA;6MVhM3qqwaNY6C55NyY7bU5UFa7YVTvS7vWdTsIr61v7UwzA0D2UysrKxVlZTc7MrKQcCov0PMf/&#xA;AC3Wf/SJL/2U4q70PMf/AC3Wf/SJL/2U4qgtVvdb0y1FzcXdu0RkjiPp2UrEGVwisf8AStlq25xV&#xA;IJvPS2U196uqJJ6U7IQNOuGX9ysqT+lS43SI2MxfwKnxWpVlaw+YWUMt/ZlSKgi0lIIP/RzgVv0P&#xA;Mf8Ay3Wf/SJL/wBlOKu9DzH/AMt1n/0iS/8AZTiqQ6rr2rwfpCF7kK+li3uLkxWElTCzM/NSboAx&#xA;/uHVz88KrItYuvMYvdHtNUtg0sDAyNp84V4nUJIYi1yKlPUAPgcVZlgV2KuxVLW8u6S2trrZib9I&#xA;KoQP6j8NlZA3p8vT5hHZeXGtDTFUyxV2KuxVLtd0Cw1u1itb0yiKKZLhBFI0Z9SI1QnidwrfEAe4&#xA;B6jFWtK8uaTpd3d3dnEyT3p5Ts0kjj+8eUhVdmVA0s0jniBVmJxVMsVdirsVY5efl75Su7y6vXsv&#xA;Su7wL688EkkLlldn5Bo2UhiXbkR1G2Ksgt4IbeCOCFBHDCqxxIOiqoooHyGKr8VdiqF1TTLPU7J7&#xA;K8UtA5R/hZkZXicSRurKQysjoGBHcYqkdvonkjypcwXpmi015UWxtjdXTKjnhFHRFmfi0rpbRAt9&#xA;puI96qsmxV2KuxVIdU8jeWtT1KTUry2d7ySMRNIssqUopVXUIwAdVYgMN8VTXTtOtdOsorK0UrBC&#xA;KIGZnY1JJZmYlmZiSSSak4qicVdiqC1jSLXVrFrK6aRYWZHJhkaJqxsGX4loftAHFUoufy88qXP1&#xA;j1raRjdSGWRvrE6kF/V9QIQ44LL9Zl5hacuZrirJAAAABQDYAYq7FXYqkGseSdG1e4upr17ljerA&#xA;k8aXEiRlbVzJEvBTxoHYkjvU1xVF6f5a0nT9RuNRt43+t3K8ZXeSRxvQsVRmKqXKgvxA5Hc4qmmK&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsZ88foD6mn6Z9b0/QvuHoceXD6nL69OX7Xo8&#xA;uPvirJsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:9217B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9217B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9217B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T17:12:34+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -214.279 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 214.279 li
281.933 214.279 li
281.933 0 li
cp
clp
[1 0 0 1 0 0 ]ct
30.5518 197.545 mo
281.652 197.545 li
281.652 3.14551 li
30.5518 3.14551 li
30.5518 197.545 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
30.5518 197.545 mo
281.652 197.545 li
281.652 3.14551 li
30.5518 3.14551 li
30.5518 197.545 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.5518 197.473 mo
32.5605 197.399 li
34.5698 197.326 li
36.5776 197.254 li
38.5869 197.181 li
40.5957 197.108 li
42.6045 197.035 li
44.6138 196.963 li
46.6226 196.889 li
48.6309 196.816 li
50.6396 196.743 li
52.6484 196.67 li
54.6572 196.598 li
56.6665 196.524 li
58.6748 196.452 li
60.6836 196.379 li
62.6924 196.307 li
64.7012 196.232 li
66.7104 196.16 li
68.7192 196.088 li
70.7275 196.014 li
72.7363 195.941 li
74.7451 195.869 li
76.7544 195.796 li
78.7632 195.723 li
80.7715 195.65 li
82.7803 195.577 li
84.7891 195.504 li
86.7983 195.432 li
88.8071 195.358 li
90.8159 195.285 li
92.8242 195.212 li
94.833 195.141 li
96.8423 195.066 li
98.8511 194.994 li
100.86 194.922 li
102.868 194.848 li
104.877 194.775 li
106.886 194.701 li
108.895 194.629 li
110.904 194.557 li
112.913 194.483 li
114.921 194.411 li
116.93 194.338 li
118.939 194.265 li
120.948 194.192 li
122.957 194.119 li
124.965 194.046 li
126.974 193.973 li
128.983 193.9 li
130.992 193.828 li
133 193.754 li
135.009 193.682 li
137.018 193.609 li
139.027 193.535 li
141.036 193.463 li
143.044 193.391 li
145.054 193.316 li
147.062 193.244 li
149.071 193.172 li
151.08 193.099 li
153.088 193.025 li
155.097 192.953 li
157.106 192.88 li
159.115 192.807 li
161.124 192.734 li
163.132 192.661 li
165.142 192.588 li
167.15 192.515 li
169.159 192.442 li
171.167 192.369 li
173.177 192.297 li
175.185 192.224 li
177.194 192.15 li
179.203 192.078 li
181.211 192.005 li
183.22 191.932 li
185.229 191.859 li
187.239 191.787 li
189.247 191.713 li
191.255 191.641 li
193.265 191.567 li
195.274 191.494 li
197.282 191.422 li
199.291 191.349 li
201.299 191.275 li
203.308 191.203 li
205.317 191.131 li
207.327 191.058 li
209.335 190.984 li
211.343 190.912 li
213.352 190.838 li
215.362 190.766 li
217.371 190.692 li
219.378 190.619 li
221.388 190.547 li
223.396 190.475 li
225.405 190.401 li
227.415 190.328 li
229.423 190.256 li
231.432 190.182 li
233.44 190.109 li
235.45 190.037 li
237.458 189.963 li
239.466 189.891 li
241.476 189.818 li
243.484 189.745 li
245.493 189.672 li
247.501 189.6 li
249.511 189.526 li
251.52 189.453 li
253.529 189.381 li
255.538 189.308 li
257.546 189.234 li
259.555 189.162 li
261.564 189.09 li
263.573 189.016 li
265.582 188.943 li
267.589 188.871 li
269.599 188.797 li
271.608 188.725 li
273.617 188.651 li
275.625 188.578 li
277.634 188.506 li
279.643 188.433 li
.884 .769 0 0 cmyk
@
30.5518 197.545 mo
32.5605 197.533 li
34.5698 197.51 li
36.5776 197.473 li
38.5869 197.424 li
40.5957 197.363 li
42.6045 197.291 li
44.6138 197.205 li
46.6226 197.107 li
48.6309 196.998 li
50.6396 196.877 li
52.6484 196.743 li
54.6572 196.598 li
56.6665 196.439 li
58.6748 196.27 li
60.6836 196.088 li
62.6924 195.893 li
64.7012 195.686 li
66.7104 195.468 li
68.7192 195.236 li
70.7275 194.994 li
72.7363 194.738 li
74.7451 194.471 li
76.7544 194.192 li
78.7632 193.9 li
80.7715 193.597 li
82.7803 193.281 li
84.7891 192.953 li
86.7983 192.612 li
88.8071 192.26 li
90.8159 191.896 li
92.8242 191.519 li
94.833 191.131 li
96.8423 190.729 li
98.8511 190.316 li
100.86 189.891 li
102.868 189.453 li
104.877 189.004 li
106.886 188.542 li
108.895 188.068 li
110.904 187.582 li
112.913 187.084 li
114.921 186.574 li
116.93 186.051 li
118.939 185.517 li
120.948 184.971 li
122.957 184.41 li
124.965 183.84 li
126.974 183.258 li
128.983 182.662 li
130.992 182.055 li
133 181.434 li
135.009 180.803 li
137.018 180.158 li
139.027 179.502 li
141.036 178.834 li
143.044 178.154 li
145.054 177.461 li
147.062 176.757 li
149.071 176.041 li
151.08 175.311 li
153.088 174.569 li
155.097 173.816 li
157.106 173.051 li
159.115 172.273 li
161.124 171.483 li
163.132 170.682 li
165.142 169.867 li
167.15 169.041 li
169.159 168.203 li
171.167 167.353 li
173.177 166.49 li
175.185 165.615 li
177.194 164.729 li
179.203 163.83 li
181.211 162.918 li
183.22 161.994 li
185.229 161.059 li
187.239 160.111 li
189.247 159.151 li
191.255 158.18 li
193.265 157.195 li
195.274 156.199 li
197.282 155.189 li
199.291 154.17 li
201.299 153.137 li
203.308 152.092 li
205.317 151.035 li
207.327 149.967 li
209.335 148.885 li
211.343 147.791 li
213.352 146.686 li
215.362 145.568 li
217.371 144.438 li
219.378 143.296 li
221.388 142.141 li
223.396 140.975 li
225.405 139.797 li
227.415 138.605 li
229.423 137.402 li
231.432 136.188 li
233.44 134.961 li
235.45 133.721 li
237.458 132.471 li
239.466 131.206 li
241.476 129.931 li
243.484 128.643 li
245.493 127.342 li
247.501 126.03 li
249.511 124.706 li
251.52 123.37 li
253.529 122.021 li
255.538 120.66 li
257.546 119.288 li
259.555 117.902 li
261.564 116.505 li
263.573 115.096 li
265.582 113.674 li
267.589 112.24 li
269.599 110.794 li
271.608 109.337 li
273.617 107.866 li
275.625 106.384 li
277.634 104.889 li
279.643 103.383 li
0 .994 1 0 cmyk
@
30.5518 197.532 mo
32.5605 197.531 li
34.5698 197.529 li
36.5776 197.529 li
38.5869 197.527 li
40.5957 197.525 li
42.6045 197.524 li
44.6138 197.522 li
46.6226 197.521 li
48.6309 197.52 li
50.6396 197.518 li
52.6484 197.516 li
54.6572 197.512 li
56.6665 197.51 li
58.6748 197.507 li
60.6836 197.504 li
62.6924 197.5 li
64.7012 197.496 li
66.7104 197.493 li
68.7192 197.488 li
70.7275 197.484 li
72.7363 197.479 li
74.7451 197.474 li
76.7544 197.469 li
78.7632 197.463 li
80.7715 197.455 li
82.7803 197.449 li
84.7891 197.44 li
86.7983 197.432 li
88.8071 197.424 li
90.8159 197.414 li
92.8242 197.403 li
94.833 197.392 li
96.8423 197.379 li
98.8511 197.365 li
100.86 197.352 li
102.868 197.336 li
104.877 197.318 li
106.886 197.301 li
108.895 197.281 li
110.904 197.26 li
112.913 197.238 li
114.921 197.213 li
116.93 197.186 li
118.939 197.157 li
120.948 197.127 li
122.957 197.094 li
124.965 197.057 li
126.974 197.018 li
128.983 196.976 li
130.992 196.93 li
133 196.881 li
135.009 196.827 li
137.018 196.771 li
139.027 196.708 li
141.036 196.641 li
143.044 196.568 li
145.054 196.49 li
147.062 196.406 li
149.071 196.315 li
151.08 196.217 li
153.088 196.111 li
155.097 195.996 li
157.106 195.871 li
159.115 195.738 li
161.124 195.594 li
163.132 195.437 li
165.142 195.269 li
167.15 195.086 li
169.159 194.89 li
171.167 194.677 li
173.177 194.447 li
175.185 194.199 li
177.194 193.932 li
179.203 193.643 li
181.211 193.33 li
183.22 192.993 li
185.229 192.629 li
187.239 192.236 li
189.247 191.811 li
191.255 191.353 li
193.265 190.857 li
195.274 190.322 li
197.282 189.744 li
199.291 189.119 li
201.299 188.445 li
203.308 187.719 li
205.317 186.932 li
207.327 186.083 li
209.335 185.166 li
211.343 184.175 li
213.352 183.105 li
215.362 181.95 li
217.371 180.703 li
219.378 179.355 li
221.388 177.9 li
223.396 176.328 li
225.405 174.631 li
227.415 172.798 li
229.423 170.818 li
231.432 168.68 li
233.44 166.371 li
235.45 163.877 li
237.458 161.184 li
239.466 158.275 li
241.476 155.133 li
243.484 151.74 li
245.493 148.075 li
247.501 144.117 li
249.511 139.844 li
251.52 135.227 li
253.529 130.242 li
255.538 124.857 li
257.546 119.042 li
259.555 112.763 li
261.564 105.979 li
263.573 98.6548 li
265.582 90.7432 li
267.589 82.1992 li
269.599 72.9717 li
271.608 63.0059 li
273.617 52.2422 li
275.625 40.6182 li
277.634 28.0645 li
279.643 14.5059 li
.875 .345 1 .294 cmyk
@
grestore
30.5518 197.545 mo
30.5518 195.295 li
30.5518 197.545 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.5518 197.545 mo
30.5518 195.295 li
@
30.5518 5.39551 mo
30.5518 3.14551 li
30.5518 5.39551 li
cp
f
30.5518 3.14551 mo
30.5518 5.39551 li
@
30.9976 200.446 mo
30.6533 200.446 30.397 200.615 30.2212 200.953 cv
30.0459 201.29 29.9648 201.797 29.9648 202.471 cv
29.9648 203.146 30.0459 203.652 30.2212 203.99 cv
30.397 204.328 30.6533 204.496 30.9976 204.496 cv
31.3418 204.496 31.5981 204.328 31.7739 203.99 cv
31.9424 203.652 32.0303 203.146 32.0303 202.471 cv
32.0303 201.797 31.9424 201.29 31.7739 200.953 cv
31.5981 200.615 31.3418 200.446 30.9976 200.446 cv
30.9976 199.92 mo
31.5444 199.92 31.9629 200.143 32.2598 200.574 cv
32.5498 201.014 32.6987 201.647 32.6987 202.471 cv
32.6987 203.301 32.5498 203.936 32.2598 204.367 cv
31.9629 204.8 31.5444 205.016 30.9976 205.016 cv
30.4438 205.016 30.0186 204.8 29.7285 204.367 cv
29.438 203.936 29.2964 203.301 29.2964 202.471 cv
29.2964 201.647 29.438 201.014 29.7285 200.574 cv
30.0186 200.143 30.4438 199.92 30.9976 199.92 cv
f
70.7275 197.545 mo
70.7275 195.295 li
f
70.7275 197.545 mo
70.7275 195.295 li
@
70.7275 3.14551 mo
70.7275 5.39551 li
f
70.7275 3.14551 mo
70.7275 5.39551 li
@
68.1958 204.367 mo
70.5181 204.367 li
70.5181 204.928 li
67.3926 204.928 li
67.3926 204.367 li
67.6426 204.111 67.9868 203.76 68.4253 203.314 cv
68.8574 202.877 69.1343 202.594 69.249 202.465 cv
69.4648 202.229 69.6138 202.025 69.6943 201.857 cv
69.7754 201.695 69.8228 201.525 69.8228 201.363 cv
69.8228 201.107 69.7285 200.892 69.5459 200.729 cv
69.3638 200.567 69.1274 200.48 68.8306 200.48 cv
68.6211 200.48 68.3984 200.52 68.1689 200.588 cv
67.9395 200.662 67.6899 200.77 67.4268 200.918 cv
67.4268 200.244 li
67.6968 200.137 67.9463 200.055 68.1758 200 cv
68.4053 199.947 68.6211 199.92 68.8169 199.92 cv
69.3232 199.92 69.7285 200.048 70.0322 200.305 cv
70.3359 200.561 70.4912 200.898 70.4912 201.324 cv
70.4912 201.525 70.4507 201.722 70.3765 201.896 cv
70.3022 202.08 70.167 202.295 69.9644 202.539 cv
69.9106 202.605 69.7349 202.788 69.438 203.092 cv
69.1411 203.396 68.7295 203.82 68.1958 204.367 cv
f
73.3394 200.446 mo
72.9951 200.446 72.7388 200.615 72.5635 200.953 cv
72.3877 201.29 72.3066 201.797 72.3066 202.471 cv
72.3066 203.146 72.3877 203.652 72.5635 203.99 cv
72.7388 204.328 72.9951 204.496 73.3394 204.496 cv
73.6841 204.496 73.9404 204.328 74.1157 203.99 cv
74.2847 203.652 74.3726 203.146 74.3726 202.471 cv
74.3726 201.797 74.2847 201.29 74.1157 200.953 cv
73.9404 200.615 73.6841 200.446 73.3394 200.446 cv
73.3394 199.92 mo
73.8862 199.92 74.3047 200.143 74.6021 200.574 cv
74.8921 201.014 75.0405 201.647 75.0405 202.471 cv
75.0405 203.301 74.8921 203.936 74.6021 204.367 cv
74.3047 204.8 73.8862 205.016 73.3394 205.016 cv
72.7861 205.016 72.3608 204.8 72.0708 204.367 cv
71.7803 203.936 71.6387 203.301 71.6387 202.471 cv
71.6387 201.647 71.7803 201.014 72.0708 200.574 cv
72.3608 200.143 72.7861 199.92 73.3394 199.92 cv
f
110.904 197.545 mo
110.904 195.295 li
f
110.904 197.545 mo
110.904 195.295 li
@
110.904 3.14551 mo
110.904 5.39551 li
f
110.904 3.14551 mo
110.904 5.39551 li
@
109.548 200.588 mo
107.868 203.214 li
109.548 203.214 li
109.548 200.588 li
109.373 200.008 mo
110.21 200.008 li
110.21 203.214 li
110.912 203.214 li
110.912 203.768 li
110.21 203.768 li
110.21 204.928 li
109.548 204.928 li
109.548 203.768 li
107.328 203.768 li
107.328 203.126 li
109.373 200.008 li
cp
f
113.437 200.446 mo
113.092 200.446 112.835 200.615 112.66 200.953 cv
112.485 201.29 112.404 201.797 112.404 202.471 cv
112.404 203.146 112.485 203.652 112.66 203.99 cv
112.835 204.328 113.092 204.496 113.437 204.496 cv
113.781 204.496 114.037 204.328 114.212 203.99 cv
114.381 203.652 114.469 203.146 114.469 202.471 cv
114.469 201.797 114.381 201.29 114.212 200.953 cv
114.037 200.615 113.781 200.446 113.437 200.446 cv
113.437 199.92 mo
113.983 199.92 114.402 200.143 114.699 200.574 cv
114.989 201.014 115.137 201.647 115.137 202.471 cv
115.137 203.301 114.989 203.936 114.699 204.367 cv
114.402 204.8 113.983 205.016 113.437 205.016 cv
112.883 205.016 112.458 204.8 112.167 204.367 cv
111.877 203.936 111.735 203.301 111.735 202.471 cv
111.735 201.647 111.877 201.014 112.167 200.574 cv
112.458 200.143 112.883 199.92 113.437 199.92 cv
f
151.08 197.545 mo
151.08 195.295 li
f
151.08 197.545 mo
151.08 195.295 li
@
151.08 3.14551 mo
151.08 5.39551 li
f
151.08 3.14551 mo
151.08 5.39551 li
@
149.471 202.201 mo
149.174 202.201 148.938 202.309 148.762 202.512 cv
148.586 202.715 148.499 202.998 148.499 203.349 cv
148.499 203.707 148.586 203.99 148.762 204.192 cv
148.938 204.395 149.174 204.496 149.471 204.496 cv
149.768 204.496 150.004 204.395 150.179 204.192 cv
150.355 203.99 150.443 203.707 150.443 203.349 cv
150.443 202.998 150.355 202.715 150.179 202.512 cv
150.004 202.309 149.768 202.201 149.471 202.201 cv
150.793 200.115 mo
150.793 200.723 li
150.625 200.643 150.456 200.581 150.288 200.541 cv
150.112 200.5 149.943 200.479 149.781 200.479 cv
149.335 200.479 148.998 200.629 148.769 200.925 cv
148.539 201.223 148.404 201.674 148.377 202.269 cv
148.505 202.08 148.667 201.932 148.863 201.83 cv
149.059 201.729 149.275 201.674 149.511 201.674 cv
150.004 201.674 150.396 201.83 150.679 202.127 cv
150.962 202.424 151.111 202.836 151.111 203.349 cv
151.111 203.854 150.956 204.26 150.659 204.564 cv
150.362 204.867 149.963 205.016 149.471 205.016 cv
148.904 205.016 148.465 204.8 148.168 204.368 cv
147.864 203.936 147.716 203.301 147.716 202.471 cv
147.716 201.695 147.898 201.074 148.269 200.615 cv
148.634 200.156 149.133 199.92 149.754 199.92 cv
149.916 199.92 150.085 199.939 150.26 199.967 cv
150.429 200 150.604 200.048 150.793 200.115 cv
f
153.683 200.446 mo
153.339 200.446 153.083 200.615 152.906 200.953 cv
152.731 201.29 152.65 201.797 152.65 202.471 cv
152.65 203.146 152.731 203.652 152.906 203.99 cv
153.083 204.328 153.339 204.496 153.683 204.496 cv
154.027 204.496 154.283 204.328 154.459 203.99 cv
154.628 203.652 154.715 203.146 154.715 202.471 cv
154.715 201.797 154.628 201.29 154.459 200.953 cv
154.283 200.615 154.027 200.446 153.683 200.446 cv
153.683 199.92 mo
154.23 199.92 154.648 200.143 154.945 200.574 cv
155.236 201.014 155.384 201.647 155.384 202.471 cv
155.384 203.301 155.236 203.936 154.945 204.367 cv
154.648 204.8 154.23 205.016 153.683 205.016 cv
153.13 205.016 152.705 204.8 152.414 204.367 cv
152.124 203.936 151.981 203.301 151.981 202.471 cv
151.981 201.647 152.124 201.014 152.414 200.574 cv
152.705 200.143 153.13 199.92 153.683 199.92 cv
f
191.255 197.545 mo
191.255 195.295 li
f
191.255 197.545 mo
191.255 195.295 li
@
191.255 3.14551 mo
191.255 5.39551 li
f
191.255 3.14551 mo
191.255 5.39551 li
@
189.557 202.593 mo
189.24 202.593 188.99 202.68 188.807 202.849 cv
188.625 203.018 188.538 203.247 188.538 203.544 cv
188.538 203.842 188.625 204.078 188.807 204.246 cv
188.99 204.415 189.24 204.496 189.557 204.496 cv
189.868 204.496 190.117 204.415 190.299 204.24 cv
190.482 204.071 190.577 203.842 190.577 203.544 cv
190.577 203.247 190.482 203.018 190.306 202.849 cv
190.124 202.68 189.875 202.593 189.557 202.593 cv
188.888 202.309 mo
188.606 202.242 188.382 202.107 188.22 201.91 cv
188.058 201.715 187.984 201.479 187.984 201.195 cv
187.984 200.804 188.119 200.494 188.403 200.264 cv
188.679 200.034 189.064 199.92 189.557 199.92 cv
190.042 199.92 190.427 200.034 190.711 200.264 cv
190.988 200.494 191.129 200.804 191.129 201.195 cv
191.129 201.479 191.048 201.715 190.886 201.91 cv
190.724 202.107 190.508 202.242 190.225 202.309 cv
190.542 202.384 190.792 202.532 190.975 202.748 cv
191.15 202.963 191.245 203.234 191.245 203.544 cv
191.245 204.023 191.096 204.388 190.806 204.639 cv
190.508 204.895 190.097 205.016 189.557 205.016 cv
189.01 205.016 188.591 204.895 188.302 204.639 cv
188.011 204.388 187.87 204.023 187.87 203.544 cv
187.87 203.234 187.958 202.963 188.139 202.748 cv
188.315 202.532 188.565 202.384 188.888 202.309 cv
188.646 201.256 mo
188.646 201.512 188.72 201.715 188.882 201.856 cv
189.043 201.998 189.266 202.066 189.557 202.066 cv
189.84 202.066 190.063 201.998 190.225 201.856 cv
190.387 201.715 190.468 201.512 190.468 201.256 cv
190.468 201 190.387 200.804 190.225 200.662 cv
190.063 200.52 189.84 200.446 189.557 200.446 cv
189.266 200.446 189.043 200.52 188.882 200.662 cv
188.72 200.804 188.646 201 188.646 201.256 cv
f
193.85 200.446 mo
193.506 200.446 193.25 200.615 193.074 200.953 cv
192.899 201.29 192.817 201.797 192.817 202.471 cv
192.817 203.146 192.899 203.652 193.074 203.99 cv
193.25 204.328 193.506 204.496 193.85 204.496 cv
194.194 204.496 194.451 204.328 194.626 203.99 cv
194.795 203.652 194.883 203.146 194.883 202.471 cv
194.883 201.797 194.795 201.29 194.626 200.953 cv
194.451 200.615 194.194 200.446 193.85 200.446 cv
193.85 199.92 mo
194.397 199.92 194.816 200.143 195.112 200.574 cv
195.403 201.014 195.55 201.647 195.55 202.471 cv
195.55 203.301 195.403 203.936 195.112 204.367 cv
194.816 204.8 194.397 205.016 193.85 205.016 cv
193.296 205.016 192.872 204.8 192.581 204.367 cv
192.291 203.936 192.149 203.301 192.149 202.471 cv
192.149 201.647 192.291 201.014 192.581 200.574 cv
192.872 200.143 193.296 199.92 193.85 199.92 cv
f
231.432 197.545 mo
231.432 195.295 li
f
231.432 197.545 mo
231.432 195.295 li
@
231.432 3.14551 mo
231.432 5.39551 li
f
231.432 3.14551 mo
231.432 5.39551 li
@
226.416 204.367 mo
227.502 204.367 li
227.502 200.615 li
226.321 200.852 li
226.321 200.244 li
227.496 200.008 li
228.163 200.008 li
228.163 204.367 li
229.25 204.367 li
229.25 204.928 li
226.416 204.928 li
226.416 204.367 li
cp
f
232.018 200.446 mo
231.673 200.446 231.417 200.615 231.242 200.953 cv
231.066 201.29 230.985 201.797 230.985 202.471 cv
230.985 203.146 231.066 203.652 231.242 203.99 cv
231.417 204.328 231.673 204.496 232.018 204.496 cv
232.362 204.496 232.618 204.328 232.794 203.99 cv
232.962 203.652 233.05 203.146 233.05 202.471 cv
233.05 201.797 232.962 201.29 232.794 200.953 cv
232.618 200.615 232.362 200.446 232.018 200.446 cv
232.018 199.92 mo
232.565 199.92 232.983 200.143 233.28 200.574 cv
233.571 201.014 233.718 201.647 233.718 202.471 cv
233.718 203.301 233.571 203.936 233.28 204.367 cv
232.983 204.8 232.565 205.016 232.018 205.016 cv
231.464 205.016 231.04 204.8 230.749 204.367 cv
230.458 203.936 230.317 203.301 230.317 202.471 cv
230.317 201.647 230.458 201.014 230.749 200.574 cv
231.04 200.143 231.464 199.92 232.018 199.92 cv
f
236.311 200.446 mo
235.966 200.446 235.71 200.615 235.535 200.953 cv
235.359 201.29 235.278 201.797 235.278 202.471 cv
235.278 203.146 235.359 203.652 235.535 203.99 cv
235.71 204.328 235.966 204.496 236.311 204.496 cv
236.655 204.496 236.911 204.328 237.087 203.99 cv
237.255 203.652 237.343 203.146 237.343 202.471 cv
237.343 201.797 237.255 201.29 237.087 200.953 cv
236.911 200.615 236.655 200.446 236.311 200.446 cv
236.311 199.92 mo
236.858 199.92 237.276 200.143 237.573 200.574 cv
237.863 201.014 238.011 201.647 238.011 202.471 cv
238.011 203.301 237.863 203.936 237.573 204.367 cv
237.276 204.8 236.858 205.016 236.311 205.016 cv
235.757 205.016 235.332 204.8 235.042 204.367 cv
234.751 203.936 234.61 203.301 234.61 202.471 cv
234.61 201.647 234.751 201.014 235.042 200.574 cv
235.332 200.143 235.757 199.92 236.311 199.92 cv
f
271.608 197.545 mo
271.608 195.295 li
f
271.608 197.545 mo
271.608 195.295 li
@
271.608 3.14551 mo
271.608 5.39551 li
f
271.608 3.14551 mo
271.608 5.39551 li
@
266.591 204.367 mo
267.678 204.367 li
267.678 200.615 li
266.497 200.852 li
266.497 200.244 li
267.671 200.008 li
268.339 200.008 li
268.339 204.367 li
269.426 204.367 li
269.426 204.928 li
266.591 204.928 li
266.591 204.367 li
cp
f
271.343 204.367 mo
273.666 204.367 li
273.666 204.928 li
270.54 204.928 li
270.54 204.367 li
270.79 204.111 271.134 203.76 271.573 203.314 cv
272.005 202.877 272.282 202.594 272.396 202.465 cv
272.613 202.229 272.761 202.025 272.841 201.857 cv
272.923 201.695 272.97 201.525 272.97 201.363 cv
272.97 201.107 272.875 200.892 272.693 200.729 cv
272.51 200.567 272.274 200.48 271.978 200.48 cv
271.769 200.48 271.545 200.52 271.316 200.588 cv
271.087 200.662 270.837 200.77 270.574 200.918 cv
270.574 200.244 li
270.843 200.137 271.093 200.055 271.323 200 cv
271.552 199.947 271.769 199.92 271.964 199.92 cv
272.47 199.92 272.875 200.048 273.179 200.305 cv
273.483 200.561 273.638 200.898 273.638 201.324 cv
273.638 201.525 273.598 201.722 273.524 201.896 cv
273.449 202.08 273.314 202.295 273.112 202.539 cv
273.058 202.605 272.882 202.788 272.585 203.092 cv
272.289 203.396 271.876 203.82 271.343 204.367 cv
f
276.487 200.446 mo
276.142 200.446 275.886 200.615 275.71 200.953 cv
275.535 201.29 275.454 201.797 275.454 202.471 cv
275.454 203.146 275.535 203.652 275.71 203.99 cv
275.886 204.328 276.142 204.496 276.487 204.496 cv
276.831 204.496 277.087 204.328 277.263 203.99 cv
277.432 203.652 277.519 203.146 277.519 202.471 cv
277.519 201.797 277.432 201.29 277.263 200.953 cv
277.087 200.615 276.831 200.446 276.487 200.446 cv
276.487 199.92 mo
277.034 199.92 277.452 200.143 277.749 200.574 cv
278.04 201.014 278.188 201.647 278.188 202.471 cv
278.188 203.301 278.04 203.936 277.749 204.367 cv
277.452 204.8 277.034 205.016 276.487 205.016 cv
275.933 205.016 275.508 204.8 275.217 204.367 cv
274.927 203.936 274.786 203.301 274.786 202.471 cv
274.786 201.647 274.927 201.014 275.217 200.574 cv
275.508 200.143 275.933 199.92 276.487 199.92 cv
f
158.261 212.053 mo
158.261 214.279 li
157.653 214.279 li
157.653 212.072 li
157.653 211.721 157.579 211.465 157.444 211.29 cv
157.309 211.113 157.106 211.025 156.836 211.025 cv
156.505 211.025 156.249 211.135 156.06 211.344 cv
155.871 211.553 155.777 211.836 155.777 212.193 cv
155.777 214.279 li
155.169 214.279 li
155.169 210.588 li
155.777 210.588 li
155.777 211.161 li
155.918 210.945 156.087 210.776 156.29 210.668 cv
156.485 210.561 156.715 210.5 156.971 210.5 cv
157.39 210.5 157.714 210.635 157.93 210.898 cv
158.146 211.161 158.261 211.547 158.261 212.053 cv
f
30.5518 197.545 mo
32.8018 197.545 li
f
30.5518 197.545 mo
32.8018 197.545 li
@
281.652 197.545 mo
279.402 197.545 li
f
281.652 197.545 mo
279.402 197.545 li
@
27.0469 194.927 mo
26.7026 194.927 26.4458 195.096 26.2705 195.434 cv
26.0952 195.771 26.0142 196.277 26.0142 196.951 cv
26.0142 197.627 26.0952 198.133 26.2705 198.471 cv
26.4458 198.809 26.7026 198.977 27.0469 198.977 cv
27.3911 198.977 27.6475 198.809 27.8228 198.471 cv
27.9917 198.133 28.0796 197.627 28.0796 196.951 cv
28.0796 196.277 27.9917 195.771 27.8228 195.434 cv
27.6475 195.096 27.3911 194.927 27.0469 194.927 cv
27.0469 194.4 mo
27.5933 194.4 28.0122 194.623 28.3091 195.055 cv
28.5991 195.494 28.7476 196.128 28.7476 196.951 cv
28.7476 197.781 28.5991 198.416 28.3091 198.848 cv
28.0122 199.28 27.5933 199.496 27.0469 199.496 cv
26.4932 199.496 26.0679 199.28 25.7778 198.848 cv
25.4873 198.416 25.3457 197.781 25.3457 196.951 cv
25.3457 196.128 25.4873 195.494 25.7778 195.055 cv
26.0679 194.623 26.4932 194.4 27.0469 194.4 cv
f
30.5518 173.245 mo
32.8018 173.245 li
f
30.5518 173.245 mo
32.8018 173.245 li
@
281.652 173.245 mo
279.402 173.245 li
f
281.652 173.245 mo
279.402 173.245 li
@
13.3467 174.549 mo
15.6689 174.549 li
15.6689 175.108 li
12.5435 175.108 li
12.5435 174.549 li
12.7935 174.292 13.1377 173.941 13.5762 173.496 cv
14.0083 173.057 14.2852 172.773 14.3999 172.645 cv
14.6157 172.408 14.7642 172.207 14.8452 172.037 cv
14.9263 171.875 14.9736 171.707 14.9736 171.545 cv
14.9736 171.287 14.8789 171.072 14.6968 170.91 cv
14.5146 170.748 14.2783 170.66 13.9814 170.66 cv
13.772 170.66 13.5493 170.701 13.3198 170.768 cv
13.0903 170.842 12.8408 170.95 12.5771 171.099 cv
12.5771 170.424 li
12.8472 170.316 13.0972 170.234 13.3267 170.181 cv
13.5562 170.127 13.772 170.101 13.9678 170.101 cv
14.4741 170.101 14.8789 170.229 15.1826 170.484 cv
15.4868 170.741 15.6421 171.078 15.6421 171.504 cv
15.6421 171.707 15.6016 171.902 15.5269 172.078 cv
15.4526 172.26 15.3179 172.477 15.1152 172.719 cv
15.0615 172.786 14.8857 172.969 14.5889 173.272 cv
14.292 173.576 13.8799 174.002 13.3467 174.549 cv
f
18.4902 170.627 mo
18.146 170.627 17.8896 170.795 17.7139 171.133 cv
17.5386 171.471 17.4575 171.977 17.4575 172.652 cv
17.4575 173.326 17.5386 173.832 17.7139 174.17 cv
17.8896 174.508 18.146 174.676 18.4902 174.676 cv
18.8345 174.676 19.0913 174.508 19.2666 174.17 cv
19.4355 173.832 19.5229 173.326 19.5229 172.652 cv
19.5229 171.977 19.4355 171.471 19.2666 171.133 cv
19.0913 170.795 18.8345 170.627 18.4902 170.627 cv
18.4902 170.1 mo
19.0371 170.1 19.4556 170.322 19.7524 170.756 cv
20.043 171.193 20.1914 171.828 20.1914 172.652 cv
20.1914 173.482 20.043 174.116 19.7524 174.549 cv
19.4556 174.98 19.0371 175.196 18.4902 175.196 cv
17.937 175.196 17.5117 174.98 17.2212 174.549 cv
16.9312 174.116 16.7896 173.482 16.7896 172.652 cv
16.7896 171.828 16.9312 171.193 17.2212 170.756 cv
17.5117 170.322 17.937 170.1 18.4902 170.1 cv
f
22.7832 170.627 mo
22.439 170.627 22.1826 170.795 22.0068 171.133 cv
21.8315 171.471 21.7505 171.977 21.7505 172.652 cv
21.7505 173.326 21.8315 173.832 22.0068 174.17 cv
22.1826 174.508 22.439 174.676 22.7832 174.676 cv
23.1274 174.676 23.3843 174.508 23.5596 174.17 cv
23.7285 173.832 23.8159 173.326 23.8159 172.652 cv
23.8159 171.977 23.7285 171.471 23.5596 171.133 cv
23.3843 170.795 23.1274 170.627 22.7832 170.627 cv
22.7832 170.1 mo
23.3301 170.1 23.7485 170.322 24.0454 170.756 cv
24.3359 171.193 24.4844 171.828 24.4844 172.652 cv
24.4844 173.482 24.3359 174.116 24.0454 174.549 cv
23.7485 174.98 23.3301 175.196 22.7832 175.196 cv
22.23 175.196 21.8047 174.98 21.5142 174.549 cv
21.2241 174.116 21.0825 173.482 21.0825 172.652 cv
21.0825 171.828 21.2241 171.193 21.5142 170.756 cv
21.8047 170.322 22.23 170.1 22.7832 170.1 cv
f
27.0762 170.627 mo
26.7319 170.627 26.4756 170.795 26.2998 171.133 cv
26.1245 171.471 26.0435 171.977 26.0435 172.652 cv
26.0435 173.326 26.1245 173.832 26.2998 174.17 cv
26.4756 174.508 26.7319 174.676 27.0762 174.676 cv
27.4204 174.676 27.6768 174.508 27.8525 174.17 cv
28.021 173.832 28.1089 173.326 28.1089 172.652 cv
28.1089 171.977 28.021 171.471 27.8525 171.133 cv
27.6768 170.795 27.4204 170.627 27.0762 170.627 cv
27.0762 170.1 mo
27.623 170.1 28.0415 170.322 28.3384 170.756 cv
28.6289 171.193 28.7773 171.828 28.7773 172.652 cv
28.7773 173.482 28.6289 174.116 28.3384 174.549 cv
28.0415 174.98 27.623 175.196 27.0762 175.196 cv
26.5225 175.196 26.0977 174.98 25.8071 174.549 cv
25.5171 174.116 25.375 173.482 25.375 172.652 cv
25.375 171.828 25.5171 171.193 25.8071 170.756 cv
26.0977 170.322 26.5225 170.1 27.0762 170.1 cv
f
30.5518 148.945 mo
32.8018 148.945 li
f
30.5518 148.945 mo
32.8018 148.945 li
@
281.652 148.945 mo
279.402 148.945 li
f
281.652 148.945 mo
279.402 148.945 li
@
14.4443 146.469 mo
12.7632 149.094 li
14.4443 149.094 li
14.4443 146.469 li
14.2686 145.889 mo
15.1055 145.889 li
15.1055 149.094 li
15.8076 149.094 li
15.8076 149.647 li
15.1055 149.647 li
15.1055 150.809 li
14.4443 150.809 li
14.4443 149.647 li
12.2231 149.647 li
12.2231 149.007 li
14.2686 145.889 li
cp
f
18.332 146.326 mo
17.9878 146.326 17.7314 146.496 17.5562 146.832 cv
17.3804 147.17 17.2993 147.676 17.2993 148.352 cv
17.2993 149.027 17.3804 149.533 17.5562 149.871 cv
17.7314 150.207 17.9878 150.377 18.332 150.377 cv
18.6763 150.377 18.9331 150.207 19.1084 149.871 cv
19.2773 149.533 19.3647 149.027 19.3647 148.352 cv
19.3647 147.676 19.2773 147.17 19.1084 146.832 cv
18.9331 146.496 18.6763 146.326 18.332 146.326 cv
18.332 145.8 mo
18.8789 145.8 19.2974 146.022 19.5942 146.455 cv
19.8848 146.895 20.0332 147.528 20.0332 148.352 cv
20.0332 149.182 19.8848 149.816 19.5942 150.248 cv
19.2974 150.68 18.8789 150.896 18.332 150.896 cv
17.7788 150.896 17.3535 150.68 17.063 150.248 cv
16.7729 149.816 16.6313 149.182 16.6313 148.352 cv
16.6313 147.528 16.7729 146.895 17.063 146.455 cv
17.3535 146.022 17.7788 145.8 18.332 145.8 cv
f
22.625 146.326 mo
22.2808 146.326 22.0244 146.496 21.8486 146.832 cv
21.6733 147.17 21.5923 147.676 21.5923 148.352 cv
21.5923 149.027 21.6733 149.533 21.8486 149.871 cv
22.0244 150.207 22.2808 150.377 22.625 150.377 cv
22.9692 150.377 23.2256 150.207 23.4014 149.871 cv
23.5698 149.533 23.6577 149.027 23.6577 148.352 cv
23.6577 147.676 23.5698 147.17 23.4014 146.832 cv
23.2256 146.496 22.9692 146.326 22.625 146.326 cv
22.625 145.8 mo
23.1719 145.8 23.5903 146.022 23.8872 146.455 cv
24.1777 146.895 24.3262 147.528 24.3262 148.352 cv
24.3262 149.182 24.1777 149.816 23.8872 150.248 cv
23.5903 150.68 23.1719 150.896 22.625 150.896 cv
22.0718 150.896 21.6465 150.68 21.356 150.248 cv
21.0659 149.816 20.9238 149.182 20.9238 148.352 cv
20.9238 147.528 21.0659 146.895 21.356 146.455 cv
21.6465 146.022 22.0718 145.8 22.625 145.8 cv
f
26.918 146.326 mo
26.5737 146.326 26.3174 146.496 26.1416 146.832 cv
25.9663 147.17 25.8853 147.676 25.8853 148.352 cv
25.8853 149.027 25.9663 149.533 26.1416 149.871 cv
26.3174 150.207 26.5737 150.377 26.918 150.377 cv
27.2622 150.377 27.5186 150.207 27.6943 149.871 cv
27.8628 149.533 27.9507 149.027 27.9507 148.352 cv
27.9507 147.676 27.8628 147.17 27.6943 146.832 cv
27.5186 146.496 27.2622 146.326 26.918 146.326 cv
26.918 145.8 mo
27.4648 145.8 27.8833 146.022 28.1802 146.455 cv
28.4702 146.895 28.6191 147.528 28.6191 148.352 cv
28.6191 149.182 28.4702 149.816 28.1802 150.248 cv
27.8833 150.68 27.4648 150.896 26.918 150.896 cv
26.3643 150.896 25.939 150.68 25.6489 150.248 cv
25.3589 149.816 25.2168 149.182 25.2168 148.352 cv
25.2168 147.528 25.3589 146.895 25.6489 146.455 cv
25.939 146.022 26.3643 145.8 26.918 145.8 cv
f
30.5518 124.646 mo
32.8018 124.646 li
f
30.5518 124.646 mo
32.8018 124.646 li
@
281.652 124.646 mo
279.402 124.646 li
f
281.652 124.646 mo
279.402 124.646 li
@
14.2607 123.781 mo
13.9634 123.781 13.7275 123.889 13.5518 124.092 cv
13.3765 124.294 13.2886 124.578 13.2886 124.929 cv
13.2886 125.287 13.3765 125.571 13.5518 125.772 cv
13.7275 125.975 13.9634 126.077 14.2607 126.077 cv
14.5576 126.077 14.7939 125.975 14.9692 125.772 cv
15.145 125.571 15.2324 125.287 15.2324 124.929 cv
15.2324 124.578 15.145 124.294 14.9692 124.092 cv
14.7939 123.889 14.5576 123.781 14.2607 123.781 cv
15.5835 121.696 mo
15.5835 122.303 li
15.415 122.223 15.2461 122.162 15.0771 122.122 cv
14.9019 122.081 14.7329 122.06 14.5713 122.06 cv
14.1255 122.06 13.7881 122.208 13.5586 122.505 cv
13.3291 122.803 13.1943 123.255 13.167 123.849 cv
13.2954 123.66 13.4575 123.512 13.6533 123.411 cv
13.8491 123.309 14.0649 123.255 14.3013 123.255 cv
14.7939 123.255 15.1855 123.411 15.4688 123.707 cv
15.7524 124.004 15.9009 124.417 15.9009 124.929 cv
15.9009 125.435 15.7456 125.84 15.4487 126.144 cv
15.1519 126.448 14.7534 126.597 14.2607 126.597 cv
13.6938 126.597 13.2549 126.38 12.958 125.949 cv
12.6543 125.516 12.5059 124.882 12.5059 124.051 cv
12.5059 123.276 12.688 122.654 13.0591 122.196 cv
13.4238 121.736 13.9233 121.5 14.5439 121.5 cv
14.7061 121.5 14.875 121.52 15.0503 121.547 cv
15.2192 121.582 15.3945 121.629 15.5835 121.696 cv
f
18.4727 122.027 mo
18.1284 122.027 17.8721 122.196 17.6968 122.533 cv
17.521 122.871 17.4399 123.376 17.4399 124.052 cv
17.4399 124.727 17.521 125.232 17.6968 125.571 cv
17.8721 125.908 18.1284 126.076 18.4727 126.076 cv
18.8169 126.076 19.0737 125.908 19.249 125.571 cv
19.418 125.232 19.5054 124.727 19.5054 124.052 cv
19.5054 123.376 19.418 122.871 19.249 122.533 cv
19.0737 122.196 18.8169 122.027 18.4727 122.027 cv
18.4727 121.5 mo
19.0195 121.5 19.438 121.723 19.7349 122.155 cv
20.0254 122.594 20.1738 123.229 20.1738 124.052 cv
20.1738 124.881 20.0254 125.516 19.7349 125.949 cv
19.438 126.38 19.0195 126.597 18.4727 126.597 cv
17.9194 126.597 17.4941 126.38 17.2036 125.949 cv
16.9136 125.516 16.772 124.881 16.772 124.052 cv
16.772 123.229 16.9136 122.594 17.2036 122.155 cv
17.4941 121.723 17.9194 121.5 18.4727 121.5 cv
f
22.7656 122.027 mo
22.4214 122.027 22.165 122.196 21.9893 122.533 cv
21.814 122.871 21.7329 123.376 21.7329 124.052 cv
21.7329 124.727 21.814 125.232 21.9893 125.571 cv
22.165 125.908 22.4214 126.076 22.7656 126.076 cv
23.1099 126.076 23.3662 125.908 23.542 125.571 cv
23.7104 125.232 23.7983 124.727 23.7983 124.052 cv
23.7983 123.376 23.7104 122.871 23.542 122.533 cv
23.3662 122.196 23.1099 122.027 22.7656 122.027 cv
22.7656 121.5 mo
23.3125 121.5 23.731 121.723 24.0278 122.155 cv
24.3184 122.594 24.4668 123.229 24.4668 124.052 cv
24.4668 124.881 24.3184 125.516 24.0278 125.949 cv
23.731 126.38 23.3125 126.597 22.7656 126.597 cv
22.2124 126.597 21.7871 126.38 21.4966 125.949 cv
21.2065 125.516 21.0645 124.881 21.0645 124.052 cv
21.0645 123.229 21.2065 122.594 21.4966 122.155 cv
21.7871 121.723 22.2124 121.5 22.7656 121.5 cv
f
27.0586 122.027 mo
26.7144 122.027 26.458 122.196 26.2822 122.533 cv
26.1069 122.871 26.0259 123.376 26.0259 124.052 cv
26.0259 124.727 26.1069 125.232 26.2822 125.571 cv
26.458 125.908 26.7144 126.076 27.0586 126.076 cv
27.4028 126.076 27.6592 125.908 27.835 125.571 cv
28.0034 125.232 28.0913 124.727 28.0913 124.052 cv
28.0913 123.376 28.0034 122.871 27.835 122.533 cv
27.6592 122.196 27.4028 122.027 27.0586 122.027 cv
27.0586 121.5 mo
27.6055 121.5 28.0239 121.723 28.3208 122.155 cv
28.6108 122.594 28.7598 123.229 28.7598 124.052 cv
28.7598 124.881 28.6108 125.516 28.3208 125.949 cv
28.0239 126.38 27.6055 126.597 27.0586 126.597 cv
26.5049 126.597 26.0796 126.38 25.7896 125.949 cv
25.4995 125.516 25.3574 124.881 25.3574 124.052 cv
25.3574 123.229 25.4995 122.594 25.7896 122.155 cv
26.0796 121.723 26.5049 121.5 27.0586 121.5 cv
f
30.5518 100.345 mo
32.8018 100.345 li
f
30.5518 100.345 mo
32.8018 100.345 li
@
281.652 100.345 mo
279.402 100.345 li
f
281.652 100.345 mo
279.402 100.345 li
@
14.1621 99.873 mo
13.8447 99.873 13.5952 99.9609 13.4126 100.13 cv
13.2305 100.298 13.1426 100.528 13.1426 100.825 cv
13.1426 101.122 13.2305 101.358 13.4126 101.527 cv
13.5952 101.696 13.8447 101.777 14.1621 101.777 cv
14.4727 101.777 14.7222 101.696 14.9043 101.52 cv
15.0869 101.351 15.1812 101.122 15.1812 100.825 cv
15.1812 100.528 15.0869 100.298 14.9111 100.13 cv
14.729 99.9609 14.4795 99.873 14.1621 99.873 cv
13.4937 99.5898 mo
13.2104 99.522 12.9873 99.3872 12.8257 99.1914 cv
12.6636 98.9956 12.5894 98.7593 12.5894 98.4761 cv
12.5894 98.0845 12.7241 97.7739 13.0078 97.5444 cv
13.2847 97.3149 13.6694 97.2002 14.1621 97.2002 cv
14.6479 97.2002 15.0327 97.3149 15.3164 97.5444 cv
15.5933 97.7739 15.7349 98.0845 15.7349 98.4761 cv
15.7349 98.7593 15.6538 98.9956 15.4917 99.1914 cv
15.3296 99.3872 15.1138 99.522 14.8301 99.5898 cv
15.1475 99.6641 15.3975 99.8125 15.5796 100.028 cv
15.7549 100.245 15.8496 100.514 15.8496 100.825 cv
15.8496 101.304 15.7012 101.668 15.4106 101.918 cv
15.1138 102.175 14.7021 102.296 14.1621 102.296 cv
13.6152 102.296 13.1968 102.175 12.9067 101.918 cv
12.6162 101.668 12.4746 101.304 12.4746 100.825 cv
12.4746 100.514 12.5625 100.245 12.7446 100.028 cv
12.9199 99.8125 13.1699 99.6641 13.4937 99.5898 cv
13.251 98.5366 mo
13.251 98.793 13.3252 98.9956 13.4868 99.1372 cv
13.6489 99.2793 13.8716 99.3467 14.1621 99.3467 cv
14.4453 99.3467 14.6685 99.2793 14.8301 99.1372 cv
14.9922 98.9956 15.0732 98.793 15.0732 98.5366 cv
15.0732 98.2803 14.9922 98.0845 14.8301 97.9429 cv
14.6685 97.8008 14.4453 97.7266 14.1621 97.7266 cv
13.8716 97.7266 13.6489 97.8008 13.4868 97.9429 cv
13.3252 98.0845 13.251 98.2803 13.251 98.5366 cv
f
18.4551 97.7266 mo
18.1108 97.7266 17.8545 97.8955 17.6787 98.2329 cv
17.5034 98.5703 17.4224 99.0767 17.4224 99.7515 cv
17.4224 100.427 17.5034 100.933 17.6787 101.271 cv
17.8545 101.607 18.1108 101.777 18.4551 101.777 cv
18.7993 101.777 19.0562 101.607 19.2314 101.271 cv
19.4004 100.933 19.4878 100.427 19.4878 99.7515 cv
19.4878 99.0767 19.4004 98.5703 19.2314 98.2329 cv
19.0562 97.8955 18.7993 97.7266 18.4551 97.7266 cv
18.4551 97.2002 mo
19.002 97.2002 19.4204 97.4229 19.7173 97.855 cv
20.0078 98.2935 20.1563 98.9282 20.1563 99.7515 cv
20.1563 100.582 20.0078 101.216 19.7173 101.648 cv
19.4204 102.081 19.002 102.296 18.4551 102.296 cv
17.9019 102.296 17.4766 102.081 17.186 101.648 cv
16.896 101.216 16.7544 100.582 16.7544 99.7515 cv
16.7544 98.9282 16.896 98.2935 17.186 97.855 cv
17.4766 97.4229 17.9019 97.2002 18.4551 97.2002 cv
f
22.748 97.7266 mo
22.4038 97.7266 22.1475 97.8955 21.9717 98.2329 cv
21.7964 98.5703 21.7153 99.0767 21.7153 99.7515 cv
21.7153 100.427 21.7964 100.933 21.9717 101.271 cv
22.1475 101.607 22.4038 101.777 22.748 101.777 cv
23.0923 101.777 23.3491 101.607 23.5244 101.271 cv
23.6934 100.933 23.7808 100.427 23.7808 99.7515 cv
23.7808 99.0767 23.6934 98.5703 23.5244 98.2329 cv
23.3491 97.8955 23.0923 97.7266 22.748 97.7266 cv
22.748 97.2002 mo
23.2949 97.2002 23.7134 97.4229 24.0103 97.855 cv
24.3008 98.2935 24.4492 98.9282 24.4492 99.7515 cv
24.4492 100.582 24.3008 101.216 24.0103 101.648 cv
23.7134 102.081 23.2949 102.296 22.748 102.296 cv
22.1948 102.296 21.7695 102.081 21.479 101.648 cv
21.189 101.216 21.0474 100.582 21.0474 99.7515 cv
21.0474 98.9282 21.189 98.2935 21.479 97.855 cv
21.7695 97.4229 22.1948 97.2002 22.748 97.2002 cv
f
27.041 97.7266 mo
26.6968 97.7266 26.4404 97.8955 26.2646 98.2329 cv
26.0894 98.5703 26.0083 99.0767 26.0083 99.7515 cv
26.0083 100.427 26.0894 100.933 26.2646 101.271 cv
26.4404 101.607 26.6968 101.777 27.041 101.777 cv
27.3853 101.777 27.6416 101.607 27.8174 101.271 cv
27.9858 100.933 28.0737 100.427 28.0737 99.7515 cv
28.0737 99.0767 27.9858 98.5703 27.8174 98.2329 cv
27.6416 97.8955 27.3853 97.7266 27.041 97.7266 cv
27.041 97.2002 mo
27.5879 97.2002 28.0063 97.4229 28.3032 97.855 cv
28.5938 98.2935 28.7422 98.9282 28.7422 99.7515 cv
28.7422 100.582 28.5938 101.216 28.3032 101.648 cv
28.0063 102.081 27.5879 102.296 27.041 102.296 cv
26.4873 102.296 26.0625 102.081 25.772 101.648 cv
25.4819 101.216 25.3398 100.582 25.3398 99.7515 cv
25.3398 98.9282 25.4819 98.2935 25.772 97.855 cv
26.0625 97.4229 26.4873 97.2002 27.041 97.2002 cv
f
30.5518 76.0454 mo
32.8018 76.0454 li
f
30.5518 76.0454 mo
32.8018 76.0454 li
@
281.652 76.0454 mo
279.402 76.0454 li
f
281.652 76.0454 mo
279.402 76.0454 li
@
8.83594 77.3486 mo
9.92236 77.3486 li
9.92236 73.5952 li
8.74121 73.8315 li
8.74121 73.2241 li
9.91602 72.9878 li
10.584 72.9878 li
10.584 77.3486 li
11.6709 77.3486 li
11.6709 77.9087 li
8.83594 77.9087 li
8.83594 77.3486 li
cp
f
14.4385 73.4268 mo
14.0942 73.4268 13.8379 73.5952 13.6626 73.9331 cv
13.4868 74.2705 13.4058 74.7769 13.4058 75.4517 cv
13.4058 76.1265 13.4868 76.6328 13.6626 76.9702 cv
13.8379 77.3081 14.0942 77.4766 14.4385 77.4766 cv
14.7827 77.4766 15.0396 77.3081 15.2148 76.9702 cv
15.3838 76.6328 15.4712 76.1265 15.4712 75.4517 cv
15.4712 74.7769 15.3838 74.2705 15.2148 73.9331 cv
15.0396 73.5952 14.7827 73.4268 14.4385 73.4268 cv
14.4385 72.8999 mo
14.9854 72.8999 15.4038 73.123 15.7007 73.5547 cv
15.9912 73.9937 16.1396 74.6279 16.1396 75.4517 cv
16.1396 76.2817 15.9912 76.9165 15.7007 77.3481 cv
15.4038 77.7803 14.9854 77.9966 14.4385 77.9966 cv
13.8853 77.9966 13.46 77.7803 13.1694 77.3481 cv
12.8794 76.9165 12.7378 76.2817 12.7378 75.4517 cv
12.7378 74.6279 12.8794 73.9937 13.1694 73.5547 cv
13.46 73.123 13.8853 72.8999 14.4385 72.8999 cv
f
18.7314 73.4268 mo
18.3872 73.4268 18.1309 73.5952 17.9551 73.9331 cv
17.7798 74.2705 17.6987 74.7769 17.6987 75.4517 cv
17.6987 76.1265 17.7798 76.6328 17.9551 76.9702 cv
18.1309 77.3081 18.3872 77.4766 18.7314 77.4766 cv
19.0757 77.4766 19.332 77.3081 19.5078 76.9702 cv
19.6763 76.6328 19.7642 76.1265 19.7642 75.4517 cv
19.7642 74.7769 19.6763 74.2705 19.5078 73.9331 cv
19.332 73.5952 19.0757 73.4268 18.7314 73.4268 cv
18.7314 72.8999 mo
19.2783 72.8999 19.6968 73.123 19.9937 73.5547 cv
20.2842 73.9937 20.4326 74.6279 20.4326 75.4517 cv
20.4326 76.2817 20.2842 76.9165 19.9937 77.3481 cv
19.6968 77.7803 19.2783 77.9966 18.7314 77.9966 cv
18.1782 77.9966 17.7529 77.7803 17.4624 77.3481 cv
17.1724 76.9165 17.0303 76.2817 17.0303 75.4517 cv
17.0303 74.6279 17.1724 73.9937 17.4624 73.5547 cv
17.7529 73.123 18.1782 72.8999 18.7314 72.8999 cv
f
23.0244 73.4268 mo
22.6802 73.4268 22.4238 73.5952 22.248 73.9331 cv
22.0728 74.2705 21.9917 74.7769 21.9917 75.4517 cv
21.9917 76.1265 22.0728 76.6328 22.248 76.9702 cv
22.4238 77.3081 22.6802 77.4766 23.0244 77.4766 cv
23.3687 77.4766 23.625 77.3081 23.8008 76.9702 cv
23.9692 76.6328 24.0571 76.1265 24.0571 75.4517 cv
24.0571 74.7769 23.9692 74.2705 23.8008 73.9331 cv
23.625 73.5952 23.3687 73.4268 23.0244 73.4268 cv
23.0244 72.8999 mo
23.5713 72.8999 23.9897 73.123 24.2866 73.5547 cv
24.5771 73.9937 24.7256 74.6279 24.7256 75.4517 cv
24.7256 76.2817 24.5771 76.9165 24.2866 77.3481 cv
23.9897 77.7803 23.5713 77.9966 23.0244 77.9966 cv
22.4707 77.9966 22.0459 77.7803 21.7554 77.3481 cv
21.4653 76.9165 21.3232 76.2817 21.3232 75.4517 cv
21.3232 74.6279 21.4653 73.9937 21.7554 73.5547 cv
22.0459 73.123 22.4707 72.8999 23.0244 72.8999 cv
f
27.3174 73.4268 mo
26.9731 73.4268 26.7168 73.5952 26.5415 73.9331 cv
26.3657 74.2705 26.2847 74.7769 26.2847 75.4517 cv
26.2847 76.1265 26.3657 76.6328 26.5415 76.9702 cv
26.7168 77.3081 26.9731 77.4766 27.3174 77.4766 cv
27.6616 77.4766 27.9185 77.3081 28.0938 76.9702 cv
28.2627 76.6328 28.3506 76.1265 28.3506 75.4517 cv
28.3506 74.7769 28.2627 74.2705 28.0938 73.9331 cv
27.9185 73.5952 27.6616 73.4268 27.3174 73.4268 cv
27.3174 72.8999 mo
27.8643 72.8999 28.2827 73.123 28.5801 73.5547 cv
28.8701 73.9937 29.0186 74.6279 29.0186 75.4517 cv
29.0186 76.2817 28.8701 76.9165 28.5801 77.3481 cv
28.2827 77.7803 27.8643 77.9966 27.3174 77.9966 cv
26.7642 77.9966 26.3389 77.7803 26.0488 77.3481 cv
25.7583 76.9165 25.6167 76.2817 25.6167 75.4517 cv
25.6167 74.6279 25.7583 73.9937 26.0488 73.5547 cv
26.3389 73.123 26.7642 72.8999 27.3174 72.8999 cv
f
30.5518 51.7456 mo
32.8018 51.7456 li
f
30.5518 51.7456 mo
32.8018 51.7456 li
@
281.652 51.7456 mo
279.402 51.7456 li
f
281.652 51.7456 mo
279.402 51.7456 li
@
8.83594 53.0483 mo
9.92236 53.0483 li
9.92236 49.2954 li
8.74121 49.5317 li
8.74121 48.9243 li
9.91602 48.688 li
10.584 48.688 li
10.584 53.0483 li
11.6709 53.0483 li
11.6709 53.6089 li
8.83594 53.6089 li
8.83594 53.0483 li
cp
f
13.5879 53.0483 mo
15.9102 53.0483 li
15.9102 53.6089 li
12.7847 53.6089 li
12.7847 53.0483 li
13.0347 52.792 13.3789 52.4409 13.8174 51.9956 cv
14.2495 51.5566 14.5264 51.2729 14.6411 51.145 cv
14.8569 50.9087 15.0054 50.7061 15.0864 50.5376 cv
15.1675 50.3755 15.2148 50.2065 15.2148 50.0444 cv
15.2148 49.7881 15.1201 49.5723 14.938 49.4102 cv
14.7559 49.248 14.5195 49.1606 14.2227 49.1606 cv
14.0132 49.1606 13.7905 49.2007 13.561 49.2686 cv
13.3315 49.3428 13.0815 49.4507 12.8184 49.5991 cv
12.8184 48.9243 li
13.0884 48.8159 13.3384 48.7349 13.5679 48.6812 cv
13.7974 48.627 14.0132 48.6001 14.209 48.6001 cv
14.7153 48.6001 15.1201 48.7285 15.4238 48.9849 cv
15.7275 49.2412 15.8828 49.5786 15.8828 50.0044 cv
15.8828 50.2065 15.8423 50.4023 15.7681 50.5776 cv
15.6938 50.7603 15.5591 50.9761 15.3564 51.2192 cv
15.3022 51.2866 15.127 51.4688 14.8301 51.7725 cv
14.5332 52.0762 14.1211 52.5015 13.5879 53.0483 cv
f
18.7314 49.1265 mo
18.3872 49.1265 18.1309 49.2954 17.9551 49.6328 cv
17.7798 49.9702 17.6987 50.4766 17.6987 51.1514 cv
17.6987 51.8267 17.7798 52.3325 17.9551 52.6704 cv
18.1309 53.0078 18.3872 53.1763 18.7314 53.1763 cv
19.0757 53.1763 19.332 53.0078 19.5078 52.6704 cv
19.6763 52.3325 19.7642 51.8267 19.7642 51.1514 cv
19.7642 50.4766 19.6763 49.9702 19.5078 49.6328 cv
19.332 49.2954 19.0757 49.1265 18.7314 49.1265 cv
18.7314 48.6001 mo
19.2783 48.6001 19.6968 48.8228 19.9937 49.2549 cv
20.2842 49.6934 20.4326 50.3281 20.4326 51.1514 cv
20.4326 51.9819 20.2842 52.6162 19.9937 53.0483 cv
19.6968 53.4805 19.2783 53.6963 18.7314 53.6963 cv
18.1782 53.6963 17.7529 53.4805 17.4624 53.0483 cv
17.1724 52.6162 17.0303 51.9819 17.0303 51.1514 cv
17.0303 50.3281 17.1724 49.6934 17.4624 49.2549 cv
17.7529 48.8228 18.1782 48.6001 18.7314 48.6001 cv
f
23.0244 49.1265 mo
22.6802 49.1265 22.4238 49.2954 22.248 49.6328 cv
22.0728 49.9702 21.9917 50.4766 21.9917 51.1514 cv
21.9917 51.8267 22.0728 52.3325 22.248 52.6704 cv
22.4238 53.0078 22.6802 53.1763 23.0244 53.1763 cv
23.3687 53.1763 23.625 53.0078 23.8008 52.6704 cv
23.9692 52.3325 24.0571 51.8267 24.0571 51.1514 cv
24.0571 50.4766 23.9692 49.9702 23.8008 49.6328 cv
23.625 49.2954 23.3687 49.1265 23.0244 49.1265 cv
23.0244 48.6001 mo
23.5713 48.6001 23.9897 48.8228 24.2866 49.2549 cv
24.5771 49.6934 24.7256 50.3281 24.7256 51.1514 cv
24.7256 51.9819 24.5771 52.6162 24.2866 53.0483 cv
23.9897 53.4805 23.5713 53.6963 23.0244 53.6963 cv
22.4707 53.6963 22.0459 53.4805 21.7554 53.0483 cv
21.4653 52.6162 21.3232 51.9819 21.3232 51.1514 cv
21.3232 50.3281 21.4653 49.6934 21.7554 49.2549 cv
22.0459 48.8228 22.4707 48.6001 23.0244 48.6001 cv
f
27.3174 49.1265 mo
26.9731 49.1265 26.7168 49.2954 26.5415 49.6328 cv
26.3657 49.9702 26.2847 50.4766 26.2847 51.1514 cv
26.2847 51.8267 26.3657 52.3325 26.5415 52.6704 cv
26.7168 53.0078 26.9731 53.1763 27.3174 53.1763 cv
27.6616 53.1763 27.9185 53.0078 28.0938 52.6704 cv
28.2627 52.3325 28.3506 51.8267 28.3506 51.1514 cv
28.3506 50.4766 28.2627 49.9702 28.0938 49.6328 cv
27.9185 49.2954 27.6616 49.1265 27.3174 49.1265 cv
27.3174 48.6001 mo
27.8643 48.6001 28.2827 48.8228 28.5801 49.2549 cv
28.8701 49.6934 29.0186 50.3281 29.0186 51.1514 cv
29.0186 51.9819 28.8701 52.6162 28.5801 53.0483 cv
28.2827 53.4805 27.8643 53.6963 27.3174 53.6963 cv
26.7642 53.6963 26.3389 53.4805 26.0488 53.0483 cv
25.7583 52.6162 25.6167 51.9819 25.6167 51.1514 cv
25.6167 50.3281 25.7583 49.6934 26.0488 49.2549 cv
26.3389 48.8228 26.7642 48.6001 27.3174 48.6001 cv
f
30.5518 27.4453 mo
32.8018 27.4453 li
f
30.5518 27.4453 mo
32.8018 27.4453 li
@
281.652 27.4453 mo
279.402 27.4453 li
f
281.652 27.4453 mo
279.402 27.4453 li
@
8.83594 28.7485 mo
9.92236 28.7485 li
9.92236 24.9951 li
8.74121 25.2314 li
8.74121 24.624 li
9.91602 24.3877 li
10.584 24.3877 li
10.584 28.7485 li
11.6709 28.7485 li
11.6709 29.3086 li
8.83594 29.3086 li
8.83594 28.7485 li
cp
f
14.8433 24.9683 mo
13.1626 27.5942 li
14.8433 27.5942 li
14.8433 24.9683 li
14.668 24.3882 mo
15.5049 24.3882 li
15.5049 27.5942 li
16.207 27.5942 li
16.207 28.1479 li
15.5049 28.1479 li
15.5049 29.3086 li
14.8433 29.3086 li
14.8433 28.1479 li
12.6226 28.1479 li
12.6226 27.5063 li
14.668 24.3882 li
cp
f
18.7314 24.8267 mo
18.3872 24.8267 18.1309 24.9956 17.9551 25.333 cv
17.7798 25.6704 17.6987 26.1768 17.6987 26.8516 cv
17.6987 27.5269 17.7798 28.0327 17.9551 28.3706 cv
18.1309 28.708 18.3872 28.8765 18.7314 28.8765 cv
19.0757 28.8765 19.332 28.708 19.5078 28.3706 cv
19.6763 28.0327 19.7642 27.5269 19.7642 26.8516 cv
19.7642 26.1768 19.6763 25.6704 19.5078 25.333 cv
19.332 24.9956 19.0757 24.8267 18.7314 24.8267 cv
18.7314 24.3003 mo
19.2783 24.3003 19.6968 24.5229 19.9937 24.9551 cv
20.2842 25.3936 20.4326 26.0283 20.4326 26.8516 cv
20.4326 27.6821 20.2842 28.3164 19.9937 28.7485 cv
19.6968 29.1802 19.2783 29.3965 18.7314 29.3965 cv
18.1782 29.3965 17.7529 29.1802 17.4624 28.7485 cv
17.1724 28.3164 17.0303 27.6821 17.0303 26.8516 cv
17.0303 26.0283 17.1724 25.3936 17.4624 24.9551 cv
17.7529 24.5229 18.1782 24.3003 18.7314 24.3003 cv
f
23.0244 24.8267 mo
22.6802 24.8267 22.4238 24.9956 22.248 25.333 cv
22.0728 25.6704 21.9917 26.1768 21.9917 26.8516 cv
21.9917 27.5269 22.0728 28.0327 22.248 28.3706 cv
22.4238 28.708 22.6802 28.8765 23.0244 28.8765 cv
23.3687 28.8765 23.625 28.708 23.8008 28.3706 cv
23.9692 28.0327 24.0571 27.5269 24.0571 26.8516 cv
24.0571 26.1768 23.9692 25.6704 23.8008 25.333 cv
23.625 24.9956 23.3687 24.8267 23.0244 24.8267 cv
23.0244 24.3003 mo
23.5713 24.3003 23.9897 24.5229 24.2866 24.9551 cv
24.5771 25.3936 24.7256 26.0283 24.7256 26.8516 cv
24.7256 27.6821 24.5771 28.3164 24.2866 28.7485 cv
23.9897 29.1802 23.5713 29.3965 23.0244 29.3965 cv
22.4707 29.3965 22.0459 29.1802 21.7554 28.7485 cv
21.4653 28.3164 21.3232 27.6821 21.3232 26.8516 cv
21.3232 26.0283 21.4653 25.3936 21.7554 24.9551 cv
22.0459 24.5229 22.4707 24.3003 23.0244 24.3003 cv
f
27.3174 24.8267 mo
26.9731 24.8267 26.7168 24.9956 26.5415 25.333 cv
26.3657 25.6704 26.2847 26.1768 26.2847 26.8516 cv
26.2847 27.5269 26.3657 28.0327 26.5415 28.3706 cv
26.7168 28.708 26.9731 28.8765 27.3174 28.8765 cv
27.6616 28.8765 27.9185 28.708 28.0938 28.3706 cv
28.2627 28.0327 28.3506 27.5269 28.3506 26.8516 cv
28.3506 26.1768 28.2627 25.6704 28.0938 25.333 cv
27.9185 24.9956 27.6616 24.8267 27.3174 24.8267 cv
27.3174 24.3003 mo
27.8643 24.3003 28.2827 24.5229 28.5801 24.9551 cv
28.8701 25.3936 29.0186 26.0283 29.0186 26.8516 cv
29.0186 27.6821 28.8701 28.3164 28.5801 28.7485 cv
28.2827 29.1802 27.8643 29.3965 27.3174 29.3965 cv
26.7642 29.3965 26.3389 29.1802 26.0488 28.7485 cv
25.7583 28.3164 25.6167 27.6821 25.6167 26.8516 cv
25.6167 26.0283 25.7583 25.3936 26.0488 24.9551 cv
26.3389 24.5229 26.7642 24.3003 27.3174 24.3003 cv
f
30.5518 3.14551 mo
32.8018 3.14551 li
f
30.5518 3.14551 mo
32.8018 3.14551 li
@
281.652 3.14551 mo
279.402 3.14551 li
f
281.652 3.14551 mo
279.402 3.14551 li
@
8.83594 4.44824 mo
9.92236 4.44824 li
9.92236 .695313 li
8.74121 .931641 li
8.74121 .324219 li
9.91602 .0878906 li
10.584 .0878906 li
10.584 4.44824 li
11.6709 4.44824 li
11.6709 5.00879 li
8.83594 5.00879 li
8.83594 4.44824 li
cp
f
14.5195 2.28174 mo
14.2222 2.28174 13.9858 2.38965 13.8105 2.59229 cv
13.6353 2.79443 13.5474 3.07813 13.5474 3.4292 cv
13.5474 3.78711 13.6353 4.07031 13.8105 4.27295 cv
13.9858 4.47559 14.2222 4.57666 14.5195 4.57666 cv
14.8164 4.57666 15.0527 4.47559 15.228 4.27295 cv
15.4038 4.07031 15.4912 3.78711 15.4912 3.4292 cv
15.4912 3.07813 15.4038 2.79443 15.228 2.59229 cv
15.0527 2.38965 14.8164 2.28174 14.5195 2.28174 cv
15.8423 .195801 mo
15.8423 .803223 li
15.6733 .722168 15.5049 .661621 15.3359 .621094 cv
15.1606 .580566 14.9917 .560547 14.8296 .560547 cv
14.3843 .560547 14.0469 .708984 13.8174 1.00586 cv
13.5879 1.30273 13.4526 1.75537 13.4258 2.34912 cv
13.5542 2.16016 13.7163 2.01172 13.9116 1.91064 cv
14.1074 1.80908 14.3237 1.75537 14.5601 1.75537 cv
15.0527 1.75537 15.4438 1.91064 15.7275 2.20752 cv
16.0112 2.50439 16.1597 2.91602 16.1597 3.4292 cv
16.1597 3.93555 16.0044 4.34033 15.7075 4.64404 cv
15.4102 4.94775 15.0122 5.09619 14.5195 5.09619 cv
13.9521 5.09619 13.5137 4.88037 13.2168 4.44824 cv
12.9126 4.0166 12.7642 3.38184 12.7642 2.55176 cv
12.7642 1.77539 12.9468 1.1543 13.3179 .695313 cv
13.6821 .236328 14.1816 0 14.8027 0 cv
14.9648 0 15.1338 .0205078 15.3091 .0473633 cv
15.478 .0810547 15.6533 .128418 15.8423 .195801 cv
f
18.7314 .526367 mo
18.3872 .526367 18.1309 .695313 17.9551 1.03271 cv
17.7798 1.37012 17.6987 1.87646 17.6987 2.55176 cv
17.6987 3.22656 17.7798 3.73291 17.9551 4.07031 cv
18.1309 4.40771 18.3872 4.57666 18.7314 4.57666 cv
19.0757 4.57666 19.332 4.40771 19.5078 4.07031 cv
19.6763 3.73291 19.7642 3.22656 19.7642 2.55176 cv
19.7642 1.87646 19.6763 1.37012 19.5078 1.03271 cv
19.332 .695313 19.0757 .526367 18.7314 .526367 cv
18.7314 0 mo
19.2783 0 19.6968 .222656 19.9937 .654785 cv
20.2842 1.09375 20.4326 1.72803 20.4326 2.55176 cv
20.4326 3.38184 20.2842 4.01611 19.9937 4.44824 cv
19.6968 4.88037 19.2783 5.09619 18.7314 5.09619 cv
18.1782 5.09619 17.7529 4.88037 17.4624 4.44824 cv
17.1724 4.01611 17.0303 3.38184 17.0303 2.55176 cv
17.0303 1.72803 17.1724 1.09375 17.4624 .654785 cv
17.7529 .222656 18.1782 0 18.7314 0 cv
f
23.0244 .526367 mo
22.6802 .526367 22.4238 .695313 22.248 1.03271 cv
22.0728 1.37012 21.9917 1.87646 21.9917 2.55176 cv
21.9917 3.22656 22.0728 3.73291 22.248 4.07031 cv
22.4238 4.40771 22.6802 4.57666 23.0244 4.57666 cv
23.3687 4.57666 23.625 4.40771 23.8008 4.07031 cv
23.9692 3.73291 24.0571 3.22656 24.0571 2.55176 cv
24.0571 1.87646 23.9692 1.37012 23.8008 1.03271 cv
23.625 .695313 23.3687 .526367 23.0244 .526367 cv
23.0244 0 mo
23.5713 0 23.9897 .222656 24.2866 .654785 cv
24.5771 1.09375 24.7256 1.72803 24.7256 2.55176 cv
24.7256 3.38184 24.5771 4.01611 24.2866 4.44824 cv
23.9897 4.88037 23.5713 5.09619 23.0244 5.09619 cv
22.4707 5.09619 22.0459 4.88037 21.7554 4.44824 cv
21.4653 4.01611 21.3232 3.38184 21.3232 2.55176 cv
21.3232 1.72803 21.4653 1.09375 21.7554 .654785 cv
22.0459 .222656 22.4707 0 23.0244 0 cv
f
27.3174 .526367 mo
26.9731 .526367 26.7168 .695313 26.5415 1.03271 cv
26.3657 1.37012 26.2847 1.87646 26.2847 2.55176 cv
26.2847 3.22656 26.3657 3.73291 26.5415 4.07031 cv
26.7168 4.40771 26.9731 4.57666 27.3174 4.57666 cv
27.6616 4.57666 27.9185 4.40771 28.0938 4.07031 cv
28.2627 3.73291 28.3506 3.22656 28.3506 2.55176 cv
28.3506 1.87646 28.2627 1.37012 28.0938 1.03271 cv
27.9185 .695313 27.6616 .526367 27.3174 .526367 cv
27.3174 0 mo
27.8643 0 28.2827 .222656 28.5801 .654785 cv
28.8701 1.09375 29.0186 1.72803 29.0186 2.55176 cv
29.0186 3.38184 28.8701 4.01611 28.5801 4.44824 cv
28.2827 4.88037 27.8643 5.09619 27.3174 5.09619 cv
26.7642 5.09619 26.3389 4.88037 26.0488 4.44824 cv
25.7583 4.01611 25.6167 3.38184 25.6167 2.55176 cv
25.6167 1.72803 25.7583 1.09375 26.0488 .654785 cv
26.3389 .222656 26.7642 0 27.3174 0 cv
f
.195801 104.07 mo
.769531 104.07 li
.688477 104.246 .621094 104.421 .57373 104.603 cv
.533203 104.792 .506348 104.981 .506348 105.177 cv
.506348 105.481 .553711 105.71 .647949 105.859 cv
.742676 106.007 .877441 106.081 1.06006 106.081 cv
1.20166 106.081 1.30957 106.027 1.39063 105.919 cv
1.47168 105.812 1.55273 105.596 1.62012 105.272 cv
1.66748 105.063 li
1.76172 104.63 1.89697 104.326 2.05908 104.145 cv
2.22754 103.968 2.46387 103.874 2.76074 103.874 cv
3.10498 103.874 3.375 104.009 3.5708 104.279 cv
3.77344 104.549 3.86816 104.927 3.86816 105.399 cv
3.86816 105.603 3.84766 105.804 3.81396 106.021 cv
3.78027 106.237 3.72607 106.459 3.64502 106.695 cv
3.01758 106.695 li
3.13916 106.473 3.22656 106.25 3.28076 106.034 cv
3.34131 105.818 3.36865 105.603 3.36865 105.387 cv
3.36865 105.103 3.32129 104.88 3.22656 104.725 cv
3.13232 104.576 2.99023 104.496 2.80811 104.496 cv
2.646 104.496 2.51807 104.556 2.43018 104.664 cv
2.34229 104.772 2.25488 105.015 2.17383 105.393 cv
2.12646 105.603 li
2.04541 105.98 1.92383 106.257 1.76172 106.419 cv
1.6001 106.588 1.37695 106.668 1.08691 106.668 cv
.742676 106.668 .472656 106.547 .283691 106.305 cv
.0947266 106.061 0 105.71 0 105.251 cv
0 105.028 .0205078 104.819 .0541992 104.617 cv
.0878906 104.421 .135254 104.239 .195801 104.07 cv
f
2.32227 102.97 mo
.0878906 102.97 li
.0878906 102.362 li
2.30225 102.362 li
2.65332 102.362 2.90967 102.295 3.08496 102.16 cv
3.26074 102.024 3.34814 101.822 3.34814 101.546 cv
3.34814 101.222 3.24707 100.958 3.03809 100.769 cv
2.82861 100.58 2.54492 100.485 2.18066 100.485 cv
.0878906 100.485 li
.0878906 99.8779 li
3.78027 99.8779 li
3.78027 100.485 li
3.21338 100.485 li
3.44287 100.634 3.60498 100.81 3.71289 100.999 cv
3.81396 101.195 3.86816 101.417 3.86816 101.673 cv
3.86816 102.099 3.73975 102.423 3.47656 102.639 cv
3.22021 102.862 2.83545 102.97 2.32227 102.97 cv
f
.796387 95.7539 mo
.526855 95.6055 .331055 95.4233 .195801 95.2139 cv
.0678711 95.0044 0 94.7549 0 94.4644 cv
0 94.0864 .135254 93.7896 .405273 93.5806 cv
.675293 93.3711 1.06006 93.2632 1.55273 93.2632 cv
3.78027 93.2632 li
3.78027 93.8706 li
1.57275 93.8706 li
1.22168 93.8706 .958496 93.938 .783203 94.0596 cv
.614258 94.188 .526855 94.377 .526855 94.6333 cv
.526855 94.9507 .634766 95.2002 .84375 95.3828 cv
1.05322 95.5649 1.33643 95.6528 1.69434 95.6528 cv
3.78027 95.6528 li
3.78027 96.2603 li
1.57275 96.2603 li
1.22168 96.2603 .958496 96.3276 .783203 96.4492 cv
.614258 96.5776 .526855 96.7729 .526855 97.0298 cv
.526855 97.3403 .634766 97.5898 .84375 97.772 cv
1.05322 97.9546 1.33643 98.042 1.69434 98.042 cv
3.78027 98.042 li
3.78027 98.6499 li
.0878906 98.6499 li
.0878906 98.042 li
.661621 98.042 li
.438965 97.9072 .27002 97.7383 .162109 97.5425 cv
.0541992 97.3535 0 97.124 0 96.854 cv
0 96.584 .0678711 96.3613 .202637 96.1724 cv
.337402 95.9834 .540039 95.8481 .796387 95.7539 cv
f
.5625 lw
30.5518 3.14551 mo
281.652 3.14551 li
@
281.652 197.545 mo
281.652 3.14502 li
@
30.5518 197.545 mo
30.5518 3.14502 li
@
30.5518 197.545 mo
281.652 197.545 li
@
118.349 44.6353 mo
193.854 44.6353 li
193.854 7.19482 li
118.349 7.19482 li
118.349 44.6353 li
cp
0 0 0 0 cmyk
f
118.349 44.6353 mo
193.854 44.6353 li
193.854 7.19482 li
118.349 7.19482 li
118.349 44.6353 li
cp
0 0 0 1 cmyk
@
2 lc
124.019 13.5859 mo
135.359 13.5859 li
.884 .769 0 0 cmyk
@
145.031 10.2642 mo
145.76 10.2642 li
145.76 16.4204 li
145.031 16.4204 li
145.031 10.2642 li
cp
0 0 0 1 cmyk
f
147.282 11.9902 mo
148.011 11.9902 li
148.011 16.4209 li
147.282 16.4209 li
147.282 11.9902 li
cp
147.282 10.2642 mo
148.011 10.2642 li
148.011 11.188 li
147.282 11.188 li
147.282 10.2642 li
cp
f
153.22 13.7476 mo
153.22 16.4209 li
152.491 16.4209 li
152.491 13.772 li
152.491 13.3506 152.402 13.043 152.24 12.8325 cv
152.078 12.6216 151.834 12.5166 151.511 12.5166 cv
151.113 12.5166 150.806 12.6465 150.579 12.8975 cv
150.353 13.1479 150.239 13.4883 150.239 13.9175 cv
150.239 16.4209 li
149.51 16.4209 li
149.51 11.9897 li
150.239 11.9897 li
150.239 12.6782 li
150.409 12.4194 150.612 12.2168 150.855 12.0874 cv
151.089 11.9575 151.365 11.8848 151.672 11.8848 cv
152.175 11.8848 152.563 12.0469 152.823 12.3628 cv
153.082 12.6782 153.22 13.1401 153.22 13.7476 cv
f
158.46 14.0229 mo
158.46 14.3794 li
155.115 14.3794 li
155.147 14.8813 155.293 15.2705 155.569 15.5298 cv
155.836 15.7886 156.209 15.9185 156.694 15.9185 cv
156.971 15.9185 157.246 15.8862 157.505 15.8213 cv
157.764 15.7568 158.031 15.6514 158.29 15.5054 cv
158.29 16.1938 li
158.031 16.3071 157.764 16.396 157.489 16.4453 cv
157.213 16.4937 156.929 16.5259 156.654 16.5259 cv
155.941 16.5259 155.382 16.3237 154.97 15.9185 cv
154.557 15.5137 154.354 14.9546 154.354 14.2495 cv
154.354 13.5293 154.548 12.9536 154.937 12.5244 cv
155.326 12.103 155.861 11.8848 156.525 11.8848 cv
157.124 11.8848 157.594 12.0791 157.942 12.46 cv
158.283 12.8486 158.46 13.3672 158.46 14.0229 cv
157.731 13.8125 mo
157.723 13.4155 157.61 13.0991 157.399 12.8569 cv
157.181 12.6216 156.889 12.5005 156.533 12.5005 cv
156.128 12.5005 155.803 12.6216 155.561 12.8486 cv
155.318 13.0752 155.171 13.3999 155.14 13.8125 cv
157.731 13.8125 li
f
161.668 14.1934 mo
161.077 14.1934 160.671 14.2661 160.445 14.396 cv
160.218 14.5332 160.105 14.7603 160.105 15.0845 cv
160.105 15.3433 160.186 15.5542 160.356 15.6997 cv
160.526 15.854 160.761 15.9268 161.052 15.9268 cv
161.458 15.9268 161.782 15.7886 162.025 15.4971 cv
162.267 15.2139 162.389 14.833 162.389 14.3555 cv
162.389 14.1934 li
161.668 14.1934 li
163.118 13.8936 mo
163.118 16.4209 li
162.389 16.4209 li
162.389 15.7485 li
162.218 16.0239 162.008 16.2183 161.765 16.3398 cv
161.522 16.4614 161.214 16.5259 160.859 16.5259 cv
160.405 16.5259 160.04 16.4043 159.773 16.1528 cv
159.505 15.9023 159.376 15.5625 159.376 15.1328 cv
159.376 14.6387 159.538 14.2661 159.878 14.0063 cv
160.21 13.7559 160.705 13.6265 161.369 13.6265 cv
162.389 13.6265 li
162.389 13.5532 li
162.389 13.2212 162.276 12.9619 162.057 12.7759 cv
161.838 12.5977 161.531 12.5 161.133 12.5 cv
160.875 12.5 160.631 12.5327 160.388 12.5977 cv
160.145 12.6621 159.918 12.7515 159.7 12.8647 cv
159.7 12.1924 li
159.959 12.0952 160.218 12.0142 160.469 11.9658 cv
160.72 11.9175 160.963 11.8848 161.207 11.8848 cv
161.846 11.8848 162.325 12.0547 162.64 12.3872 cv
162.957 12.7192 163.118 13.2212 163.118 13.8936 cv
f
167.184 12.6704 mo
167.103 12.6221 167.014 12.5894 166.917 12.5649 cv
166.82 12.5488 166.714 12.5327 166.601 12.5327 cv
166.188 12.5327 165.872 12.6704 165.653 12.9375 cv
165.426 13.2051 165.321 13.5854 165.321 14.0879 cv
165.321 16.4204 li
164.593 16.4204 li
164.593 11.9902 li
165.321 11.9902 li
165.321 12.6787 li
165.467 12.4116 165.67 12.2085 165.913 12.0791 cv
166.156 11.9497 166.456 11.8853 166.812 11.8853 cv
166.86 11.8853 166.917 11.8931 166.982 11.8931 cv
167.039 11.9009 167.103 11.9087 167.184 11.9253 cv
167.184 12.6704 li
f
124.019 25.2559 mo
135.359 25.2559 li
0 .994 1 0 cmyk
@
145.468 25.8794 mo
145.468 26.4146 145.573 26.835 145.792 27.1436 cv
146.011 27.4507 146.319 27.5967 146.708 27.5967 cv
147.088 27.5967 147.388 27.4507 147.615 27.1436 cv
147.833 26.835 147.946 26.4146 147.946 25.8794 cv
147.946 25.3452 147.833 24.9316 147.615 24.624 cv
147.388 24.3164 147.088 24.1621 146.708 24.1621 cv
146.319 24.1621 146.011 24.3164 145.792 24.624 cv
145.573 24.9316 145.468 25.3452 145.468 25.8794 cv
147.946 27.4263 mo
147.793 27.6938 147.598 27.8882 147.364 28.0098 cv
147.128 28.1313 146.853 28.1963 146.529 28.1963 cv
145.995 28.1963 145.557 27.9854 145.217 27.564 cv
144.877 27.1436 144.715 26.5757 144.715 25.8794 cv
144.715 25.1831 144.877 24.624 145.217 24.1948 cv
145.557 23.7734 145.995 23.5547 146.529 23.5547 cv
146.853 23.5547 147.128 23.6191 147.364 23.7495 cv
147.598 23.8784 147.793 24.0732 147.946 24.3325 cv
147.946 23.6606 li
148.675 23.6606 li
148.675 29.7676 li
147.946 29.7676 li
147.946 27.4263 li
0 0 0 1 cmyk
f
150.102 26.3413 mo
150.102 23.6602 li
150.831 23.6602 li
150.831 26.3169 li
150.831 26.7383 150.911 27.0459 151.073 27.2563 cv
151.235 27.4668 151.479 27.5728 151.81 27.5728 cv
152.199 27.5728 152.516 27.4512 152.742 27.1997 cv
152.968 26.9487 153.082 26.6084 153.082 26.1714 cv
153.082 23.6602 li
153.811 23.6602 li
153.811 28.0903 li
153.082 28.0903 li
153.082 27.4106 li
152.904 27.686 152.693 27.8804 152.467 28.0093 cv
152.231 28.1313 151.964 28.1963 151.657 28.1963 cv
151.146 28.1963 150.758 28.042 150.499 27.7261 cv
150.231 27.4189 150.102 26.9565 150.102 26.3413 cv
f
157.326 25.8633 mo
156.735 25.8633 156.33 25.9365 156.104 26.0659 cv
155.876 26.2036 155.764 26.4302 155.764 26.7544 cv
155.764 27.0137 155.844 27.2241 156.015 27.3701 cv
156.185 27.5239 156.419 27.5967 156.711 27.5967 cv
157.116 27.5967 157.44 27.459 157.683 27.167 cv
157.926 26.8838 158.047 26.5034 158.047 26.0254 cv
158.047 25.8633 li
157.326 25.8633 li
158.776 25.5635 mo
158.776 28.0908 li
158.047 28.0908 li
158.047 27.4185 li
157.877 27.6938 157.667 27.8882 157.423 28.0098 cv
157.181 28.1313 156.873 28.1958 156.517 28.1958 cv
156.063 28.1958 155.698 28.0747 155.431 27.8237 cv
155.164 27.5728 155.035 27.2324 155.035 26.8027 cv
155.035 26.3086 155.196 25.9365 155.537 25.6772 cv
155.868 25.4263 156.363 25.2964 157.027 25.2964 cv
158.047 25.2964 li
158.047 25.2231 li
158.047 24.8911 157.934 24.6318 157.715 24.4458 cv
157.497 24.2676 157.189 24.1709 156.792 24.1709 cv
156.533 24.1709 156.29 24.2026 156.047 24.2676 cv
155.804 24.332 155.577 24.4214 155.358 24.5352 cv
155.358 23.8623 li
155.617 23.7656 155.876 23.6841 156.127 23.6357 cv
156.378 23.5874 156.622 23.5547 156.865 23.5547 cv
157.504 23.5547 157.983 23.7251 158.299 24.0571 cv
158.614 24.3892 158.776 24.8911 158.776 25.5635 cv
f
163.191 24.3325 mo
163.191 21.9351 li
163.92 21.9351 li
163.92 28.0908 li
163.191 28.0908 li
163.191 27.4268 li
163.038 27.6938 162.842 27.8882 162.608 28.0098 cv
162.373 28.1313 162.098 28.1963 161.773 28.1963 cv
161.239 28.1963 160.801 27.9858 160.46 27.5645 cv
160.122 27.1431 159.959 26.5762 159.959 25.8794 cv
159.959 25.1826 160.122 24.6245 160.46 24.1943 cv
160.801 23.7729 161.239 23.5552 161.773 23.5552 cv
162.098 23.5552 162.373 23.6196 162.608 23.749 cv
162.842 23.8789 163.038 24.0737 163.191 24.3325 cv
160.712 25.8794 mo
160.712 26.4141 160.818 26.8354 161.037 27.1431 cv
161.255 27.4507 161.563 27.5967 161.952 27.5967 cv
162.333 27.5967 162.632 27.4507 162.859 27.1431 cv
163.078 26.8354 163.191 26.4141 163.191 25.8794 cv
163.191 25.3447 163.078 24.9321 162.859 24.6245 cv
162.632 24.3159 162.333 24.1626 161.952 24.1626 cv
161.563 24.1626 161.255 24.3159 161.037 24.6245 cv
160.818 24.9321 160.712 25.3447 160.712 25.8794 cv
f
167.986 24.3403 mo
167.905 24.292 167.816 24.2598 167.718 24.2349 cv
167.622 24.2192 167.516 24.2026 167.403 24.2026 cv
166.99 24.2026 166.674 24.3403 166.456 24.6079 cv
166.228 24.875 166.123 25.2559 166.123 25.7583 cv
166.123 28.0908 li
165.394 28.0908 li
165.394 23.6606 li
166.123 23.6606 li
166.123 24.3486 li
166.269 24.0811 166.471 23.8789 166.714 23.7495 cv
166.958 23.6196 167.257 23.5547 167.613 23.5547 cv
167.663 23.5547 167.718 23.563 167.784 23.563 cv
167.84 23.5708 167.905 23.5791 167.986 23.5952 cv
167.986 24.3403 li
f
170.764 25.8633 mo
170.173 25.8633 169.768 25.9365 169.542 26.0659 cv
169.315 26.2036 169.202 26.4302 169.202 26.7544 cv
169.202 27.0137 169.282 27.2241 169.453 27.3701 cv
169.623 27.5239 169.857 27.5967 170.149 27.5967 cv
170.554 27.5967 170.877 27.459 171.121 27.167 cv
171.364 26.8838 171.485 26.5034 171.485 26.0254 cv
171.485 25.8633 li
170.764 25.8633 li
172.214 25.5635 mo
172.214 28.0908 li
171.485 28.0908 li
171.485 27.4185 li
171.315 27.6938 171.104 27.8882 170.862 28.0098 cv
170.619 28.1313 170.311 28.1958 169.955 28.1958 cv
169.5 28.1958 169.136 28.0747 168.869 27.8237 cv
168.601 27.5728 168.472 27.2324 168.472 26.8027 cv
168.472 26.3086 168.634 25.9365 168.974 25.6772 cv
169.306 25.4263 169.8 25.2964 170.465 25.2964 cv
171.485 25.2964 li
171.485 25.2231 li
171.485 24.8911 171.372 24.6318 171.153 24.4458 cv
170.935 24.2676 170.626 24.1709 170.23 24.1709 cv
169.97 24.1709 169.727 24.2026 169.485 24.2676 cv
169.242 24.332 169.015 24.4214 168.796 24.5352 cv
168.796 23.8623 li
169.055 23.7656 169.315 23.6841 169.566 23.6357 cv
169.816 23.5874 170.06 23.5547 170.303 23.5547 cv
170.943 23.5547 171.42 23.7251 171.737 24.0571 cv
172.052 24.3892 172.214 24.8911 172.214 25.5635 cv
f
174.433 22.4043 mo
174.433 23.6602 li
175.932 23.6602 li
175.932 24.2271 li
174.433 24.2271 li
174.433 26.6328 li
174.433 26.9976 174.483 27.2324 174.58 27.3291 cv
174.677 27.4346 174.879 27.4834 175.187 27.4834 cv
175.932 27.4834 li
175.932 28.0908 li
175.187 28.0908 li
174.62 28.0908 174.232 27.9858 174.021 27.7749 cv
173.81 27.5645 173.705 27.1836 173.705 26.6328 cv
173.705 24.2271 li
173.17 24.2271 li
173.17 23.6602 li
173.705 23.6602 li
173.705 22.4043 li
174.433 22.4043 li
f
176.888 23.6602 mo
177.617 23.6602 li
177.617 28.0903 li
176.888 28.0903 li
176.888 23.6602 li
cp
176.888 21.9351 mo
177.617 21.9351 li
177.617 22.8589 li
176.888 22.8589 li
176.888 21.9351 li
cp
f
182.332 23.8301 mo
182.332 24.5103 li
182.121 24.397 181.918 24.3164 181.708 24.2593 cv
181.497 24.2031 181.294 24.1704 181.083 24.1704 cv
180.614 24.1704 180.242 24.3242 179.982 24.624 cv
179.723 24.9238 179.593 25.3452 179.593 25.8794 cv
179.593 26.4224 179.723 26.8433 179.982 27.1431 cv
180.242 27.4429 180.614 27.5889 181.083 27.5889 cv
181.294 27.5889 181.497 27.564 181.708 27.5078 cv
181.918 27.4512 182.121 27.3618 182.332 27.2485 cv
182.332 27.9209 li
182.121 28.0181 181.91 28.0903 181.7 28.1313 cv
181.481 28.1714 181.246 28.1963 181.003 28.1963 cv
180.338 28.1963 179.804 27.9932 179.416 27.5728 cv
179.018 27.1592 178.824 26.5923 178.824 25.8794 cv
178.824 25.1582 179.018 24.5918 179.416 24.1782 cv
179.812 23.7656 180.355 23.5547 181.051 23.5547 cv
181.278 23.5547 181.497 23.5796 181.708 23.6274 cv
181.918 23.6768 182.129 23.7407 182.332 23.8301 cv
f
124.019 36.9258 mo
135.359 36.9258 li
.875 .345 1 .294 cmyk
@
148.821 37.3633 mo
148.821 37.7197 li
145.476 37.7197 li
145.508 38.2217 145.655 38.6104 145.93 38.8696 cv
146.197 39.1294 146.57 39.2583 147.056 39.2583 cv
147.332 39.2583 147.606 39.2266 147.866 39.1611 cv
148.125 39.0972 148.392 38.9912 148.651 38.8457 cv
148.651 39.5342 li
148.392 39.6479 148.125 39.7368 147.85 39.7852 cv
147.574 39.834 147.291 39.8662 147.015 39.8662 cv
146.303 39.8662 145.744 39.6636 145.331 39.2583 cv
144.917 38.8535 144.714 38.2949 144.714 37.5903 cv
144.714 36.8691 144.909 36.2944 145.298 35.8647 cv
145.687 35.4438 146.222 35.2251 146.886 35.2251 cv
147.485 35.2251 147.955 35.4194 148.303 35.8003 cv
148.643 36.189 148.821 36.707 148.821 37.3633 cv
148.092 37.1523 mo
148.084 36.7559 147.971 36.4399 147.761 36.1968 cv
147.542 35.9624 147.25 35.8403 146.894 35.8403 cv
146.489 35.8403 146.165 35.9624 145.922 36.189 cv
145.679 36.4155 145.533 36.7397 145.5 37.1523 cv
148.092 37.1523 li
0 0 0 1 cmyk
f
153.698 35.3301 mo
152.094 37.4849 li
153.779 39.7612 li
152.92 39.7612 li
151.632 38.0195 li
150.344 39.7612 li
149.486 39.7612 li
151.203 37.4438 li
149.632 35.3301 li
150.49 35.3301 li
151.665 36.9097 li
152.84 35.3301 li
153.698 35.3301 li
cp
f
155.512 39.0967 mo
155.512 41.438 li
154.783 41.438 li
154.783 35.3306 li
155.512 35.3306 li
155.512 36.0024 li
155.658 35.7432 155.852 35.5483 156.086 35.4194 cv
156.322 35.29 156.605 35.2251 156.93 35.2251 cv
157.464 35.2251 157.901 35.4434 158.242 35.8647 cv
158.574 36.2944 158.744 36.853 158.744 37.5498 cv
158.744 38.2466 158.574 38.8135 158.242 39.2349 cv
157.901 39.6558 157.464 39.8662 156.93 39.8662 cv
156.605 39.8662 156.322 39.8013 156.086 39.6802 cv
155.852 39.5586 155.658 39.3638 155.512 39.0967 cv
157.991 37.5498 mo
157.991 37.0151 157.877 36.6016 157.658 36.2944 cv
157.432 35.9863 157.132 35.8325 156.751 35.8325 cv
156.363 35.8325 156.063 35.9863 155.844 36.2944 cv
155.618 36.6016 155.512 37.0151 155.512 37.5498 cv
155.512 38.0845 155.618 38.5059 155.844 38.8135 cv
156.063 39.1211 156.363 39.2666 156.751 39.2666 cv
157.132 39.2666 157.432 39.1211 157.658 38.8135 cv
157.877 38.5059 157.991 38.0845 157.991 37.5498 cv
f
161.668 35.8403 mo
161.28 35.8403 160.971 35.9941 160.745 36.3022 cv
160.518 36.6099 160.405 37.0234 160.405 37.5498 cv
160.405 38.0845 160.509 38.4971 160.737 38.8052 cv
160.963 39.1133 161.271 39.2588 161.668 39.2588 cv
162.057 39.2588 162.365 39.1133 162.591 38.8052 cv
162.818 38.4971 162.931 38.0845 162.931 37.5498 cv
162.931 37.0313 162.818 36.6099 162.591 36.3022 cv
162.365 35.9941 162.057 35.8403 161.668 35.8403 cv
161.668 35.2251 mo
162.299 35.2251 162.794 35.4355 163.158 35.8403 cv
163.515 36.2534 163.701 36.8208 163.701 37.5498 cv
163.701 38.2783 163.515 38.8452 163.158 39.251 cv
162.794 39.6636 162.299 39.8662 161.668 39.8662 cv
161.028 39.8662 160.526 39.6636 160.169 39.251 cv
159.813 38.8452 159.635 38.2783 159.635 37.5498 cv
159.635 36.8208 159.813 36.2534 160.169 35.8403 cv
160.526 35.4355 161.028 35.2251 161.668 35.2251 cv
f
168.594 37.0879 mo
168.594 39.7612 li
167.864 39.7612 li
167.864 37.1123 li
167.864 36.6909 167.775 36.3833 167.614 36.1729 cv
167.452 35.9624 167.208 35.8569 166.884 35.8569 cv
166.488 35.8569 166.179 35.9868 165.954 36.2373 cv
165.726 36.4883 165.613 36.8286 165.613 37.2578 cv
165.613 39.7612 li
164.883 39.7612 li
164.883 35.3301 li
165.613 35.3301 li
165.613 36.0186 li
165.783 35.7593 165.986 35.5571 166.228 35.4272 cv
166.463 35.2974 166.739 35.2251 167.046 35.2251 cv
167.548 35.2251 167.937 35.3872 168.197 35.7031 cv
168.456 36.0186 168.594 36.4805 168.594 37.0879 cv
f
173.834 37.3633 mo
173.834 37.7197 li
170.489 37.7197 li
170.521 38.2217 170.667 38.6104 170.943 38.8696 cv
171.209 39.1294 171.583 39.2583 172.069 39.2583 cv
172.344 39.2583 172.62 39.2266 172.878 39.1611 cv
173.138 39.0972 173.405 38.9912 173.664 38.8457 cv
173.664 39.5342 li
173.405 39.6479 173.138 39.7368 172.862 39.7852 cv
172.586 39.834 172.303 39.8662 172.028 39.8662 cv
171.315 39.8662 170.756 39.6636 170.343 39.2583 cv
169.93 38.8535 169.727 38.2949 169.727 37.5903 cv
169.727 36.8691 169.922 36.2944 170.311 35.8647 cv
170.7 35.4438 171.235 35.2251 171.899 35.2251 cv
172.498 35.2251 172.967 35.4194 173.316 35.8003 cv
173.657 36.189 173.834 36.707 173.834 37.3633 cv
173.105 37.1523 mo
173.097 36.7559 172.984 36.4399 172.773 36.1968 cv
172.554 35.9624 172.262 35.8403 171.907 35.8403 cv
171.501 35.8403 171.177 35.9624 170.935 36.189 cv
170.692 36.4155 170.545 36.7397 170.513 37.1523 cv
173.105 37.1523 li
f
178.71 37.0879 mo
178.71 39.7612 li
177.982 39.7612 li
177.982 37.1123 li
177.982 36.6909 177.893 36.3833 177.731 36.1729 cv
177.569 35.9624 177.325 35.8569 177.001 35.8569 cv
176.605 35.8569 176.296 35.9868 176.07 36.2373 cv
175.843 36.4883 175.73 36.8286 175.73 37.2578 cv
175.73 39.7612 li
175 39.7612 li
175 35.3301 li
175.73 35.3301 li
175.73 36.0186 li
175.9 35.7593 176.102 35.5571 176.345 35.4272 cv
176.581 35.2974 176.855 35.2251 177.164 35.2251 cv
177.666 35.2251 178.054 35.3872 178.313 35.7031 cv
178.573 36.0186 178.71 36.4805 178.71 37.0879 cv
f
180.881 34.0747 mo
180.881 35.3301 li
182.38 35.3301 li
182.38 35.897 li
180.881 35.897 li
180.881 38.3032 li
180.881 38.6675 180.93 38.9028 181.027 38.9995 cv
181.125 39.1045 181.327 39.1533 181.634 39.1533 cv
182.38 39.1533 li
182.38 39.7612 li
181.634 39.7612 li
181.068 39.7612 180.679 39.6558 180.468 39.4448 cv
180.257 39.2344 180.153 38.8535 180.153 38.3032 cv
180.153 35.897 li
179.618 35.897 li
179.618 35.3301 li
180.153 35.3301 li
180.153 34.0747 li
180.881 34.0747 li
f
183.335 35.3301 mo
184.065 35.3301 li
184.065 39.7607 li
183.335 39.7607 li
183.335 35.3301 li
cp
183.335 33.6055 mo
184.065 33.6055 li
184.065 34.5288 li
183.335 34.5288 li
183.335 33.6055 li
cp
f
187.605 37.5337 mo
187.013 37.5337 186.608 37.606 186.381 37.7358 cv
186.155 37.873 186.042 38.1006 186.042 38.4243 cv
186.042 38.6841 186.122 38.894 186.292 39.04 cv
186.462 39.1938 186.697 39.2671 186.989 39.2671 cv
187.394 39.2671 187.717 39.1294 187.96 38.8374 cv
188.204 38.5537 188.325 38.1733 188.325 37.6953 cv
188.325 37.5337 li
187.605 37.5337 li
189.054 37.2339 mo
189.054 39.7612 li
188.325 39.7612 li
188.325 39.0889 li
188.155 39.3638 187.944 39.5586 187.702 39.6802 cv
187.458 39.8013 187.151 39.8662 186.794 39.8662 cv
186.34 39.8662 185.976 39.7446 185.708 39.4937 cv
185.442 39.2422 185.312 38.9028 185.312 38.4731 cv
185.312 37.979 185.474 37.606 185.814 37.3467 cv
186.146 37.0957 186.64 36.9663 187.305 36.9663 cv
188.325 36.9663 li
188.325 36.8936 li
188.325 36.5615 188.212 36.3022 187.993 36.1157 cv
187.775 35.9375 187.466 35.8403 187.07 35.8403 cv
186.811 35.8403 186.567 35.873 186.325 35.9375 cv
186.082 36.0024 185.855 36.0918 185.636 36.2046 cv
185.636 35.5327 li
185.895 35.436 186.155 35.3545 186.406 35.3062 cv
186.656 35.2578 186.9 35.2251 187.143 35.2251 cv
187.783 35.2251 188.26 35.395 188.577 35.7271 cv
188.892 36.0591 189.054 36.5615 189.054 37.2339 cv
f
190.552 33.6055 mo
191.282 33.6055 li
191.282 39.7612 li
190.552 39.7612 li
190.552 33.6055 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x010.eps)%%CreationDate: 26/05/15 5:12 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q0FMNcT!mC^capqZ3P,OZEn.M:A-goJWk%>J,nj.mI-+n[?"k1b-%J=.$jk0B:_-^1]`q9P%@dZA]miHo<"Ws[GH;W\,O".%PVj\b8lehgXJE"tM0+'QITGe2lXV9_;R'\#dRe:3@r&@SY:(8gQ"5-CfR!GjW\o.$S^q#IgF]cNX\O't=noVW9HI3jiCP>@>AH'!%s%2>lQ+,(-3k)"OQg9W7\^gMUoTHMMOg%Y_T(>2>7eQQ>la>;H9rbX]`Tf5[H.`@'!#E>uik=JYj/6'B"e`9ghA8<BiWJe?Hp=h-%HI*4r"GnZLh&_@T67MeMrr0"m?LRSKQ!V/SHsC&-40A3XV=P"s9CSPs.nS2jkd-3$=1_>oeHh488^HTc.f&/_=\WQTWMLI$5W4e:%Kf)Q%@@VJJ^Zr6,X<r.,Q"mEg3L&k%cKkL/_f!gHM13l#B0VAZkH\7Z!Hfk-fp"oqX_Os=aP?O5NQO=u!<D&M[),8.o3U`KVmdR/%f_3jkj^<Tk33<$`lVR!mJs1A[H-s2I<3B=@dkV=XWS;/W11_u8A8FVc(>9lUpqL97[O#KbF4&2/P@?hF#gkqL6:[S5f:@$Kn+GhC%Q!@1.g7pa#HBi]QW?a(l6!BJWK`>oPInDV<T\$5%=Yi=[$:c(r,\<"].>!Hg&@uJM%d]Bf7**/_$`M1"BJbX4?3QE_d*CJ$J!9]C%HRNP?r.>R]rsSuoD&Y\I"fG="nZStP;cUf7W_/nLbP3uDb:p/d@GifV^flJD[1&g8G$s#^f!0(nA(rCnp_R`!2V,``pkcBc"ft]P%i1#E%4t.2M::Z<Zb@ST,\'&?1?7s]N.)hEW8e8m3TAl?cEttJ[5Hu!4#sY[1[`N54I>0>j:TT1#_G>!W_[6/l[L#1g(UaT6&JF1=%Ko@V#:M_uh`DULcihYA*potUC$U:mk\Vt)prugEfa-;LH9DD*9Ub/Lo;q`[;'K]4\oT<()rkhpl55[f>Zj1<Gkqh%'p_R^Sqj\_)%>bUUqqsY8K@I%V,j!UZC9CNU1@JfPXp*,b7b#aHB0fh(?PWSHroGOKdEZJpm^,^S7/Z7)CjchBTQU5llMq2kH@3'0T,FR1FI%.R5%5/m6S-e>$_NU<K'U$ptgf"oo`dZ.j"@u#)b@\D0:aKQm>NjKtk<)TYG39.m?;p';V*T]?$9DO=,4$DT1NREip*:+A#I@i^$s!ZuN%A5[-=I85&T+dC)5._gA<druF=B=.5ljm\,M5*^"Um^`8SgK]K'Oj8=,iA0j,Ur_L?^<O4Id-B!Di2(DWS$FT-J,#@F7@F*Q'`*L_%V>no(iBR=.r_'&0SX/c[oUfjGhu#/+B3Fl9AN@7Pp+Mc-:\\;n0;#/Wq-WtOOY.D`$3*ZuPtL[-s%EA`mQ[_tZ1%1Gp+-+/r1\\7%I>V(PoQ!gWb%7oHZf%<Erg*)(r"ni=lJQ%9R?/=Aro2ZeC,0&nnf_s6&6KmrOq-mcr3FOU\L>Y3G^g2!(L`E7D>IIJYSEH&Q$%h^%Lk!M["2?!TnNX>_et%4Vb4)V+g]&(])]Sp5M/Pb<K2lN5c![Us2fa)P#Z@AT03t7cd2"HA"U<-]@C`U6O6*%bm!i6tY@\Pm<EG9g%^gDb_kO2S(VqaXB;9F/D6g.tI(Yj2t#f0CFcb1%_eh[d@[_F6F%bDsnKZ[ut_/qEDHo$Z`\*d./;^i:9Pdkh_;'c.eHHbc;6EZEn%RIFo,EXilG)s%+^+T#-+UhYqNM*,cs3c@$lC2%c0.gBcJq1lJQC![@dL;RkU;n"3!?(nbJaGb/Z.u+=YqrkY`IYHWK3N'/O>:BJ^%s"dj::"D))58*4p?H1^XEaG"%*02nqJmg/NNDcGAPapX`hd2]RcB-FK7Ysm_8tm;NBu5$$UQ=mEk[o7>Qqm**hNS!057/>e1@6*b%<P0.O=j>Dm9h$hafnAoO)l!I`ZcIE*WF7n74iYLKlu5+P!id1G#(ht/Mq27MTBH0&WBQB<c(-c^;PMe6prk-HV;d<,\t2#;ZBDL<%bqN<n[(jium1oD#U,BL2\g*gHD`dNK>Vc`$g5JfAMP)D(IQ28Um>gdu+Q:ToESj*-V==41PrVOT1I'tE/[b?ZU6%e1^belEC(?#S%!j/W.ACd)=5Or'g*Sk<=90djSe`HRtSJ1A!Md9u0K@n1K+2/qKMi9mP1=N_S1Y[=NpUui%r:E-\>dKh$)8c0p$ZEW-#'I6CN:n+&%93U<N"i@l0eOZ:@>oR3da>HJ3ZPHY\$Og*4]5J7MCcbgk:i8#S-LD78'=BmQmKBsI_M/prNnOnm?;'?$Z#$!I3Dc+A7S_*[S<),=%$d_aYEpE$t3o>$)"L,rJrG4N@JQUL]r[(I/m<*a$98Q'.#l;a7>7@;;%6'U-m(#lu$[?BO-IsYCl^W#dM,*r#l?HTGg.3Q5JX0Pt%oLTP[V@1pd4[s5K#iA=r\r,:j95*'/B3ej+?/2N(U_[?JS1BG:-c!kd1c[_=r@n=RSoU6G'KO?@bMen-dJb=Ic(LN$QH@io;r/kL%Nn<KiN_'fH,MVmCMI't(6T*GPZI$T(+.#:mMp?VN-oYErckP>XjG@Ot;O^9UM2eGh=qau_R4h4H0aEJ7Uc=2.Q<j>mH$Am!WFs\'%aqF)co%1bgc":3Z8NiKb\[O2ll+g4H]oId_opVb)+B&)>PSG8sh3CMdhn`@OgYR7P-Bh^ZRkTV<GUfcn*n+YN6<?ombn!Z_*%YJ*%EWU-<pQFQ\E^)t:HeOa/302S\\H./RI:AR?-E6?pIRXp(IPdU=:gE@(VY*nUi!dbf8[+T;>*pV`W]Ho.`.MlB'hU$&dpa$f4>574%"sD[=e!,Ns[\$b2P9X_aTJ'"gQ1J<$$IA8_19%<6Q<<PoLC1<%XL@Ng)t=Y;f#&dUFOdLc6f!@]FF6ML^!\:c'JIGa[Qo%Y$hf;4%*L,BJBu'c,YN,ZH\&7ua^7ij7'ZtMSH$I,.::rad^GEk\%7`=&O+A,c2=)phY8amRK64:JHRNk4(OY:Kf`s[9Xl<^NJ'b0`1I$!Z%1d47]=b#;U>qVsE:EFdV,oclIs(2,#r+G+*3\q9BTDE?iRn;dIBRRs/OHj(mOTAe6AJod1B<dsnB9ks+XGQrnn1XHW\CO)EZ[]^S%qqn3!M&*SjYPYE^]U]]\1W=Tgd2F^r=HE'>j&n,8"dCf+::3UFeJs"pSMqf[]5[(S0oqq$H=ZH=Wt#P.%NIJ3T2A&VnT]sJ>G][e%s..?8j3p)5SU-`P-:$JJ/TB`Fn-a6Hhq]?-=Uf_55qR)79tXWkVs:;JD3d18KXnk?ALM2:8"5j'3V'7Zdhsu?7.iD:`j@CU1FLW8%;R;6rE:dA.on?&9?"\<J[*rcshWZij4*bjQli"3T8gF01I,'>-od6j@-'$(\lhRpX"-7UdXe5;no62]>T<#D,CWVK0jUJ49:L=(N%hKfROGuh_qSc@2d[7mFR?AJ_`DH&[),^fqOPFp.X_/C-*^K[6^r]2V_2?0[6>&=;A>>f09PLl'pHSF[47\s8P,Y>NSq69i74K/=A%3,Dn:")+gcD$.\s/#8%55stn8;%,jXhFB?YW&:V](H26V-(L81L3NWOlbo?)^@ThP87&Z,%2Z,?OUI]pP>\L^n%`p8?>,oe.>.IO%YmPqR\PDU#LBVFJ@t9@7B'=q@UJZO0<8&Ge[ibeScWs6:feA$NpXa2];=AsRGnN_E/"L#FX\h1[]A'B776s:Yr2quZ+G`FtEGA]b%D;5tm4TD@eCBS8<UJ,Eo])_M:d(lB9?!3"b^,CCkqcnGs2eq/:p7U+8:Qt]IXsW<"62OZ2)SO1FAG3P(<D+qlZKLna2Dg+fOch'u%M<utlKPtK0B<TEC_V+E&-#`d;+8bQh%i"si.8.dXjSbj<X?uI%=TZ(.gf+qiWqP!VaXlA(^P"pe&uTYU,>ThL)@/O#iq,)?[`&Md%l6c?c*hC"k:@g(N#M(R[49TUIhtl%l.ZDeWZ:#d3_*TjU(Fo\T^;:H>N)jT;'=I&M=m%_c-iU-\+ZCmA^WCCs:M.pfQ%m=?i+AYF%6ESW`J4tQ3?A=>8=M8aMe`r\&rnX]]Rb=1*_rFe*7c;Tg<uH=GZ1D9,:&b'?^D]hFY_!rkO?<;FnFOCEN?;3;:1j6n)4nm^^YA*h%2V71mBVW3SI+<P..e$np!p%`7poDiB='ciU@BTKG+QEE@)ZD\+Yf?"AIFK4d:9DY'pdTj3&Su6\rqb)26C5fhI_#Gn[9GpkM50Ee%\RT,.a\+A&dp;of+JJD5c0dB0<Hg$jW^*o]^Y941%K.;6*lVpMgJ><1qYIZZcgrYl*(Q6F7dKHJ<ZTD^Auf)3pG'a_5%$KR3\Uu'%8HT1)mBo]t@*ASap5,pH-`(4,_=DNq">Q>*D0u$OJ,UOrJDE]nmJdj^O#5q1p!\2eOc5$EAXg=XJ(3cP++p++7Fj5OBj6V4q_+(U%L\h"QpeSTWq\\*>9?u1i.f[\\`JEu$e_^I5`,]J>Ip%^/%WkGM[`2#FqKK@0^HnuID=t\o3ir;Jd6s/6ND!mTXk(7b<W*C%QP`r2%:&clU[?EC+'-^`g5S-dL<#fG%J%7]i2H$J1s/L/q)pF:bYSsg;F9<q%]d%f)BtjUHhJ:6^<ZC)a*W[WAS9AZ'>3E(mntPj8?F!P4%pF<B>7_SQ*(HA;-jZ9eANW`;W4U5=MS_&blDS&dAql%s=oHE,XjuU3-<i&`+!@mM.8simSFj"L"hX$f`)AfM3.fF%Nk>,=<3as=0%AbqR(=[pgrD-_CK<$qE\im>O64Xi:6Kh8pED%]#%b@^\^]$M&f@o7NUaA_NN-Q`fu_R0<6OHR@mG$;#3Ccd'nqQ&1]A)+0OR$"<Q%(`*KI&$<@rlI>j3e_Cm5ZsnP-_)feI*VI]QVrieV3*[A*CKK@td8:Y-0LNX=g1S^tBOK)tX%kM-1;dcO<CLB!:hm7<V>p8EOVUge%$lLABPsWi-%]7^YZ<mt;Q-\>;%FufR"G*pjHf-tVoMq_jms]f:O_PR1]F+]r/J\=kklWj]D2KEgBb(7(U=C%9&*&LNrMn_V;n[5.%X7U/SDip&"r\\,[mkq/Rs-DuAmK!+]YFO5$>"p?/TM'g;WbfW9#nB:!;Co_Ef<[lb`p-_/@EcII0YEqqRgA@*7rP]l)Et;Xf,#>5%(8=lE^:D-CC;cDgDm`jA]eQ`HBo0$:W!Ko8%MUfo;r^FMLZ90Q.Cl0Gd_PTmT`<sU&cNnU#hQ`m[7Bs0\ut<q%<cl4,[7e8NDe0"%Wh=PJH%\A#;<sNbaUo7Jp@+pm^K>=J]W>bAN$LB[T=MZ+:SZln7TTQjKG:"I)r\7q]q'Od@GLdqa\M4DhW]>l>!FSTY$3E^5IY8Q%.us5jL7.jF*Srfc0Y?+_i'[W-Q#<eV=nrFZ^cS`b"s50)VqFhR.rD6@Xag:+aRE\e\3HunlT\`JT$mYkn$rSsN+J=WiZ%TSa20[a%m0LXXo$_CSoTEj?d/*bRliKB%G7'ok&]tJMjFn;r(Tj<9UY`'u]=gu*e+&b0!e07i)VmdT;6B^MJ82hdlguO>Ao_BB@Sgpn1Ht@[%NI'2(?/9\)kH"8Ukq]GE2&u2@Q"nj?%cm>H\Y!3O-+1M^"1cn`:Hg+`3eA7]-3_[O,l-,0]mTrekbOM#Ii'Th/l5!8ea$2'h0&rK%7W3bY[!EH4p4'U(*!.^T\2n^Lk\98D)MsTs,`dl&)KPeYeZ%-"rLKP(*k-I54EanjjV,8mT@Re43:N2&_]a\)`dIf"oY9Y'!N^YB%=YYEV:(='-h&92?M67/$BXlVFN99P@^&89Fk;0]<dkk6dX5(F80Ei10Z0'=pEKe@jlP4W6,a#\>K<Lopo7[r:TUIF(m%!0:48CSF%GCG^>'gjcYPZ:/8["j?Kk.Z6El)iicf*,6-\FnFPAmi'#B@_%@&6Q3bagb9W=$5%\\h<cF:qMK4Tc7;/$Q@sSTGjPc63,Q7Znid9%OJ#bf*#iOH"Ec*Cl+Xhgr>p$0STa&<RD2@f<-<20P@9BA7Sp5\qq#J8S>t'7rB!BA>d:>Rq!9k-m9Zh6]5@]jM?o6+b+N]g<Bo#b%9`5TM0R.iXkjE'H,&]I$gYGQ0p0Q^OQ]OhCFW<3]V?Bt7J>-_1"8Ud>A\(+0;,VpEWf;2bGKYt="LXe$j38+7oA=]qh5ofICp4K"%+&3QSaitn^qa!*Ujm\`9OF"$Pok-ODDDY(ip00%V5bT6nZ(>"bUXf`a"HbcFUNKCu"00%W=qN=I'$TR^.!hhf=)5RuV%?Zk_T^/<%^%YN@qt]O1[MPd%_'miicM,9*,)F:upX?6qn!_:h&ULh?mW\rg!5mRY2-BNp],FEN<iaZW\b0DsL:T>i)F>u<`_0uHC7Sr^CIEbf%I9+r,ls4!k*D]/bb&L6HXr/fc$*,O.rTSL0?pQY9TE;_CWj&p".T^9P]RBbWl#f"7'p0Sd_(*2*=)6XgHZP:N8(rbT)eG?B.pBeZ%_shF@M-!D^C^eM:)61+q"#9(e$tP.q6;RKddYSm,=K`rcGnhZn6$fouf.<d?>gY?'Q33W*c/>+k=mJQ)f?HRYo[O?86S?[UT^Y3V%<g0_:-]9!!fU_6rNN_r)D+VPh]7WrP3-<W.Xt0jp5Zd=tWf=q/IWsSXa>s`);"%eW2HsCBFu$ntZp.`bs,!QqM($48mF?QCGWM)s%.FI[5%M1+d?/-qn^a.I!\6$$uLd0*`s(du5NDI8u)\1A29jpaJC'N:deiQ?$@F>jcC>F3>Cnj]56AYqPBf92/Ld=Z`3MDIN=3q_6%"2+M^7q^DI#C&VUn6RD5Rs!,Xm#g[hO`eCb&p5G\R^V.Pq)4n'8!LYBjd]7LQn+*"&Y4^J:@%q^2,7qXhmGDg<a)a]C>T_O5,?=k%lT`#SC4H0G]^f.k#cr-]h5KGJnI8:<%@U*S4\tKf.TN!7PKYj%KaUiFmQ39#Q+`o#d(H=64lJq78`o`0LDU$/KH7urQF-T-]QB:&%L*MVh&j_f8,Ga`6Mp#DqM+Lg7F"tJ`=0$ipklM5aT8=`U&60p-GmT"Wd-b9IZo]Hsa?CZ9pf=S00l#N\n^[#;]h'F8BH%#bQD0De%[sm<+PMhEGOrBIRj/j!K41&19pT4#mZ$8m'2[9P\dG,S7aEa)m@_#TmJ[+!U@;jK?M`"J9#^'i[Ikd:uY$SG4G3N[cC$VOli\s;1%s0\l<%t;(HaFc?ml_9_!rjI#7GGibF.`L;nmABb[=kYhk5#MdRmRCq;4*Qu]Vj95*f2E'tGBR`sUCN>kIV2PO5HEtHjeJ;SC.10]%V!Q+g4@-0K$4FVUY0oH7iejA^f#c+4R^Z8>\21keelQ2#/b</2Wr/j'qckWsd[e\G`bTJ&ID!=C@!=Q3h=^)-\TOfUPr]G";Xpo;%HVrY@D7muK3O?i3W&)=K%6-frfBHtJjf>;me;CYCV3]snkL_6lb=\bqkGk+WW.-^'$b^p.S$jFt9j9fFZJ,,BMjZJn[H/^j8>NM&%S+Xe@X[_!4Dfq-*2tl6>(W\!+Jt#Qb?NnR<4B1aVN-]19/8agNAiWdGfrh`H81Qp60<\3Vdu^T9[m^nq>5+oc\55:S69XB1X5Vm2%4)ISm?%gg?_TEMml/SU;j@Bqu+'SW0qUl0BqU0ZemTkPi/\E!7PnbSN.J/)@\sC7f\uXNKgh/=hor6X4ge=ahKXC@BP*q_fSN2$>%885gEBVi#A[2sqLR%CS6IbV\0[G(qcI$+FDKJ\hZ:6jS7l'(tk=\r>!Sa"^6.+5[)6gZ:\]pG:F2e=(n/q>5A0mMte:$]JQGYr8L%p$1hd-:<)?2s9L*mD@Xm&>V"i?:u7eNlnctA*<CIQ,rki5LS(prNc9k%7L'"EcE(VeBInUT-Hl?BcgOB<>_IdeYR.;dSoa/]D4Ek%%RSm?gUrf(O=&D+<rZ9hbL^ohg5<Ri/!Xu93"Y=Rq;%Q$qbg1@O@nWTa"fr<3n`Ck@ljSA4=Z"-X[kOs03>t\GGO#!D;Mqu+_>u$%e!j\#@VreaRJ./ZX^c5.JKc[/I$Qodn(+=&F%&QoMg\-?CFq;>'59^I[f(&+]YCM#+>p%@cYE8)$u&R">(!]*8-')e]D'"MrMO^a%(5VU1D,(O/H;H\)V%BHs/(47b_A$AaD!SoTmJ-Zu@6P7eeQh]/'^>G60;a.X;T-H!mRUCamIak_LMH[k]Y2#kN3p8_'oMYKH"X-I%m!`>H:Sd<YK46O_UWq6Ye$$g45bsGgT6ibt":ITok>ndP6]aK6dUTbk&rcJX:]'Ir[a[R<c[.18P=+*Y8Y7Z46BL&18u;C9INVPS%G\&A4rO>`,UoWAU.9J=-Q%#=LB86%Y?18;lKtG7F,!i6QD9hTr>C%^2/?\+Hl#NDmH2dE+8C,HUcPM+TUZ5F0h:Cos6e^9uo!L:X%L44[tc/6Zj?:DBZl!A8)&8?kAKsle@BlCt)CSBoY]!Sn-APf1,o"g1gWW'0XerF)C;KZTZE8X/GK:9RGg-i<2^TF&3Xl[XmI`ejD%ofoL&L33)i`lHr8<pf"#R^ZJ^g$j8'qX3J3;eqX_pH?4g-%B3S4oIY'lR1mFe,5kbMmFRF6QaN)("2I5T:5"kC0:&56[/:Rnipu?%9\guBU!M!4^"%nbVj=W5p(IAsU[g7^TDCNZ9]qYn]=6.r&!r_h9)-lePM^.A:C5(#l'&*UfA2OtXkh[douet9qKqYbp;+IJWiuA0%:Z\QUs3oTuo;9F1JEL"Q--+1;G^>p0c)/@M4qq'WpsVEe]qh:ERF&GCoM4/QThdnVPl._XVi5+mTB4=qYd^=:^Xi&(Vu)@[Gn^&H%Xnd9l(s]D>eEl&0@d)9=mc_%oqK-)tRZbQKQ:iY_$`bFhlap&/A'o#^lMR+>l-dPSmM:.QaK58/jmL+2c=/Ei3>o/]1L#l$*;"@=%DYlhL$<&`hAlr/</>*M0G@09l1N@/1Ib#a@AkHtGB>0)Lb.`931Z(D5plWCuEb`.0<ksc3:j)I?HK/fs82Ugn=#nGcHF#E(b\`lQ%0P_f/716@\Xl9oLs.Y\tR$n>V.=5S_k?o3Ro7K(AVE9=upUZ9$3a:Kd>l`\=<Pn"GMFUg-8=.nmpKo(7NTo]NG2lo9q]%2VgUg:X%@"SC!Th)$Nn)O!^Uhm]:_0cW*.jD*Q8@A%,!NC4358TD^B4n,&ddH`tm7ab]WfOuch_SX6%apo&#O0*B-rOIAL(]0(H/iH'i3lYY%0c9'`:E`8I+2_;D<UOTC]C0SeR6-'G`OWlV0[fVn-3u&gM\3=OF.j!h*_@bXoLCMrI9Nrto]-tWI;lV%GL`n\R^Cr#cW>0q4_+?c%WH<2*C7(*Oq?N3GVD%Mek(h`T&<YrSpLX?I)sm\!?iK:$jT96Yhe"p;^R2-!Y:fF-c1ZPXJkbo0]F(%;fj7d!$h5GEY\EROr#mn5%g,o$t:g91t@TK$;T0U2(.Et&BO'2qmEM+<TS/Q(p7[mHK7*:>6b@a%S`O,M^k+,YZOOo=n]nfd6`9+f#D`K(MT#/fVSBUp_3o$Dm%^FrFXMp.;r"W$qo0CA)i2#0D!]H0JhVnEm7;BjAAHN'<7d61Z6k-h'K*jP5=.LFRha.N81B6l8TnUlt,[:i7Uha38&Ugg]lHjoAV%F-sWNm_NVHI>afd6c\pV[/Y(l*j5gRs&qSm*QTc9$GD@H@.Ie+:O*MU35WD<inF@9-#;]&4.>Vppm_T@k\e>$iuS$4/1#dYmuPO@%YNf9KWe]8UT]`<8m94Y^hC(PRF[QE84D-#/&`$TaHpW)P<-$Y26HsObR=6jH3K`0IWP)U-N_3/c#EMIib6r.?X`%1M]eN40e?,d0%UM*,,^[)ra,2HlTU_K0T[&S;<R:X(h-gW.2jf11]K5`;b,LG?Y6Ec,h=dTB`DMfUn[+prt1NU0\,VXm'LkRQQ$=up)UU@JfaGqdm%,TmfFA(_+0NPi[:jrJZ(r?f9W%N9I8U,_MLX%_@I7/#]K]R2.]j2X;u$X7K3'+E6Ho;.)d%X#>r5G1)`&A):-.X4gZ:CE&q:4B`A%$'[_[H96\"D=5&[K,P&Z%*uDZ>446$kCl?Ha\mVT<-LZG>Tt2gI"Gr+e*;ZK"JHm3CF_RH$f9*U0@DQMq_tU#GE=&]?4YV"QstD<%eK(ibp7%l]'jY^%,DbW%m>$dFElP$a+\@Vu:nkg43k+Eaoq+D-oD/8'MeJa?dsoVULQ;'Mbf/T6i6LT=35Qe?A-@)4S<RQ0bR)g0%@fX-#T#;&XYlT=0E#a5m9T3JU7N6ngD9kZSZdUjQm;;]bOD)UfnW%gKR0oO>kct'17k3rF-?rM`[\bB0.e>UV1GL6!eE9&#&ls&U%\?dJ'*6.)8&2f<OP/!QV*KrRS?.UW_l=B<]"M9E#K9a:R64aNd&q>cT:.U$R8>P;:`9UV;7gSc?FpAP)hop$g`+m$T@d*[F-RsKr%(,RtGMjccLIE!E[O58EH&C-#KHRSE\a9[VE!SqM;a#ibnirh4Bjak=%m8WWLjW8D(L6rL,P;GF9^)pP[4SI2*i[f\?74Wo%@2+7,%I@g6uZuBo-V?aH_j!b,b(SB33q=9%/E'`tS7f*h_JN[-%aed&G:Af?+s.#V(pd"[?e;5o\Dh&)4/n-Oc@#0RF"-I+)Zb/Y1SZtDc%hBBW%+6%j81f&3B,XMQ14#Ln,@@r<cq3m#(T%K6aYC3VS*Z?3l"D,K>2E+C[W93!X>n':+kJL0UN@fGUa(pu@YH8c]i#j:t*.07]%2FrqjrB@8C6JUa>*uBZMI;B4o@KRK(.+[Q["YcPZp+;Cg7L\\jWk]9^n@I'&5BQpmkY-UK`!Ib#G,5_Z.igNS@dn:.=#ucgD?cZA%AXFW?[k>q9_%JK<%+=Zdi&?<62/OMDBo-q*X`VoK;'&'L\KnWpr0D8s#,SsZ0/V5rW;s@Ze,&P@^p=E;1$7.2VB<pH"l?bD/lIkm%q6IM42(.hK^fEbSJoAXflF8>E246E9DeI'+h!1AMrt=C+erG"8!,PR'<Wpr;oS1o<3+ubP;YVNf]0"j5[nrh9=5jN#5)jZ-GDleT%?j$["TcS"QS2"%o3#%bK%rM,/JU,iP6bSC[.i"FHYWVCI2[a/SCZriJX.h?/?3RWWFa.s@33P_X8nQ.%^/.l0W@_R!-A7d1bM83u%Xo#ZUVpW)J98N\X40D$T`b^,8ka0-Bgs+q?)U0(L#@J4oBU;u!NUA6(>WT#WM]DW@D\LK2V"_QrYu0IJCU?KW39.3U&i^Kh6-K(L%G9&%M3-)YPk*nZ#F_"oX86@n]p/9O404u(Fb]rtnj&kGLJ/rp]'eY*Y;F9T8Tf4%ZZ5-i<T1!J7fLcoiXRpIs)V_<:kdm;l?[Ibm%BtUtpEA$YG([O*<[\cod!^cE:p0pF03&m%)+FI#&G,c*5rDVuYW*,\+Md55#FNOKsU&nI`qo>G4+gc10D[iCV-$nVti`j=Ce61]F%JY?\'2qO8`mjTZg/I[oL37dR[maO:[NY7J0n)=6B5(*[LQ:R'T%1u@B/W=>]#b7:]I?YHkE5qV?&PA-:FQ`P==i6$`W+"=k$YeZO%dMb=DY7tL"0Ui'I?UCmRl?pg(=F;&WE9kUu[HC:QQ\_^OnHHicF;$L>]lW90U\eXO:RCcJkifa;27a$mD8rh_6[\Ca&pc;H1s3^Z%WJ1+)^sB&t4Gampkp8a:P_e86jY]]@9<F:Ykqc"e9K:-]:"#:(:%]l]mqA5^CL4Th<rm9[2oP204&@95gD5>L?G23%G(ZG#Bm"%T%i,A`a>f`;;ilPVE"5^b>NoTA&:n_skgW7XK*f5\AP2][Z+*-Bl*OsmrD<aX9^mTm<p.;u'pH>q4r:N_o;-D#?:RF.DMOQurG%Y1e%*B>ER!]bAM)0C`-A9-o1OEr\GW4![1LFtW?%^Q<dO[DXZ>$(tLRot]@6Pl:Za0GlhcCkV6l=SBHAIFN]6Pl:ZkFC?_D@Tro"s)$<%)_Zt!3eIq8fHbM$r$ok$+$+Y[EqgWcIT%S27j\h2YY:_=\alC2ZoD\+cN?Kbd@4E(6q*1O[=9[B>f0Y];rqoXVPinpPCFm`kkBQ3%ngVf[]e=D1n*F$kO\`\&;ucQ7b,*&71q^4bO2(td1Y[/FO%oj'CODM(pSW0l)0lSCLZP/C`0>n^Q(cnZXM=BT]6PW&@8%b:;V&<4%1()JJ8V83g;+-*bbrHmNVp#_j)_A3>s1[clUOH`#^>+XY)'jMY88-B&+6eas2D,HR'dOo'oQFellt!SUSWKTm]+)(],W$lg\NN]d%b0<`*7elmK0ID/tLbK90`0_L/68PuXc=u"h>m)g$s-h35ni]Ohj6>VsH2))lE-K$rJK$#.LuM6&VNn,*J(A%Mi/I;Wf\@O8'sX&F%,B2du%3:A>q.[6b@1mh^E^K"EoH_+([qee]QnJgueEIkpO7-_C72dA2mkm0+A_Ig)$;XBcMV&"Qj#@AV8KZDi,]*oL<j<:+#4-m_%@M_=Q`uDi'E!KnI?\_-*6[d-$J.7rWPfPkunUM'@ObogU]./]R##-r62j/qt-c!"N1smI,2WuQB!?C]BcfB"^=1hb.G!iTKiqfrU%D?<:U@h/2t)]tV&kFP'r!6"'M!#f1.-Q,-TK#Y7'DgZb<PJ-]rDdYNfX;cAh(CFW5HKYIhdkL7&d>+KQ4Zu3-S3LXsE">*)EG%CB%@inY)iW^:;p_boB$_(4PZXZgHCs\VEJBn`8)E?#*d=@%Tr2\mPiA4i$<O"L,1c%8Ca2dp&8KNtB'V-<.d5p]`_a-;"h-R$C+3G\[%_mW6P`;eN^NVFWG/0:EmL3J$*G2N:0bT+f$7KiL^d*8\Q7oTI[8dpl9S\n;BBL>4!+uASm$1V_;hJ3g&hM=k&59f^,*u^7JOg1"(%bl3D1)6\dW%q[.%O\oal1UD(1(GR*hqifYu"<chSO>==eqDItl9$laR,;P*8BkV!HA8ns1rmiF4R#'gn^7=qrbq>BZk8eRt\!/if%fp@K*FjZDccLSfE4Obcl=ZhO-h7?j[*`Ep0#=0LRmnT.8ZPG5MYu4*JOA:HtL8M)uO52YPmL!HR":<'>Z1-riDbsn^?JX8sL:%P2%f?Fl]B#D2/'tmg)f'Yh7bW)Ssi[j=:1'fop\^%remo3CZFX7nu#;89"Qk).RH$uIK_hG6>9f*q%Z&G023]J36AtHu/q/C5CKdS*_%jQr"jI(1=U;Ferd$dKNXF?\JfD)mH#37mI84]N^r5$[Gq8B/f-$g<pA[Db`#_g,$kGB/JY?IiP1Cu]0ZUNqd035en!_a9XpCtq19%>k;=1@dT!lPjtRSEP$_>.`r2KoP]g..3"hn=WZ130)2k27-'18L,4rc0&4V]3c?))/5l,\0Y&eu+?&SHBCrhPI=mXX@fnb9jtOFT%SO%TuTGj3@1u]Ej5XZ389knJ7D4:sNn[rl&G+@7F!,oM(Ojehp[U=)?,$(5m"&Qji:[GDL$@I?@nC.^bCa&XGi1Y=Cqi1dh5'q7)%,A%^WqdW`qHKLVl#NUf^gIm7j^XrsRdUPWd/KC%<>+'[H9HtQ$,IK<")Ak.F/gL%81)[&%hil,P74=A@8B#t]8S"V@SFJC5&W/dt%2=)1D_>.<eIIh7#L'?(m"1K.nLZ(k@0YE7&CW51J4&.81O;474.U6Z%9JdKET*$0Ji]_*,>VO2FSI-0S?9)UI>Tu('j.sQbm>)T6%'e\2p'QU6mUD?pc3t]3bgE>H^)&YWA/oY"T>HpbqA$"?+YZN8qL$]3=SC.h]`X5M!*:k.)*57^qG]A;1Yf/V0D47S.L7!bJDU]:o%I,dIfe%4p.l[.8IW+#nnKAIKT*5%&[o`;TGF7\I&Vf>^^/l#Jt8nE?]ql+tJH!8qIp>u_DM_4Od>\@BU.s8:A]>hg=+eO$1'_9oZ%]S,4Um22U?_]OMB0dglt<^bftHKm]lju2PWlDZ_:kY65)HTO5#_p8B^rF7RqSn`s*]A5kcfQF+7eZ:_qI*$7Bq="eS]MuKUL@ccI%_es,+(6JC]1L"/M\k)eADKs^=H`Nj-!(QG;Ru^0bP;An'Qe'd&_D:J:l03-Hk92\"me/gon*DPS_le-%&VSZEO70=H;%:^QX$u+_%rjiD+=usCT&a!PO#1#-V[HB6>^\U>)L+>Ve^+hWT%I!cKRVT/NC(H*IoahMSG<D]ZRHZgj!aJT8i0Jj2IWHEMQJ/dOgG\3!s%CVN%D=XU2XlqneM:d)1YmtaiU*`b3=FE[Q'q6K;EUEr'>Rc+F>`e\QD<3$]Opa%$F<,YBU$H^o'Y6_R\G\,#(cRJ"*6cKNhaY7H/dN.'%9off@WZ2G[C]o0RrY>\N2;kWg.$=_F?Q=5FAHYT=aRL,-AZ%HE)BuoK<Qou\9K$/fL&TVUn[%J3Ep<Gg9Gop]/h#Z>gr2:aCq?9E%\l^=U%[Ba)^0WhACq;<;3SA5[Z(fgSZg!&g*s%NeAi?4#8RT)NhQ];%Cq?9E\f_G<?8c*9]K%_:Cq?9E3d9t6@bGkI1%aPT3P0,U%QVA9\9?6'HPKKa1l<P%1SnL#fn>b]JZg!'48dP&_-CZWdrrPtS*\3^4.$lR?;]6sO/dPEc877(Vl!ggbNgWW)#DEdT.?6joKL9c2%7Q+P"NfB5s(R.Q_=5P?m9c'$e(OT0<38&C>!;^b+`m(@of]''"K]S/OSkU$^4"'q2P)Z#,(R.QOi*OeCZKZse.,p3R&[U`?juU%p%n`H+1m"h'Y'>F$$C,T?oKD]B9&!]lP,q3:)(m0sGSH&kq\Gk0>HZ[_e=jl0"CF\B+@KFLj]AJ5F]?'t;pXKFo(R)S:0(usb"7N:K%S$U[MRe,s"*L0F>?F44iJ"f]V<GpXrKjdPnI/Z*,e\t8Om(\-14B$J)T*BTA^/N<$L^N$30cWbE?D?JP5q:>F,MJ=T]=q+P3b,XI%G/&P,;4K>m0\>*6lfA#$*=VqTn)r?Eq[k'V\VhK?)!dVPGJ$=LF;I#5.I<M8iV"X[HHi#LP^q\MmY2+]"^H+-pnin0D$iX9F6D2u%aG]KaMarE'\Vkee>l.pqaIKha.AslQA`O;V#;Iul&i#sFp;&`cn<kOhj#.[m:8A9RGrW`KCQ_4I>#LJ9M_dM>#4+Y&(67@[ddV.c%ebQgC"4sl9/F8Bri(g@!R!AEp7)l+er#%qJBPR0/gK<c)4/ZHbq9+R#@KUe+&$[&\JAp6#*,@JI!/n1Y4*lB:d<lVLHlVj?8QWq0%E5p2&,uBuN$eL\!iIl-D)X<p48R++:glj_F`7f;4V?q9]_Kg3#VZJ'@!<4Yo^G8R(#uDR2R<`_>#i3%8&X/L>6o)Q3i/t'o`Vp`<%k2MAL2Ln$hB`a\Orc=,&c;f[kaoK3eUU)/!\A8^tS]4bW*d!%,lbALIq%u&Q+o73BKJW%u\HlaZVZbB4jJ&/h^,p`s*:GR$k#/ei%HP.Q%)2:ms=CSu4*JRXZ)2>jEmRGO+*9Mu;L*_3a:?7-k\n2P'a5&Ge0`6[;+Yt31bU3b-.<#,mfQY6h(cUOc0pdp5.5-&c%XGr4%^&9>VV!nE#r7M`,2r"krFV?R9p,[MH;d;KZn3)f$e!KqiZ,G@ODuVBh,Mp-Mqj-m<bf?IbjJ;sCbkQOf#b1p:W'jlM@niR8D:uD/%B&rl5H<jk,*l[+0gK3R)qhF(p]K\24?sd9B@<aS-&lW0PcC5F>'^AB3:1A6^0O1.Z^E.3ijX(,lO66(S/FLpJ#V=9"%$+V=3S'./%FBknmj\=MeVPkc;k>%tH-!5oFEP35RM2C:oLV&9Aa!HmJW?E;"Yl"2&RIU%)3NU/Gh^4]MH5jG)j8*9UF'NX=5FO)"S?(Dd>kdI;%PW,9Uf0Uf'\q#u8pAkZFEUDM8&LnB@,k[cqKLAPm\jmM:_JV=iYq878E*PWOGh_&a."9<mI!5P$3*k9'05`A4?Ym)UQ43PsF%UNN%DB?r#ASuRh8.?(9m"ud(^3e;tNjm;%Un2tDme#&sW>MZ+hSZd*\A.^u_[1T[iG!P-T9iP<'WG&t(;hp-N9M5OCuJ6]]m:@#*l8R#%Voij6*9kc@h5(W2dJV9QCjW@RpTT"s(*ZZ*:A++(\F,kIgCa-_X1g.*L&%kJ7S%:J6KF,I'n>?ffqI[dpgF%W"K=,HerGYA@JOlg%&P.+X%*s1g?Zc$XqCVoM[HgDdoHQNj+f5&g>kpOm$:e8L?'`1;3eL4ph/=hJo4N%fl`3N9emD?-8225Z08lmA)"iDhX0#]bRn7;d%XleNKi%EUaR*J%:oLV"[/EXrD@&gs!>n&:'h)6/2(:0"ae>Bqc8O2t[p%aM5DQO6nW=ZSC9fT[0DJE*opq>b)5"o<K2r<,c^apqA%lS3TM%cGh3J.62^ZdN<!XbrU52IMSX*-lQiM+_.Wp@Jj;\r4*lbF)L$&Cn6cCNu"5(?]LLW-qiH,R$\p7i3n]Lg=2CRXgkSI-Ra(%Ydrst=/E03b\Zt[YkMTX(_4V;$e<Nihu.Z/112V+d.B7b_b;2cr)D[)rlFW7Tam"hO,oPQZ"3f4,*D!.1PfLOCpmgn6CWeIQr.KJ%6'>K33@TupBuId%b3lL'a>)''$-nY`jl(j.@<$`i\;Tj_L'e&_b5H>Z@8@s8``0>6^/Gh3Xj5kZ94K?4h*dfS2Y`4::Fb9F^Fc[6%K6F7oG6[3=a3A/#;`n8<c8c-gfkjS6UW2fC4[b!BerPq!-q6^XURs=U9',]J.?[]&O])8c?[>.,$+J,H!K4\DGT^9S,8Ge&heYDi%,Q$%B`r\.IQY..q%9U.\Nai/l/r+3&U%T&?Z+b>=d)kWN2sL_CAV;VM\2f)2;)r_6?p>+:3Ii/hI-<,sLm@.Jn`3eTJ8oW1#N!6;%#%FMMo`B>)`QeODRfaLT:2eo=^ps:NZBasd!9<2A`g@u@A-']p!?A??(7bW=9r[AqQ2a`G\jt/3Gjl5Kau<.[#@q\j]9I6\8JIB!%P`KRH]mofT52Uc[s3RTi+nm3Wpenh7U2Zl7b3(u^m@UqRcXXrnYtOlo4f,Z91*V*Y6I"GpTn^22Dn*-I7_RDL<)NV'qMfk\Pj_qn%kfo"fZCYR`lPJ6]q=42.m8)k\W*&fj%6PSE,5:q&hs*-gIcVEW&-4eJ,MhZ%jKS5[rHu)A9jlFhd&hblA9&-o>;87(CUe`iU2T]D%qu032YMXSEbII<C7;(Eg//,PF07(B^]H+#)n+DU.?THuVI\-)VQSB.%aWoU,`tS3!$sf)^2U&j`d6/A5Pr>=XGBU#oN&Z<gHi9\@%?//`4KC8DjIimS#3U`ZNqMfS=hp<]'pccE37NdK'Fa)o(eI_KO%G$i/\CWAp4bZA`a1p4ZH;fB>PE@]A]mbC2o\A^Jfe:37c(KF^%U2T]4c57K!?GC/tE)9ThAC<Q-XdiMM6h%4,6]_2-Hi9\pJAD'W7_%&'!6Xl*hB2`'^M#"tmc04RY@$q(IM$@C_rX&2U2KWKH>EZW%qF0<,QUhWC%)_Q,)_rp\@Th:AXaY9_fV!Ti`q.41hWl!@5/-RUoo$Q7Dn,]>7NF\lqtNXof?XiDJ';8=B$0W;q?7&OL,r0Zf"HO[%'5DQjo`X^UMn[_[_!Eq-148/bI_s@KA)6H0e>Z.ehs9Gu8+`orNIDu,0[ZuCqtS0,L1e!lNP"Ar\^rJ[SBWtAYam7Rhs2*Am.Bi:%oo"iGH10f4rEd73oJ&P]$F!tah<Pk?D5TINa1p4ZHJ7d/Q)!4%(W<SG4!BBhf.Z:!Em/n/@dP3Vqd.$$a3\n.T8R:)Hi;`[%D:4e%3,O,GHi9ZP@M=A@].rdIMdEY#3&]@$IU9V`_9%gf(uN#Ud>JA7:'ZZ)Y@$q(Ie;EenaH-l8.&+JV/,).T9YQK0Fi<#`e!:A?H,"D%FE?W?mmKTB(;>OfCqT5O-SZ``d3h_S-Tm-k\^;17/p#\_Wd1c_Hc`WSA#/H_c#>c?fJ==,lukE^pEKiRAO!SEIlnreDa$m!"nS]k%1Imp])/6gQb.c]@27<%\?NuNJ*pm=$Mt8H+$Zl.4]X7QbS=BNWaW%478l^R`0AA;6g.uGVkiDV7s8K[E2t`.'Af[.T1'a4B8jD+Y%?Lha$QWr#3,NJX\U3<Vf?d72OcWoWK[,R^WMmJ%(qK''LIab<6br<D0c0oae]4i7_Y)g'SB%6Vs,Q7LgDf=UtA,9MI4k*M(f94A'%c-)%:X&N]qBfi0(IpXe0X)m#n3Id-Wb.lj-V&a(>XODI"k;uu8)TGEoqT4!LlEBr[DCXS`dRJEA3hmbM;bl'$T5:G&d)*ugm-3G.%?Vbk0g>1_oSU:7a7Q#JJG5DI3PPf]gdu1d(_u1]i&U$E\HaB9'3g5G;l,S0_Y')jSFa()Ne*LV=?Y1&?rF`]=9iWp7FPfY":&QWP%[:A!qG17ctM5abUiZ]u!e>c>gg@@;kD;Xi6VO\KIA<k,tWN?m&[fj)S`/.25?2,l*Q"r>>qTQh:cIn1s>c:D7B7&tAgY$IeX_^d_%SsHOgeL+a/F*"7!Fn:\ckB;j7/&8^lG/2N62!<ts:D8p0DkFJi%T=CrWn^\AYa[_a^4'B<?/=l,2e_Vn,D/S"bB-XsWS_m?bXotN%k&E&kF3g7!BD'K=o1bf(Z")^Kfn?![,0B]cKsTBcT,Yu7-WmYN%f@kgSCbp:E_/9s!:6kq<*W2uPim8bp>k>GO68pb+nT/.Ht;t$%mXlhU_;Wh3qd;j?n7:,*#?gR_]C7F\ObH:eq/=J13*m<B0'?T4b/_]bK6OH_50/i_%HZE6D$`qRN4cc#<f,WsQK]),]5sqo4+Kbb%SmA9rZEf\u=i$oSA]DO7]bO'2IhnG53^(]K.V'bdr&g1-a6ou:+'&5aUX2pr(Y,VqOB9B&/BhW?=QeN.OZiar"aQ(N]fjIK/8F$>%XgQm3_XG?s;*N)\XD(=pD/>fhIM#A4721/>h)DMAY\2YJ_=l\qe.;7Nia@bhNR^A`Ed$iHn6mBFEu2CL2-L)dakna8Q(Jl\&!VdW%S%@'%(Fg5@n<;UP_?.+AYD:<h32h?=B>1&*N",jsKIkJgQ)Uf!ndX6$^.?$#n'kW"2n-rich\^YVU!h$4TOuSA!IcarXd99,ri),%4#6H$2+J\gm+a`%<gbCQYV,aQ-n[B\JDbIkH17ss6fh'eg[_@^?']IphM[(CB&'L&Z^(4:ebA4]AU1tbrTQu/h7<@#k-=Pgf!@K3%*3P2tft5QSKd_.*dcLsp_X0#(;M"8m]1U5]m91tOH8me%h:HP>pcI<FfO!IHd;fINd^7>+nG3Br5&KO6ZQZ^;lJkHO^3#o1g<VE/%3d<K4Z(!C<R>W2)l+_+\NXf?mY85c\#F%DN>W89JFG/aoSm_&9:1^a(WRG#(qpKkh>C-2E[Y]aWRjN#j=%JPj$FBu"g^IHC`h0;)%TITqWU&nSCHh@Er\<='I6[UoLE0DFc-LX'.0YXc\oduOWgdojGft((#6UJ-)K7eI)oD1$l9?e8Sl%,/TBRS%HKlifH]X^`N"jX!j%5ZqslAL7<J!4dN.V`&hMVc;GYDb3di7!>F#M09@LZTB+a:A^'<8H3.kkHPmAN&Y.;k]ba]k^FSjLO$:s8/GSrF#BiIG0U6C+RZ3N%Y<,htU\iDfJd2N$YnlW@iQ]>6cU]W-hq>!*\'-aZjAX5oq3_.d=?g+d/RL[.V,jmCB;q_7;mZ8k4LL>N2t<Z3>!BON9eCHJbGjUQ%b8cDY'c1=;IfV^@Z%RjuSJP+K."AksiYq5Bg+HB38tXk_n*J6ke_JhpmUGS0Hu\W3f[$,gbYQ'J.;)mos5kq<p*8Bsp9,f>Zn[XX%lK-\/i4JgADXDUbbKnADe%(\:ou#QR;4B$6rma.VSl[lD3*2?El"1Mf[W+6#>R.,#G-^5#jM]%8X8%%M4h[j2MQbCr[qB&h_'2B+%\Cgn=kF-n?LJifK_/o6B"*Uc`;%q"($DgR&R'@p9>AWFt::D;Yl#KYQ?\VrG_>I[OL"Y],Jm3MI?JJk6pinE'c<`Pch]'hl(ej*D%=*'p30o4rkUl9.s4ti5u,$4D5([qt*JBe$GG#1[(=h)&6>3Y;%_mAa\;QZPjS=fg]g-)R]gY]PXY.44+n!8k@3R;;9>-SQppT-kT%j]k:0c$bT%duiDibob7"Xjpd#'!qBiS+9:eLMAe>nh<f41d&LFOkWRh2a'pR\(3HM7GD)C?Kod0&Z<KCC34H5H9J\6h*+4aHAGM^%"*h&u603B`>$fhc9tQd":9@VK:Pj1.U##e2gALVoDbF2\$]1>Bbijg%m(T/']cV$oO/$<iC=)iZ#9/$OkMAY-oO=><`#e7iCRD=1%O0.0,F*f)M*4NI,BR!aoog<48MsoJDs1XD24#rtYTZjQNkXj\WO1)Q.%:j9[[2q]7K;UQ5'd):e';'dF:<P%dCn0W#7f2Y%N6UWr%RL:/f&N,WBjl]+O*89O=.i(+M`fr3^qpGDs0RAFJk'5gC:Zg<P#^N\:cU\C:h/89pbACrTp\*p_>hiN2pN+N[eN'#[oc@Q$p2[hE%qkCc)l9)ePk`+2lRGq$(oOL&<l-89rNg94A4frXgm?t:qiGj?nGO=RAF#fB.B=,sL1:O[$j,8sYLO!IQYuhkVST%?/,EpgFDJ?)!%pQ<(t]'cZMm*6uc54r?5n"(Pc.[@P<l)m)?_+rGlqB4U?/>.ck^s#p;o<^P2k*[+V,JG8(#CuW(V[)3TJ:/<r:3;QMR:RTc]iL#Y%bka3laj7XjH$aE.o.6ID6]cVbLk4D],!EBp(djpZ]aD#\pF)>sH;D<-]fV")j`asI:Y(C4jXKTjlaH?16X(ns5=B!VUkbQi%'O%<%adG,]2c#jDU`Jtgo6!$)a%,V^aM'>0>kIc#`rHb:_,c70o""2t[#HlV;8Y(!3=<U#E;98Ac7?B\c.0k`,9)SsYmhf@Gq]r]a5lF[%qFYZH/BH*[(nU?:m;-_,+LeCYB#*2,S\n7&]K4dsXqmq9L@gPZQhUmfgCg/ua.9C0e88If1*5RGg6cao$Mi#Yk!Lk5c?5mVX3\$L%n(O*oQAt<b*Q[LhRL:%24lZpio]7An4r=Ao4cs&bY#p[>aM>%Df+)DM&&k*1NDInNl8NE:YqNA.H5m`YXGdR%?\]Hf7!aGnYY`Qf%:QF>q,7UeDHDod[@WOp/fGH@ZeD(<I$Q<>]kcl:cf8,&06H4V3f8,';mN9%UpQ'U/T9:"WMe<BOoSujCGOsRgV1r#G/O*>2n`O.l%q;]dG7duFXh.-tIHRGeHQerQ2W0FM-?qIKegUB<?2p'F=ld`i<Fi)Q"+Qk)6SogK3e-O0H`KfXH5EQ%QY8h\^3oV-),&rL5L-tE"%`W@MDM8B#28>4+ucju)ONZ@a/rTTI)@m`gMcG[VJq8k39L<Nu!V\9#;$oVMiF;P]6K-<+e4'I$5g$Y(X[^6u/,q7SI5A'+a-"s/B%pV@=\kB$6KHKor&Y*%[i!ghL(`\mEsnPledDhL-O4BLh`50V&NZu0C,*0-U8Hhd6:lhcUnF55rab-m9>m:'n&/O&5J0)n&QS0a;9%jl[>*>?dup3$APG:YP#]INi^@o(-L(Z(,T/rkoZ0j;Ym;.X+f1O3UM#b',1'^%30Prh5?"h+m[]r0&-S6qI<nN[NYCp>mC`Ggbu(%Qd%bKn]iW15MP_(gIGH-)lDZkf`*<\Sod'^+o+ViSod%`i$[+Gbd$VR/c#*9nNHA`#F2oF+89RZf5_-K=R_-0g_O8oZkpEfo_&44%)Z;`2SXn6J`[u%tQ`?'Ur&-(",*m?Li0mkJV/Yt)M78k7dck]1kK!\oP4jP'Gs2*AI*gP.ARB*O.8+O5I^uf69@'.mD"`0*L4a.3%<nS!Mh7Mhmc7'$bL]fg`S)<Fiht$B/ZLF,<1$r@ThKaF6:_$l4ZI6ni+tNV^>/H96HkU2$Dh<XZ-FXr)QhW+L?S>H9=MP$Ep[5E-%DtchJ1F/:Lg!F%%3qM/!j,E61`oSof3e\)^]pBbao7"5A[B_*iS\C<&]ba0"a8G8Ifn3OtdWTSB^K2ps=q8T%;M[.u=fHQ4B:X$2%Y'%%J3Am>qj;ohJjY1+I'pt(h:VA_]d'B/J8Bn&O@P>89LU*T*4a1&u^f^Y>epd$_>UK6KR9C)3!b[(qrG-kRZ(SCFiaKZ<fA-nT%d&+`6)9;qCkcN$=5JM0qZ=*D]1\KqZ-O4b+Gjfou:-kXACn?#0-7D*a-jOZ<7q$El8+eC/>'^,ogr]4+)h]>l!$VUI19VBXd&VhS%!T=8K0)+jq#MLhN7g,\TlmrTAK<UXu-]6tUc(Lt2#7PCbYuo79XcjWb#-.L^e/A->4-!-+9-nOn+Gb;?/ji*PjOg%Olc?56NW_\5%b0`&i]I9*jLq"'P:ScFt=?$SK#!WAGQ/UQ0[JJRphPVJ3ds_j[>`L#\o3<c=/YdmT;Am:UB4TAohZq#`951k[rp&>YfC[Wui5-k,%0Cg`t[u\7L0kDo1<=:N<+3I\2L_(G^/*@;7N/]aT(ZK0n/n=i&";r/X)5<(LfShL%$`&?rR%K6Q(-+6RI/(Zo:qBG/!/j%c-WoH>%S64iM)4(QB7:(qHqk@d9V:(K^!/hiE)iNJq7k63ag(Gt-ii!W\9Y"nfC0<GPF"^^=B#@7uQY/e3e13aJ4"37h/LM(q]IbeO^Mf:W%--Pks6mR039gm-eT6P%m4T"iML7+%5G]*Z"pj;EJB=tiLm-!XrHA/s]m,t(^5lA?$m5\<DH]jk]o-iaZD41k1!MLU1U\)sRP42#`%*8<$Gn-<FBgZDh.5>Z"DhK-sE?a^Q+>OH;YnktTo4,%8)JUi#Y08&8s#jUB"A@1;Ts78TUNpo<$-$a_#%&XWNBGr;C`(At;lh_;a%*I]Thq:jY_\]T5;q5?aRS).1(E:WZP9-PhUgX[EhfIrZ+n`u?g`VW0WVb(&=?3Ep5*G9aM)YV"$ON"4NCi-Ad6%Q@i,P/X:4+7!S%=?P5/Sb%4g3lF/f@/N]k]X"bG?5I'CUVlnM\D^>Lf6aDO[@P?"lTKIk1K,s_<DP>rm6V!pF0dKaa.K8H-h6h#FbKNV',k$/1>Nr,%CFXm-nQ,a(C=cT9+8Hg_^HO:.2q^?L7)('??7l)P]&,=OU9sW*^s>(HnbK;Gm(^_)Bmk2gqb9T_`nO,@r6[T+b^EDrMOu\@0RWlI%h8DuS>`NNgVb>5,_UJ4IF>^BMCe&f>B1Le+#4W5X(4M4rVZ)tA8CcCI'4gDRI,&&g2#C-n^F<X*UN[0jZiFiiQ!^\3$]/tFa]^*Z%91N&!mo@`8[Cd=pUHI60@S)XBk67lQ.T?5_O]c_)JGt+NPegrS2%Nu?RMC/K!=I$\aV1T:O*Cu3-VsYF@qoUurnC:+gFFO!L.^Y>%#1jS_7'E/M9T=X!](b'tm2g$:qe>rDcX;-N\`G58rhOSaJHnh#_2g-i*OHL%L4iD15/:gF1"@h%1Wh#,Z\TKW<M!;$3b3@6]DIC(%;$#IWABMNTbBXIbcMP]raWdYIO7*u:PiE2$ad>5_AZ:qV-PB9NU&q+sjES>Q8,*%"-;;T<P*U!Ram@\VUXhHieDKT:jDn]]Oj3:8%nn#/].X,X8MqWZ-`R`ei=0:.KXsUKco>9@UV&*ocX_KFZ/d0X19Hf-V%293&M$J-Ip&e,3;#G2!I-sb%D,cD-V;"`EDLht6GD"sR%JciEfq708lKpFsg+1NmFP?Rfc4i`MS@VS=m;U?ltT"cO=AabS]]ChGUEm)*rV5cMhfQP$SNRus+qfmVf_!Z)D]Be(:EpHK4.Wlg#%UuG\Up7f3^gNXt%\(DRpr0S#bG^*"6e1;r,C=q)fChYU];m`hecO%bfEBhArh&-5([Y-ck`UE%$`qc_9h];Ld\H?@J@e-dg4l)us%'5;K/##";H/X*R+7BT$UG?Hp'/^Pdkd']c!=aGTcroSP3IU:1h]EW[m_!/P$4Z`U2bB1#-*<S&/`%q^;%ln-+*%YQfrP54YpK4`8%UjkIg"r`tb#t"9c*\H__^MIZj*2r88g-p"b\rh"CFh!Q>:I#NJS]:7X'<g/J-61ATLtCr!4ct:acsJH4c2e[5f,I;14ks7lDtc"C%?a!8JVS/lm?bKK>k?Cq2+B[6ESup@L)t<&Fpj&'7msa+dcF50(kl"RoDX28j3MN4I$>2:[V:9.(%`QW=GM7$P^5Q/aA!DH]Cg"b4%H-QXX7Z3mrdC[N18Dff5oU[=R8)BhmD\^t$<ojQZ]Wp8khB.^tjX&?MpTDYs$_(qoe]QB=q;j#AM^M\^T!6.6Hh,Gg&9rekZ_ZV&%(rg_bbcT1!'WlJJs1[44p(iQZ[]Z_o8)(D[aKZ1"SHg3PD"3JmABTWN=i"uJ@K]24GW,f0:*%n_);\(2(3rG@AU$.f0)Z7BW!r!h%n,k+l:.Z']hS,10rD']^#d/%%nsa9;R?UG]E`;B-gm)de&'G_V&Bja0&&;(OAud1.29sscWjl;'8uJOE[s":<`n$l&WNeNb0([=9%]2EK<ch[XsgmmM3!;1V])^[`JA>_`)Q86/GYdU:OY2.:Jn\o'%8V<U[8BUG[O:3^floqI<`#\gQh"1$+7=mu<Ra/GQ@V^nge>s+5%YAiHXdN_oR!e7:iR;]&bc8$JJES^8hE3Y,STJ`mF'eXK/Ar&^:&-Q/LQuLq[?QCJTPui_IKtHW6ZdK00Lb(es'>agNa,gUc1BJ5u%$K!FTR;]gl)1K+t>Ugh>74&s`V)+6o>4,[`(V!":BELXO'#;?shsrQILrHk\&5O_d`6qI,+ohUM1^8u"er5lf=;`qF(Gb#/,O;+U%Cb-L-),^m:ncA6V>qX49KCAkC?3hJ(KO]!lp[[="l@Eln=WUY^/2)bYfMLRFa&lXS"VF(R#_3me\"&<&)c?JUQMj/3UOeF'aC[t1%NK!o<ZEU/^JeJ`+@p*dO(t3kOFf0Bm$9jJ](O=8nVRgrnC6lUK&&`9(!=<KUQa,oJR#K.A$-9+tb#jmqB&a.f-k2DN"%6[=1Se\b%3nn2>RPCtraXWu>(3d]0e\O*/6LSh4'p^8(cDIaj5UbZ-*G&BXaPg)ddL\$14rUq"p/@(k;^)pl\OiSe;I%@`>">s@A=<r@ZL'9(%c7e<$EoOHMkB`^p$i'@uoX)3T-=8..-C^R_I'+mD]@CJ5Ng$ffo[s*bo0k^(;n"BWaGH7):-<08Nnc?V%P4Ds?h_?&nrlKR@-1+3%5'C`6N)t.6IJnl<4`HGZ[/KF<5Xe"fB+PC\$>K6reH>?'e`BHW4_44N=;A[<'](ct$hIX&cH=AfLO1`@!h7%J::]Q.*fK4%_PG:Z%HTDqgO54NR9(W*bGJWKFU?d-;`Z]Nc0oac,Y>8jKp9,cGjg?\8,l_%f4m!WNhZ7:+[Q8(9&BZZEJe#Kl[X1=J(tc=0HeCEu[CkQ)%$0dsb=YNl^`a!%`/3jeal!8o+$V\(ZnVc`^93Q.//f:<.md/4oGLr06f/gq6V08@b+05!LJar.jji%2eH0"7EMjLa=;uPdtpKfM2%l\N.l3;0O3C^KWLNs7K2`$:h$CKr@UgX#g34[GaJ:jH[1P]n,Kkj74=jnWd5+l6eOk#1<OECc/b<M"]c)!mTC)ctb]`)u0F>4msR%5SMF\j_]:R:)/F-O,.p]kCu1X!M=)`$E]crflMd1O'+NdB9c,LXX7G_5\Ju3'mH);;.VVg^2e[;:'qeuj^M`b/U)C.0NWR+ftMY+%oVh"95Lj&GR)B<2U$&?5*-l!@W.pn9b)]So^^7$7kGKZT'0JQ<o__Znp30;/D>g*O`#@RiPNCt*ZRRR<-IQTV3Nr+)g/pXjcI^q=%c,7]][8'%`df1Tf%mNcM.4\Fsd<55XA*Mrf@\2(DapZ<YE1EN+\PB>1J*YWhbt@0fj=1r$*$&AR'pG[i>5&p"XsN7^)X/,S_kRB?%PC*QAT+b*X#QN]Z-h.:g:(gHfrqDhB(a8D<DtpRJ?iE=<J!.+%4A+Hp9$&QsGa=Fc,GQ3@S5^4T@p6I,r(:X[R5#+AiFReW9UG.*%ChX*<\aR+@N<"3YM;O/.5^&HT17"a_V2T-@KX?Ab!gLelR0;t,HLa;Wf.Gh.J/m7LTZj]4RB9(.U:/tpe&$EW7Zp`?PURL+dVW0"%)@@qB1:jS<UeK?UNKb:u6deMfU<"%=PqfMP8=?RlE41uci&N5b%?l=KQ&MD/'SWF+"IuS[R8$QBZ:a'.J3l&+4l%kA4M[X0-7L1@%4A7.9i%RD_YfqdoOYX^\C6TK,dS3UD3%U?C@[X)faoI2K;]N4u;g;?_PU+1UA0aSin7:IeAF$VH2@2KKad=hlWKE;PS%t5]_\A<c%;`'3DP78X-VtF$BT^Vr:#+\K2/;q;B!/I^lUeEQi!`&h:L-fU*B*97_Kdfq?L1CpAn.f+pE>YQIi;jEn^;i!-<sUo'E7cMV@4A"!%'ib8M)75uH>6LN)OsB;"So'Yi<E+?7_`fh3P,;*$<lP3tOYRf-#Knrc;,()*R0?:%1;KSV"t<IZd_CZodV3Km9N?3::BMSk7<)uR%K*OA0KAt6/g:o\/".eGuFcF2c!Jdf)HA5l@GWJC-UsaRd7/L&@-HSY&U!0>2X'6HG+Yma5nHOPW85Nns>&9VD1DCZh(<'_:[!rP#%Tp^_Sb".7^i#.&42e5eji_8;3%YMiuPlZF[n4^W+WWk&]B`FNO_]gjMAQ55oY6d1=BMt]V[!tf6r7'sZ0PqZE(58p?JZDmn7KREl%aoF5KA>p^$3e_H$6kLg_N-/-ucqQQA'am*+V=cB#Ee1,+8QR<D>GXJu!tGE?KkGMc.Q3qR-'ad!Zt!rP-al^kA=[nF%4Eb__!R)T%&k/JGn;9pE\=HJCd]oetB4Qi-E%!MVOUC*F;%sr1J1?+n;H-goVrJO,*O&nZBUQ!OGC]gTaJ'-$KCl2o!t(U_1E-NFkuUkc.A^-9%"p:.l%RqIt=oqG''W+W&fQ>cG7$f.;0]#(m#WMuafJpO;9U:JQ:_bhiW_0."FP%5nM:-rdMG@N45pO9G/5i#oi0e%O'Ik-2W[\)m%;%fQr1J-K(.\P-^MF%Q.@1cno22]538_9sl)jd@Z%U)j9'IKTBBH\eQ!/1US_(poY>#bY='UhaOXK%rt5[hSdMtF*N_'kXH(kG;9%%Tuf<WCFf]R3L!hg-egA6]@8/W$"VCN"/1D%e`:h/Q)f:kc95"QRN+J3ZX+Y!O5R*7)u?C^`+Vh7jugqNIWebK5'#7b[<2<!"')q%)p1i8?GV9qZOKNaC!hqu5QiBt74<d`-h'g*5c$GVL$3aE(`9i;;$m_3ng[t_UCrHXaOFl@BK;'6XFQhhNeP<OBdej8VU.W0_Vj!A%m'+PXr<bnr"+_dfbh.NM!_L`e#)s*qeNuF!;%1#e;eS)N%k4hU2&P"-@2%9k3au)+ft(]m$mlBB;MGr+9d?nf6j'AAZ?=MN[#B#=%#.C\''HF%giX`l@ehtrG.OlamYo8R;U<lIL*O-NACu$38!(52=8.f5`'fASE>GC$UKdFp<%+GRa#6S2>#fS:\9e6A\BZ%)K,9j5*%\0e'eMf_!f2&Ou#N2d?0$q[AT5\2@.&AodLW[T>N.`GdN57a?#MF!,Uai#sMTZ\%%AX`tm*1]gNlPab"%g)]#O5jj+e-k8r)jjGj%;SA)0F8A"Z)k'&[of-hcA.W'n*&hg=A\[7PPFh=>D;^eKI_UlJc/Z6H\gmU52Wi-kG2%OVYM08aQU,.WE8.ml-+[r^8f6o7gC-g*%rGJ*9.&tm9"-WilhWqUipOp.q+FZ4G0nS.l;Lc^H[W1obh)9/f\_@==<U,H\[gc$)Am&HLc*;eNf*2uuUr;<$U"M/W>]?kUD1YCB%*8G<s,qdBPa(s^]Q[<SJ'd_QSY1JCXM]$ooCZA$AHYonmi(b5O7HT!/:)f37bE>"`)mi*iW:T77D,>s",5Q+hcSS#_phWc=lFPS[%"'0rAUj@DHA<3hW*hQ.q4$l$Wp"<=:!H#$d#&Me*am69ac'1mO<3FQE&jO9RfmqHmC7<1U6ft.H&UcRA[,>`!*hNm&6oJW2j0N/A%.?nhTcNY.fZRJCLT+*iApaLg@L4*ctn]lP@0\s=>.NY2kqA8)2*hNnc\KisId.,e^bVUTKcN\F*-?S$Wdqkp,\C1Z!+mFa?ES=5s%W&)_i2Xh6E/'FJA&0f@qCld$L4p.S5FkT*`R$6M*Caa$Fd1tGL"4tBkO36LhJbYY=ApJb^E&U$b)]kU\A5`/HCuBhW.(>qk#"$HH%$MW0]FDYREj0=0n.Paj$ggpRX7Abfp]5/V6KFag##0r..;M&2@%0Tp:-.-9+GD:':FP/q?ANI0[/fV;[KFag##/^ETM<aWa_!PPd%J(J<hd2,Y[O3`QP&=<Z_cN^.5Vm_@BD;ZHiXj*CpY`U9_$/B4sQcZNJ_rJ,_fV0$km^.Q$A.ql/[)$ucrD"<c;WbC!:)f-X;^(Fi%HYm.tD2#P[Y1EmO<RrQMY1Em<;PiEtp"IdT8jp^=[ge'A1EbIiZdCMY4C/uZ@F\u?*3Tg+Y@3h?[gc"eoV^togV>_bBXKs?RuOac%c/Z4bW:d)S3Gt;jjr.dN&D]8B@[Ns_laGag8RnnCF5)3u^dLg-rAK%:dA`)j\)B]Y@@HDhBbIue6uBJ`Rg*J1Z><0UgrKjW9LZu2%"s.Gck0-]C9`n%l)&.eb\028bUF7,.%:MMOg7ma7;[THn'_sc/iIK_sc99O$6a?+Oi,$c(I3+niom(La"8Y,>VbHU</;a4.Jd5r9%)7&2:Bhl02nDLOp1qYF\Q<AsoKgY;pd_.gaQ8/-[p#3-6qGQ+(__TEu_n"'li58t@[4^6ie(db6pYhbRCl$\u__TL&_I8ScMnEcf%aS9""/>H'-m_YYB6e&U'_I8kkF5bJ:b,X'Ie(g;rGN#n;*J&eI#=Xs>$bTo9D0T>G/KjQF]'McA%E`4b#DY_TFY7po9qr2Z-gmkB%nP('Ke#7?JM7]HI[(IG"QJ%_nET(l:+NqL/)jJaLW"=1%>pkrYh/q71j`*4-@h(AW]7CEdi<^[qL*:4[Hp$g$AL<CTo!fX+1J*ip%4rflfPbgM1VGi-3M7\<JTgCENh4RH>GYL5[!KH;ci^c&`p'';pN6g/u-P"=A.KM[$VUNBH$,#Lt,Xr'Pl&PGsJN)1d&HZmDd1eX$%iINqT50;=SkCGQG<\cDT6K$+-]ac*.1GUEfW4@I<K?]s@\=;GNMM/JY%REJT\8W_=X;W,r%OYQeom_5A%EsC#H!E=_R9<>@%Fi'd%4Ufqt_mpV/`?$+]bf-OXj8*^3@V*A3f8%7O.C5kR)b6Glf7UtT(tC_'K>VsONA,]gDJVAu$+f@V$a9q'2ocBh5r\9I9RkCu,=eUW%G]5,g)P3UklGT$CTUUfH8!_2J"'oEXZIa^21*)+Z;)a-9`Y3Isjr:[CGgm2tX#$s)%D*e(W7U*VE1j,E26o@d*41e2(gR@V<0qI-%<uhN@e"!BnGMk`/3RK\(ItLc@/9L+PD]1YlMDsf)X`i]2Y5\^.2OH;fqJSDI%b[TR#'u3H2RrVg%>=8JHe^R,;,44Ap#"-\[S><4%^O\Ss/`rETrs_p<&K&oF1NDN,b+e4:J_Qi#FG.17*8lu+<>QZ8F;r>p(ZTE&!g>@"!s^m.n2bLg`%X'0!schGeKr,n^nLX9&eX%3%*(F(FaG2ir+9H@-EX*)n;R\KD",Cp8ib+8RB1d%t>R/Qk!3L'a*&nmI#Lji;*&nsPBAp@AEC'>KAHDNMELgbiIO4@Ar'Ku:>$,R+%PFj"l5I\k4Ag2&*Qn/Y%=Q"jq`F+DpD8C)TLJ0]P;Ui`+(uo"VTm^:qD0G6aVTabb'aWn`nWR)Q#pg*c+;(pej$8oDo5IQgQqLJ7%-+6D3\,rToe"TnRScQ,^VNIT3lDa*NN2T8u0o8,PX!/ZeDLp$oC@j*ULq#YhN/Z=V'9RiVgDHo795p&e9F&1ujCCUaM-oko3@/Ts%6^k1!@P(i_2J`s<L/_"tM>5F\!BhT&V:-_KJT@I&D4X\GH/LsICi]$%b]KfC/9`KY]>`NMKgZfSUaUDe%#,,o3L(&k5eZQL&VuTF%.3\4!/-0ms;qaLe0LBm@5(gmDM$<Q&P6R.`4tlFagF\UtP*+gEJ:WF]YW4IL.JdGRHO*2>-BU2I<'t$Nr5I-a=?pF`,t_OCA)J7K%LLS-Y<>7)9kZjZLSkBXE<cR9<M&&\dJYcqJ!=gB171M5,M[i1GeIL!>48bY(h77b:K=0p6N%mKVM6Sj"<0#HGEM8&"1UjN[F+c;M%kJX0*!0hFP^c4oSTF^8`\jEuuPoY1o1l8>7W&XIS6d*Q_%8mCjN(p+#3:p<^_^(>.kVu@'3]'j5dNQ_?/`-hNQD%4t5^XOTSStg(%"XV*T`tCg2V\c2P!06)dkju#e-"C0o93;<`U+-:=9M(q@7iW'9SnY/t^L5+q9.X)?modq_D@'IRU@5?BR4^uA8<+J6E41QK\hj!#%!X='K2&3"`%JHBpl;[U3br,i75^[ET6MY(=[cX[qo,76C7S^/j"p)\5[Lp07IXl,^V$]dA*Fi<\P&?B5T_h]ZP!l%`KnN:"cqP4]%9218.OZ<jOY*3OR6<=m-$'n'HW#.jpUkA,)CT09F&fSY%05320!B;Ba<@WiL\@#QW.s+C8+tA/\UND+*9&9[%:h+<#%9k3f1n1IU%id6#ELshsbYqifKkq&%>L1G"o5de[D?D=1;d)coK9qfX=P?8!Fl2r<d2AI^j3#ST1,Fa!M&Pc1ogGDnR,q(T<U8c,=BrIN87^g+k%(a>`F"J/TZ?Q<)0V>$$gU'?,*AT29>;t*Go8/[>W3'>4.6Gb_+DIS/?9:BO"Z-8M9)6q!b;;IPWm5-KT]&-FUCd*X8p]VWZpE!S6%*#F7VmC4=PFkg+Cd5G4X`**q9KaWtn(82;daX.Ch\O>DH5kJ'p!iL$5OimbAN6<L`RD;I^,a[ODfj+%F?0?G^_@tO"_(nS[2-rbi%Ni(%FVa?WPC^E"c&7QT='dc.Vc/s2<Q\^V:b)";d_)Q<58&_#(:(["N36fYPnan4%;m=?I'lP*sZV1i4Q+s&=0]At;<Il-S,tek"%(/%n(FirLj4+J/p*)m">*,7Hs*J/Q,pq'2k;0[n[HPb[b_0A.99IQUkJQ#YB/pLN(+!i7uoC0;UK&Ic/W?V+EAKX6]KX*t=$rP+N%hdpNV+_;GFXR(3kW/S>J3gt*,#UpGD<U&LXE1'EXF!I>p3*dg4g4ef/nLjqE@j7Ma\B"cpS6$6#E"Nj1BT+?RQH&tj)%//\]#Kiq%(Trf-M+p@Jd_[ECD$k>aKuBU*>u6#gM(l$L19*lN8?T+<cj:'4V9)`l0&<[FG?ZF3!8R]4+j4=H/#*un,snn>,ZhdZRr"e7,mm8[%4Gst?/9.-AQFT\.+h<PPnHnQ(WH*:P;XX6O?gkN`J3W!N!6ShD&n\0I,)Mo&l3U(u,nt!mKFhCpFL3%eQ5*i:b"KZb$Y<;6\o:o^%lQR!aZV-IV^Kmi[%52lSZN<s6=uN"TU2WYlc=a1[5di,!W,U@@jY9CV;],2i7#N@o^cH$Z"'eBU74pLD7@,4DC56KZ*WAeI/HK3&%iB!Kq`O,h'TnHSNVllu9H!+BF&/.[#-*RhtaCXN.,<rr]17<l9)l1\S<BAdR+psWt"a?sZD,R%Z/4`$PjGgf!.o%Jn-S;iE"]JE5%VD6;R-)T/WUu[LdDQ1p;Ebe5ZMbT>q(msDq9[f[087Vq^e%ij[.8_j`N[6B0kfhQ'EK1DQ0ScHmKIfj&pLL.,E2J2%k>[YL:"WQW%R50]&0G5[aTT\M^+Y6JA1;[<r:+Y9OTe$684gcuLUfn0`@C=(o"^1,d0A0)OP,o^75Kg?,'n_7!\3c$@pL_/d4Cst\)[*`hW76ch%2+<,CTLQaSBW(ogk`QG0A5q?[gFuodX*Yf'!hKZEnqd-/]TU9D#Hge*E@,P$bU1D!8)%^1'ld,ZP>+'C?k^Hk7t\<_DM/$_Ce%)3%ZiGnX0higS8Ehrf(9`rs<#IU>ra\C##q2'n(i#pR%R-d?f#"L3PrTel7/<l#(7UKIr[>oaZ>nEc\eC[aI3$UT]5Jh'2TT;`EJlC]%;F5CUAiiO$@D0Y`<eAFE)]fVj\[[?GM7Lmn<Zq3[&Adk1dmg'aH%@),65a[B(#Uc%+CJ[uA!o;iNqlb!.Pm<,a1qsI`,$"Uh%YI>%I(XDH#.<M5>R';u5S6I&A47VE-u`DQQ9!36iOBkJYmGdl`\?G]6T4BF?agc_*i"].(s0+sTh9.aSQggp6q=cD$^TGVlC$hpE^!W%%G<I*#;/IX&`*;4II/J63a=-)1S<:n_E?C3>jc!qL3?S&lqaCA_AkKI!cdIQi.^"+*q>iNPbI33;b@FTbI7DS![Uk@\UKHO@#H,f=%)-oe9cfj@%Hq'GPf4T1Sk9JmAIseo?:Un_aPKBdJ3%8BBL*ZVS\2d@9%+3fq6<)\Kh^`6<QDFj>P?T4h>:?97QOCiVd9L46,Nk6N%G^D'nmT:/aQ&\r4H+MIY'bO<IA_i&l"e&l"+t=d&WZ_q,-)RCD.ib,n=(7^ULB/A-AJ)uFEfj;]YaQ4WG)*QU"J:fpkMY3g:_qMm%N!grUB6<GHhO[OZdq=UIL%pTTc=+YA$.UmKZbZdB0<n3FRZd%%Vu(3SW_KaOjF>O1!YXY7XXTDc1M9@WHW:bYUTP?d7tV`rFJ4B%%Anc(hMq%m:Cs&aX#`Q$gCB&KrDmQ4lY%3;N6+oW[/mo-1YdsQo[&YK<EWXfWJi#89N\B)jZFYbE%1.K1n$V/A?Y5m.,L8-sa%Zbj%&L8S<%%aRa1]6YG:!Y";a2i?aU:lcZ*9/67C+=Ou'CEo(J:+4Nkug?I>=C.::(c`]nfX2q2L/$Bb\59^mPLc&;S$5UmK\I.+21=#%UW9sCUKVb=`P-VZC1G<e)W'Y]EGf^u#pn1?/b?NqeQVNH,)[Ei'%R!Y[fc4CPZo^DH@%.8oP24K%;AR]c*s,bi"p<pq.^gqp,sG:%VdCs@_JZIt2;s_6SnED2WpES<<E"&cM=?1CpDe6$9Xu9c#c&L^,^'[.9U1u/*ofT%dt(*McJauU3r;DhlHl"TQQciLAm[NAj+([r%7]*:2]Q2(bU>OsGj8HZE+>.gOrQ_[j(g,:0l$:-`GLNTQMMti"S^JBX*9@*O8;s9[(1R&J9>NnHCZJCGS*m&KVT26<]dC3n&lhqp%#:.G*ir*rB\a[\@\@nD2O1[C,0cE+q&oKja;P#hXNg%KE<V^H$OZJMDg0(D@\/VgW_WSE0^l9ih00S;3(?4n&bFM*6>Ae"R;]"`,%C'IS>'@rJ8dYcUo[nZ5.>XcgS'8gbJWdbPBFf1>A;g/nB)s9a\"tqDp'gok[fug`@QFF8T'ZN]S??Jul#2icBaL^cH3+mt<<9E)b%nCQT=Q[mRB&?hjOmedYX\I]:<GQ.!8GScj'&G.QZiO8>r-%%/Mo5DT[6JM=rG$3Es;0Mr!UjZ4^AEWD=q9ImP907X$b'3h[Gpo?Y%0<=?Gp`hGG+S;4Jr]m(&4*LV=,kTWd@PI)['BL+:r]0+Gn=#kGhHo3>;rq8.b%#jE*P]s"s2B3]^q/puFWK@qYt-s+hCVtm-jOk\%CV$j>FNG]?m<]j6HgR3eTtMN)B3SSS1[YD!NnnDm2,$B;RYoj[=#/kd#WbCZ._t\ujH^oP=3]KK?B?^`gRf&o=2V]J?B[.c>72Jj%6-a'i3=j(h@!UAmOi(nJ*n[[aqL>c906d@q2Xf6"qpf!P0@o\O'p#<N24`h+A-@'/q)%=f@E.puITp`5co8LeP-E[rM=B9#MXK`F%*Fbkg]Y;1%]3V?60/,Ok4ShA1rKFtS_!mbn&X7]`+."<hKRe*rp?CL$r0U9WN;;\d3[7IPFUM!lCR,6%)0qs",Y<I)A@hB$HqO&)%d_tBLq=Ns:q\8Dq9,%!J_!tA2f2cLTW,YbBT0]Ek,Zm7/)LCut-r5Znc`l>ZeJ+OZp+ejlWo1HcSk%o_5G+n7Q^F]`#J"jd.Vl\D%Su=#[[s<u7))FTU60d;acdRoEST[[R4g2mR7VsVLSkb<jYYMGt_0J:gRXQCRjBJ%GY4bMV`;><[9?U'LS/U0]b42A7P(`Mn3W:jM%1B(BkM1nPu0\K!WJTr3<QQ=V&-ASnmTr8L1`lO%KWaoQGOa.M[/!:$N@=s'rW0WhY/u"B%^1U-Xh.q%rnFi%)3*!+f::[EupFdsF%Y"%?V-C$&9J>jkLI@lD.E$]O;79qT/='!h0GlJ0[/m(ia.;LU.e#3VV)s&e0YN+f')S^s"52Yu2:rimFM6*eWX8M*D%hUVE1")(s%iTeraa7"T??7/G-hWo1;YdT\r3C0NR::$p.*`?"g#9'A'UPqYt=tQ1'k@glqo.0%(H>b<I:5JYgYirjPA/qo+&eg8!@'gLdKCM!5%BhoJCGLCo0^j^9!orGKJ[@?]lBfD9\?eeTYC+WdkEJL;UpJeXn2:gu:0+qCRWVGl2G2?.DbkG*7G,j^tpJ8:Jmh(U&YhX,_]J<i&%\u.UcTmNf#ID_W`geg(*4amh(H1&BVbZbrEg#$.G)BB>^*%VjGO&e-\?)-G2kWJ4Zn]1aHX>_1@%n,5ZN/bmXE\T:Xiu?;[98\]6%_T6DON<d>)ne<%hN!!(fO*1nn\Pe7UJS8kI_DF0B[BH$.j%7'eNnASa]r98Fa4fmNh#nmHi6#APG-8+?^o!ZoH`>k;MN-ethA-eX%Z15VWmJuJg(1,LgF*-oXnQT(i=$u!Mo#Q')fC`OCOmsF:X/*g]&l?a`),E#C7^"U'5'9:1)0U7r8,O?;@Bc)=#4#-7UV>&!1;5IM%USPtU$?7"61B'Nq1-T,1m+^sgBP9L>hJc2_nSGCU]F+Y7.XP\gM%oE<7E,EBO*o?rGkR,gr$%9nP`r6K6&gg>4W'njSC>85hDt;N%plClGOmrlsgcYhqrT$u(X/2@)!57Y_^>f1E%=``%HJS)VD?EG_UW/<>OBCZUN4YRXa`]qs?L3l7-JM0RdC.kgT#IQ8(KWO.hkj9t%r7Y<d1q/OPYtID&&kPVE;0O?K+l55sJd#1RYfYVBbVZ>Oj[OM(b3R.%VC_]*RkeAthd8+fW.u5$Cpc?Adptg36L5siBPjN?d-s;@%Y7nnbN`T_;TP,fu8jSPVVh/O:E#h:qRkd6L@E?Wf4kQUJb61U2;cOi#5u<iB?]!ouGg?eVr``+:+_r\"0^[>Rd<E1`,_PVJAD,@Q%iC5]9GY+j`c[`/EVdkl46EWD!L>c(@&Dp9BR?2sgU,W]:S3Z_H.spqN^Ns#;LtkN)W<k"#&b3YC:UaLsnD13tHb#AI@7,JLGc!-a%g<k7maU0Dh05GIAA6HF"lm73:T^G&P@LR^5$S6@mkiK%pYi5]DWP6]`Jt07;`0gCTIH!AI*c*DSX"ScJgDhcKG>V\RXh9`YaFh^K%$D/2b$0:o`#GSl?]!N.QlY^ET#S66>Z7b?Mp,ci]Lt4$>=cf"<on-dp$Mbk`k-LI8DSQ5Ame^($q/Z6.+Uc(]jqH,:r*Q8Z=)7Va%#i%0Wp$H#nQ]2t%5D]j&j!aW"`j6(YOoPXq'`as^87aQgh#D5[lkG:YE$c$IF$>f&_"XC]/h&jB42l0a\(::Q;am3QamE)"eh,c.%;,n&)7/3nYS\96Vhhd)YU6cCebUj^s;`."hl&NcFka1V&PCs?_/Q6LOlC(#qJ$6k;jGbH\3_@>/-e_)OFkku6HhsQ^=jg)H3/coB%-O-C>VTg;F)N];L!`PTl$R&4=_&PR./k".U>7fp,8kA6VA'`dOLcEr7,Y^jFYJq;tV[?'ol/*09n/0ZHH`kHYln`_7*Mo.\/_*hf%@W-"bAV+*CWY_BM3Mb2h*%:tnk)[!7\EL:ZYFSuAO4R6%94Z7)NLA+Ra[Vt2T<\BoN^'/>r9K_`IZ]4hX5hBN+ir?R`1OPd=X_f&%Glk7n)>85_p4<FQB/4Sn$]NuW'9aR&`_6St!8uQ<p>HOtk7dpg`T-2o'+4/\E&ZN.`=e8FceKg,&7TF*nC[gb".>tG4![?"Zk3?H%?m6%?nroB[RKB_)-8EId>X"ko"K4I(?m/)peh74G*rm)WrCep3GdQ`>2YA7u-aq;ni4W7B&$X>18'#B9OO'N#+XrEUhPL9?,fnMt%h`4YW_#p3#ofi%1KHkOtO^=>Rj$'#]pR$#"MNJPlOg_)#P<3d>(8b%BNo^1(^)\'Nmr^0Ce#mFL@?0G\#^3;FTaJTYf0TO[[fb[X%LX__rZ?!1m'/R'?_C;W%;(=PQMoPgl=W$5QMg-IqVmsmpQlH<?+Ma.g[P5'7!LG&gPg:>56&2dXbFgeiOos,MAD/?e^G[u&.E'CG%5aX8D6:aruOgiIcZZsT9f74MTnr+Q/m+`B0X[lnl8_I#W)'^^qW>C1D(@iTjTW^dA=>K^pZs!q5a)l_(Z?.(J&K^5op%"AV5T4R)%FA6-IKW0RF:C3S>F;'dp,*(GL"*l/>OqDs#+TV.\8nO7%+G<ZWPDU9KHfTf:BCu6'/Vl`V1cVUhn:p-gA2NiE)1q==ciKWl.#"KJ%f2FO[9Q'6`-SlB0\%3]7DF[Un%!*1d7DU9c0(Vt3$@WrA0da(Kk8TW[V9&N0PF1^r%7?+J#ZCa.,3AkR_b.%QZm"LO0aAm]/K[Bh%!06,X-]DsW7844M)cpdWBuXWX9SdFSogOQj_N>P8[sF&`Ol+j*eaA\q+X&/eYu)0%D>2^);FK$"M!>L,9$MH*`-Z-!nA$L\5$;rp%RmpBHg^&s\GoaTi'_F,ri95O8=A5sbd+GJ7/sd\+?DC5_UhjA+kegtO_CE9``]B3m+.,X6=6/)oc".nNU-d=fnBaVi?Imc*f1r'i%r/I&XUEZMZ]3eMQ]0NOsY-M!05(q'>P"+%W=';RP<7[M].]YC[c5P@j.^*=u3pXO+SUG%3#uX,K<ig*e5<.!9Fj6b!8k.2RM[r`'%,89W_aOtLP<;*F@<tB(!l];\nRV%5.2Ps>oS_]aC-VA5\<'#,eM$m[4G&%R,-YdG(@aLYWn"!n'"03jFABe\')H"=l,<V%13I3>>%$_q4>;eKO?e<6X1((\aA6YCCF2dUSA+h@3k=ZRZpdTH[Xc8t)KCDDQK>'!8lS1%Gr-eu,W]9dUTQ?9f@/qs8Wa;#GL--jaYW4lo8%Kk\;:c%J0A\n@E%^a][L=`^"!8lK]aaGs,C*P92i+MWTT_MlKU2Ba"n[9(U6Ml=.$SN7-FlCDJuVL:+#B-#+m:70,:f4=1*bp=BN%U0Q0;E7`)lWi!*ra1CD9l7oY<Y3B*,LJG/3?F0E:,H==QkX9V]P0aOO4Ks]p:Y&e5V@aP*2o9'0?:XH_7fXM7X0'9s2sf.%!In@t%T0!/7qlo.2Q&8qNjc>pu0LpBn+&RAE58'm0A%&JShD/+`<B%-PmIh@K/I,J"\"@(tS4dd0!HppDIYPhNI>QeV3EG79`qq-3ZU?RJ%eh/E4J$K8M+eO,AjZ^SnV4TtrEL:Jub*!!aZ:>^(ehHG,/"QiNr$3m_!-uSi9>.[tVK-Nus-X\6GHmbYM/;0b8P#,f!]AR<j$RCW%-9Z6<c/"=+QfaMZ[>bjU71QJ!mtr,sF1]2KVC"o8(ptmG<:q#4C@7Cq+jks5&GF1e-cCApR.J+/E^"bi_+^cK3UV"dW4\-r[_2MS%c>#S_guJo"_cS.el(Zi\h%jW/.,/@0dLc\>P:.%"M4)Vs99,fc-`eKp1Y$Tj"(\CAS"]F73'u&q/hs98aMmXY9SnSY2%UCCP`c,\%Y6^0hN-R77"<)]!MW"31RHOX`B*PcJn?a*HOgc'QFF&nt:9kDNl_&Y_\0NFo<`L..?AGQ?J]]jUi#opD5?)db!Lo2s&9^uh=]5EZ%Y%LERhCEWCnA[e9S0D#fVqP.tqj%p2GHS)9;7Y=$MM`3ig8V"dgDi$n3:8D%;%o+i+iR\`]d?f[D_;aSBl\Yah**0h,F?Y,s2>^q%abs(h1>nb<Z_HH933Eu>?l#:R;E,sD.nQ`cWS7_XRJ3.T/\JX@*@Ju$bGfY"9Om@F]&\Eo<!naPFf1+YOFNm[](M>XTEn>e*CL.j%4Ys$j=f9e0MnH1MUXN_cG*:<nS:gNMA_f=B58=q15%^[3Ttl,>Q],0gYfg;;<7If8@A0[A\;Crucr<MuVC"toeS?qJLuqrdJgOF#%T\G\bH5ET=Xo6b_OHqBmW(PQm5N[ANB>MhY';L>gWb01rkEtkVCN;UaF2:PJaZ8d2ql%/f?!(7o(K4>\^$[-a]P,fYVG80i*1Ao?%38;C`(?)E!<!,.,m?e0-e7<k;c+3BJ8ZH/n[&IFS;,^G1+dl^c9#20'P+p7%8XNF\FpB/rWdO@]d2[[\bb,`[S6"Yio!X.0:/CVj%IjI+7`]7S%RT=[Cb[(`4UWBZH2m*(hQ9R=1iqkEeI[,dtXlU'fX!3Vm1hJ^]G2DL$F7?rfRF3lW&nB'?+Eq`u&0qJ@q%:p8JDAb^%"1-6;5@@2]5?gumb)+P7aKPLpT?q(X-#bWKLGj87KT2mROF^-(g=-eL=u#^/`=`^kjJMDhis_O1jj>2,4!Pcl.eX`uGTr[f*hrf]%7gC!n3MdpV2.JZd5="9c\ZG^po@]$<hn6@j:Yn)UI=$-&7k)/*[%_THHLf/m8LYr5F)q8eQY87<I;Kka?0XD3G*Sr^.>B5S)'U-L%!GFI=AS[Y[R"/r87n'52Qd4^BO3^8riB+BQ=ucQik\2a>]m:h1^o1/YDJ0IIFU`"2&n%]^NHlg19MF(]8&(m78+;%(6C,QQaCgBI%GuoP30a8FsG*#ac#L,f28'.ai6Gi5$^B]]`a?8WsjRdRd?lEU^hfg1uEjM^SH`=DP-)gT<!8L6M1=p@j^Gd4",M#ggg3&=$1PGb&%'#mDgpq.mIkiXlbQ7asIEk\Qlo$p$'O@r"*7Wrd:FGBU.m,>OSOb?tXGi%n4+soYp@n]0fKH$,ek2qDgs/S*b;1hBRM=0n-*/>(S%TTKMTn$A*jN7KfWZ)cXs6l']c"\E*KUW+_4)+a&OQnTX41+#G2_9/Fm(`meRTY-<?X&[b2"0"*d4843"4"r\F)^8_N;G39Hjse]a%/T[^e:18I(KLa`iJ;8ee&sM5Z25o6F[p[]A4nt>3<#)OGXKP)-[CWEp9>]0M+MGtI""\c4I2@TV'-"tq;%[+U/,O/NQEZdMl./+Z%+PW%.3QIWn?BMQcRld":6m\-LiFuD#`pPh^?M<#c^$X_smXN9%`k8H2.FJ%/OIX#GPt*odha7@LbL0m<4su)=U8nC>&b!2=0^tlY%XU)t)F6;Ua=nLVk6ucMBD](kSY*ulLTIQVthRlo1Kt8OYLjJEiO5/G66JS4;9jIk&SSSO/h\)e+n;<`/hH]':d$,BMA>__=)7`NQ%]k?0!\g"HE3n+mr[BmI('Y9<F8/SugpW2WWoBb/:\cre\&'X)uC/WTdjpq>eU6:fkiCO]jH\]<fc&*L;Sk3ts6XQbJ"jH@.8LteV%$?lgeKL0#d8Rq(Rl`4+JqPqd\qPlq0I9"/5\@djYEU7PW\Ag.H,VTN0&q8Tl\#Mr0ml=,ldfZNoMc7'q8R<'nHENWl^/sCLiQWYh%;PK>O.H*i9I9_uY,2N/X<;)H0fm9e-@=6[bc>L>]&l`^rJ(=pM+S@?qaoeigq;fdHDCSM?k=YM(0'DGHEpO5k+_rZik"<m%M^,p8%Rm#<U->>gWX[R]M?*`%iB2cGQX`Yn'X^eNA?B]**2OChmL^IED_F#EIHWb.'UN5NqqJKfCWG"h)D@`p?cD7l?XRqqFFsQb+1$=*h%jF#D<%W3anM<@KU)OK('3tB!l(XlQ4*dCW6V$$.B0s]@S&q.YrOQ6gV%;*M!B`r:\AZa45pY7J<ri!p1,FSul187+eN:>37(t[,<%pu@`#/!h/aB!$daUt&CZ+\/BQ9NBOY0IPY,6Y[W?*dC-!-Z:VW;i++/=2NFr]T1i]hAP/a>]",gMIXEfSb\IQrmX#n^3@?702qDA%[JWT+<8(]-bMCO%E:]\L`ogLDrDD[B.1^3-kT]()8D1I@CstJggO-Lu7R%(YY&SZ(0/^8^]NQGmlZ"\`';eZ;il\[\"JZ7-FLaOO%`7L9RU5u8F7!V8S5Q+>2%KB!W[DulX_bAfPVYt5s'r@qPXuB4<]103kr[FSu*8uL7$;O_u_9ZdJ\8G9ba;F"\`m=4KdVRJRU5XNJ%JRpkCgfh9+3K4_G?!73/mh.1TG=8&,@@@^<_NKc'?i!eUpcLRb$!D<K-m0me8cDM/]+=G"4VPGLRh8of&jVMhK]A2!EWHo9H1.<7%XGDlH&pgHR\>E)#71<.6o4X+<mq!c5i5ME**5^WiG:l8"JYADI%r(A8,LLt24)pa@o)-Qu,Qpo`bo@:#`bg[.:*'RbR=b(-<EG\s%Qs[%S#gd_:d$2gR)P_<qrURZ_`gfK!l.U0SS'FW(J1N10l!95E8Ye//4LQhZ/WS:+[XT2U7<ICrCJUej>j]'K#\rToEtHO,AYS[q%bdoUh)6rU@9UO1nN+"CIP1oAgSKQltG@ETr^5?l7??IlIg3hV,6hI;QGcN(M_H#\q5$r]tS8_h%`-koL-eq^%po6c$V"@<l"2E67%Gc)3uldW!N_$-[-BlhKkB[%u'l8oE[iPhnm3MJo`7UP7.2!^FmU$H$'qfD#OM&BBJKdKf\[<k`@JL%CY#m6nC@hN##m9h5SRPcgi%ABu!#niCTZ\Cj>GduaFZb&pBF?)$pET.lBR*FF#W3JUYEqUo[3I*?F"Wf8@7m+]Lk?&m]"F<9RW'+?[[7RKa9)IJf!]AsO[S0TA;%-R[p.:r6L>]mHHRn5m^I_b8s7CYQBH/CCSkm6*8^eS:uHegrFK\-&^SN]@W_,3P.KQal9J3R=78+.(U,4$7BNM_<ZIC4fr[Q?pJ]%hQe/066RI=#Q!0'YI\+S/,;3tAk8th+R4W',^%ls*3rOd[7O);nRABHE%\B^.jaGCI=EHq<ABK5lRS".kK'Lh16<gP\2A$c7_;0;%*B+Te9fP^EiD[$&8Y'qH=l:#TS%Q;M9IItCmY(J9]T1eqcF.5PT[(!H*jU@`1*u6;]O*Y8b#1-C#+'HJDR?S2?US3&M>daWU)t,<%G!pCCLR]dE1ah(ddCY`eG0)>S</PsS<j$.Gl?gq3.5Ak7B9D>iB:X/fNNQcoZX/d[X>cJfeqnF<Fi&Q3?:XI'[`L0oBD(5o,TY'O%;D(8V(j/I(e1='4Mc3sK8Fl&ed;R!/p:VeO%rEk3O;$]$k!Zg6VD34QeYhn7.9qIp/_@q29.q3AF4=\8dAQ.?eW-H>3T_=NMO[>r%>iMRnjns;=e!QXMpPGZIm8IL,Vm/bC=Lo'ta;TtQ%r17;`hJ=ecrf@g\.4L@,\a>iVQjHiCTKH2)AGT-Sd")MMp]5bfQg,ALK"W&%*3QBJ9_iXu)U$&1l2XY\SmdqeQkAaOlCDG1"0]fAjNSug3`41D-euc(Fn?/6>MH'q_I%HYXKe_/l(TX?`0:f,53*-:R/&2Z#Qtt/%6Xg-h4a5,G5AF("M<7-_Jgf*U+PcTDO/ltH1H*a&Q5XW/>Z8W3dAaMZB%j@4U7*&_"ka)"1+SGB^h[p:H!?,j:6@?fWV/W'*P,%[%Ci(:Hlob2ULAe]Mm>l&YF"^aF+9&NPV;bQlq)[C9DSRGF?#0";)[sL\gZI)4Yd]S-77,<@^7EXC-J+.OM/D,:dSKD++/%>T<3l.O%H2IRJ9?g5-f"Ac9*r0R)XET<Lq^5[uPiK-F)Vej4_(akoi\S;k"ssf_9V=q$ED?$Z#R@52G'b_EC)q=W?]b#biDuL;7QE5QHYg0g%<eFm`>8!R%2.>u2TLkSfP12ge;j*6$B8bA=a_p*q9:]!LrHm$)0?#?C<DuV6(!Ls1#?TY(AjjK&cpgT[B>h@tQn]b!1.F]Z_9S]G%=WW7nW4\-rp0d);9;W[HeUe/cNj6TYjiujgS9I#sR(ALlqDs`^L&#V:+<;)@,kGIfWS\#/p4X`:9cjiTVVd6mqQoe_9Hm(C6:o[<%+`oY9=HS>\Bf[C3#Bn4CMBlJdH4YL)bL+thpBZBs7bgl7N9lM5bW9>eLmj8sd@TqbBJP<(fet0!7dd#fK@aTCII32l,tUSX"jZd`%8FF9pYBW5)54itg#ZK/Q7oJ4XVY]R8\\;6g8RJ#6f2j?Sp!l,?q?i]/abWlpM@d]ff7X_.ldSuq)V12H'mH`/XL'*4+l5B&S-`Mc%1WnHFlu]7dj\E=Hb3R\k+,9cXoX2eNDb2huLU4>$_G<Mq3QW*jM60,VlYf+kbGkS5Y74C/pM*qh]WIto:6?un'CC+5`mg9]o>RS+%W6</XW!DiUj$d+_6np'P\ti+oA1,=mk1C)lM:U`Mo(IZt:6TbRaA)hX%bn%iDRgs4.-oG,k7EQr=0#SF-;m(9F)cU^juWnfS8a;8%XK6t@h_QT7+#THm7!hLPN$_U\-em1u4-u1Sr?h-*(KqH6Rju:Mch0_.V`^94FHm`0He-`#prGMY]';/`Y'PFd=.Lhi<MMX8aZ4C8%Wr>Xheb.#43`L69BQ4:gh?k4pO>'oQ.u1.-/>_\!m)jA:T=QY"rCLLh$<&H&e28n=U9!HhVUqRSY<,09#j'_mlFA3%2FrF(Cf&W?%m#32%<G[D26u-hWG^I7hVo^r8A?YK^S3uts=2>1=XI`?t"qORU/2K`q\U$00m:rPF2X*t7cS"r<P'T0PqOTB@:Tqmje(Y7aELKS%%Jo&oKkZk&6m,!$N[1l\pnDJ2a$#(Ak3Ldq>jN.1S]2a&UcNJLU$uui&29mLd/Fh.[157m@4s[<6Qe`AP95#^@!5[_&_-ip1ce=5C%UUF5>0]!4R8I-3P;j3_4OSTrY9"`^69&V@Ul3'8M?U:us?lmT..570*mjQ.C^/7bFk4qtU#g^^n#Fo4Nm7_Xh]PEOQs/dL.OLH!1%FGcU=::1VQl_&[kT]!];N\$KVrORX@O)+Q4#=X"^Y(^5Zi`BpkEsDlOW3.ld#DHU>5loS5D=_^9n7(7S-WVN]+aYX$>'^B/HQt_l%EkCInp_6pl&@i;^KjjGBoSpsGE(3V6D!Eb1!sOTbC*g+6$;r%tcQW8X>r#57J\!--AP<Vr[C2I3icqfamp^2jM'fH@.6ot>h.Dd@%NBo0f1'sbXDKgl'OW54/1GfFNb2,*b.^6=T\SmCX._*OKGT!i!o272Np(Ot]@)aqXN+1EE<YL:?AHCn6YX!AB!M'=F_:1;NKQg`n%_6)Ltou7Il<^=CY1U9l6p[si$Ft;"](/_Y40p`=?fTUo`NWD>P$A;R2kqk\V46^@7S-5h`l=b(SGUJH82ab#[rTd"^/CM2dlYptq%V2;QWB;QO.GF@"\=!mGCa\"O.2((9;"PeK8L23BCPF%tr[@7)9m8A$s8j<p5N#LkhR#h",31POn=9?i0LBnkQ0kl!)P7`g:1k)V!%.\*B9VXIum^m/qC3"hi;VDL5)'3YuA1,$`o'@BUC\fq5iDe.U61$+`14n\%opqM;XlBD?Llm^n,G&8(Wc&7,"]OhUS"5%<H/'T/e%HomYm;g]A5E+nr@"e\u@Z@=?IaU(U>`'F",UG\f/4#VgW]+[S*RXgY3774@j,>+@3+_ic&6Z16*&ODYl/:qh2;YM.e*`tkI->P4i%dte?k)rW\%kGWfNC>`8R[M@Jp@9C#NCon%7"6bX'TAkl]7eFC3M1IbYQM]-]e7F2mM+rU]U`.srRSu]pK0@W4ZnRYt5&q<Ij$9uD%,H=:TCIB=e+[ec]B?8>c2^4&5O$sWJ8EsKtgl3L8"dc=(bY+]\33Iqt5rj_g/&t+-Wqcln.+Eh+;WD)<,[9\pE!^W9KaDGndIG"G%hRt,b$#_G3Nm\X,AOM:\>0!qCWcK9iRJS*V1+,G,c!1jSVrk,f4`r"ZX(/$)<`/([24+!cL^H:F\mn/!R!j'iA2Q5/5tJqOV+cT_%*"H,YbUjD.\?^LbZ_o<H\:#9!?k$XP0eu(jN7?38+2anCl5Rfu`-i13R?&LMB:]AVb.SNbGT_cp3p&%/W@9f:m:H87<P`5m49jef%\@uuu\8&Tn5R"uo#GIUK@E>H_IY^fpo2W;83flDjR&d)a'WPll-"Sg">bdg&f/iA&;GD?E6n.^K6qufRaN^,#,)B-07F5m:lC:/[%!37DjA8PmQ)F_J\UY5q5*3tXNN22m0)/t.GkCLg8],6]AR30;bcTDppTaC2u)s"<-[=gSC;b:\n+BL-Bg=7h\1N_+e"1aXU&#(EB%0]_rW%1u!rV]t>J,]t_Jb;+CLU>V0AQ5OBn"hTc^(m<L%qp_=ERlkGP>nMhi\jPM=C\`%,7XQ;\LgR"<=)7VQLW8ID`Vjah(mZ0\%Hh.,im(;1u[P_Brq,iu=56KS9g>*7r`MZgQepJ9@@$`5=bhXE8r^k^>`5S+])DBjnm-r/m@;d$!@PPSO<oU*mIYfe9_ooM2YooR_%NSm"FVc\>)gD^m)d21HHldQ??BA[_6;lt17>"cD*;5Vq&]h,>U`:VfF),+VNMG,&b?AIKQ=P.=,JY'3$0o'MAAH3EsD^-"TkfHZ>%%9Z>3W^rJ(C>!]VW#fgDA30.UO-+[&.M(3Sgf9M\-*m&!_m'q8,b'fkb,htKa_\NCSlpG,PSo0@\0Iu"N]@cc->/RP(Yj,,SE!AS%O36e@I5E&?PZ^,<O+r@j`gNOnAC5t84mduTfR4:MA]%50j>uS6-K++]<,O;2f:g`&]/!T.N#Bi%@\N&q1%)Y!o5RjBJs\Ts82;9^%O;Ve1OdU:$3A^M`-o29aE(<gp*-2m?:!P&'0CdJiEfM*tBi**KqoX<1$>[(PLk_@6/j4+$Ko!:ukAoe+U!%0ndJ:ROm\;,XNG'qY%OO<-(k%)(RHKUI.W[S^;bZ]p^bbiRcRH57]C;s]GX!;=l*HQZ%RTs45^!Kh.b4X<K:1J=)gda.UX/joc+W4n,L%(IpQUT,7_%=PM%j`I',?!5VS;qD4l+R+iKiL8l(](UE)P)?7sQ4&Pc()<6?Q^]ekc\ZZEd0U?EOAa'1lX#cr`nO/aF/kbR7^ruIlYq8`7OAjmS'8jf%bdL>FZgEp5RK46TC.;[2W$A;5Nk($n9s15I>UYT\A==6DS+];66:K]YMc+/s787CNjlXbm%&26F%(Zm=SMS>Ii70fR]Wkk@;rmk"%WdREE#O\?IR5EDF1D^J/hHY6Z`_-qVL7jHuR>NVr%\ui=j>(Y]\6=,UTfbW&WE9^KC)C4a?$3J)QP.b!C,,lE\#387&7pT*d-XBh%S7BhFX2oSIXX-Ft:!RXSgP=j4i'&qE45Y<IduQQ`bN@lXeFKO"AGY-l_-a)!=)7V1F0bDNGVq8+FEB(%PPm,Di4QA_fQh7B[1e25%VseFt!k[PgA[`[E`H&S*4+;lH92a%.UgrkcoZcbp4U+=7-.94O<[7dIUi#5<,Biq3$er#oM-/J45+Vo\QC4=,j/llZEr3)^5Ju>?%7$[sGj:%.='HO%Fe1"V598PHIZMSN_J">bSSJ_J#*15%gG$MkO9qpQMD'G5!o="3M8JEZJp>im@+B$CG@qVBMGGZYTj6BN5!Y2^$%aL@<Qeeh=G5+an\r4'fK03%"HENe)WGY-81gYM(o5a7.LSG+'G`<X1Dq#Cs0UWa7IDQ`#ujq_[fQF(cM1ff_!f+.`uJfuO+9AbWf%]?*=*gY<>3*>(d/EOAaQXM%'bRUg9kP'>ZWn97U7J3a7%V+S`>Y"J&<V/95n)&gaNj;@>e29cGc(JZ+R`R;3c[7]%M+`hI]$*@al%<fH,!kWTB3-Y+eT!#b3aaFR=SBr0XC>T0rp2lEXrOgVUU%<kZeIBIW*;7QKQ1'XW`k)1(nB&!h`TU]9*i9O*tOn%1Z\nU<cL#aoJ%=(H.gm9.J[Fj&LmEHrAAD4qC?KFDFnCJkG?#<QG/n"Qp9flO)G#YdkghaE<TmXc.P(@kp$1a?ifo.[(?W\I@JOiM0VF*=*%L]Xl+%&%XRT$KB_3Vc0uE@oBZLXE9VahbLS?abQ#UiZa,8;fXoF&Q92N,su]aM]7HRN<IbQlNHR_XKD+BU%*-X`5i9"R&QM*6rcp_-$=?n%>cF:\QlW8LBm)2f9e*"=SQ(e6JWBHR<>79h2^smV8Eu^R_#gYcfOW6<Af=O_E?dS8j`ToR31W+ZPLQ"k:6)l?a(H^m"-L%5gIcAr%HB@Q'E1O5/Xhq07f*2u5>9T8r--tsJ;l2"cjht`HEjc>&Tn[8T?!5-fP7":1-WQrpTVFMi'IBK"bjS/Ks#B%#(+c\YN(;H&k+g<<%gfC`PJ=OONKu<.O<qY5nYn6(n8<.tGZ@&(4.&>4;8Kk'nUqR(G;XZK2@X)rsH^(C(0dAd0coRMY<?*rsOSX,u7Hsk6>#R@Wkc/rl%P--j/`mq<?<N@NieXF[mC.*cY.c#ADcB8"^E&pru]f8S=eC0V78,Y`/LoK"I`GfB+?"[eOQ?)jV1r63<qI2jG<Z.U)H"dsu4iM2X%'V](b<M]&TUH*H0"]=DQ$GnT^6r^DS]%(>=Z.:]!N2GO;Or]2E3`KHGS$I@/f-WmO*BQhUebaEdVtu44HE&&9WM^oMmuFr)>"u/k%em))iUWKpda`br#c6`-?[nS?KY+8OUqL=Ofe4UK4M'"0DD*[BT6IC:`-$Ws;APO.4_/H)0L?*L84uf%;G+.;8"N,UK+ZnfeaqCRh%+qm:c,DD@#OS^"oZ-3o`,?2Mu8rDZi\9^0WY(CpY9i'#FF-ND'-e5$<T;+R>&1+(#M3R4!aGc@bJcuCd,3+cmQ'l;""fmXJ(lm36%bDmoU%`*j:FC<1Z<Y$N[J.-cP2YI]@c^GJT">H3o2b8JW!?qO8('=OJ",@sl!qCgq+%tQK]e;q@pTj5j)[Q5d;MZqXB_E'(P"e,2%S)r5IO;A'3TAKe@9ZWD'c+Gs,fatl/"n3,pO<5bu?A2f6I+ekI?@k#0I#sEC,4^\6@@9<TQ<@E:0Gl`TOGdg-[N-4Fr@pTs3QP<u%>S<V_r2>193;<`Rq:ZE5i\7\86-AJ7`o-N!`g^J\^u7;8L)be1)Fsm\G=N[hB1T:5CG*!U?"6pRr-jW0&WqmiU8[qE7$&/*>Ztme%+TpJDh^=L/IQ7/KZ&(tKLiaNdIO"A-!!E</]6Ef-QB\th<_g(eZLlY&m*U's\!-;6P5g0l?)Z8XGNj.cfa>G]*[DjemOYX:FU8`V%`Z8Uj0+eL"Hpq4n(q6Z:T!m^o(pI6;YB2aB06;%Dm`+VKd6-tUlYqHs91mH(nNg4.-2_'@+QIb410PeE#(0S>.+N5f25f$TWn)jr%5sD>TS*PKZXRIMXC1V*'Fc6WhiLFHIJfeM,#Mt;#dOIq8l4ctNH])Df1B+nAGGP6pm28#k/pMm,(9t&:C5JWo-;eG+1IrFIp"Ki`%a`<5aQ7DgGAX^,H\U+$99WEob74*'1DS0"5V\2Gf8AVU/*0\8[+SQN9mA3?`(Cto/llm=0JajXHSe_\r1K:<4.i'3R>qW@o5KQdU%&ukR\f;@3TM=!%^DoT9!fO:-U%@Q8oKrQ[uC"5WfWF*o?X<NQbTS&RGQY._`I;$&U5%:+GB/=\"j9o!0Ft_CPh?BmbLsB=$bLhc,%>fT304&)!t?6u`%C2b7m&9e+=&dJig>[a4#$"iaRjARUX$id,:A0WGm7dELs(qWGE#:E<YhdoQo[0-pbSa\V.h0Q7OVEh6BV3Vd?%<j6Y>]J"OrR^H)G[c[5a6-Q60i$g69h;%af@:rmao!?j]!qT9j7+d7U`>`i98q`1bR004^*QYRJD++)O=BHBqHf?V^>BMT*]t1+*%?KTE%+J#^/ARl7\r"ReY#-H1H.Q>"mQg?JP2]2l3.ce4>YCc/5(\N,Jl?Q`s%JZ%j?Elj7Q6a.nj4r-%CLEM\dWZ-''^WXmj@^-(%E+Y:"a@fhi<''JPC8X]cEHpd7M](IXlh><&<d@IN279GhB21CE?YArA+cg!QXNJ_1*5Bm40!7o=H-@`//0A,=jPYu+D^T_eK%[sX%`=cet8XuK8Z=V>>[CL(FSE]l&=7j&`elb"qqWrl1c87[4$-kBLpRF4lA8s[jdr=U/1M<:Rp<jtOE^l1D1Q!3C61WXn4suuKYk7>0%;ddLRBAK$<iOj(H>JAS%*c,,.4Ji!]dhaDb52aC",O8H]P]W-'BlfM;lal/]9)AFdcsoXoG@;P-*.(K1f%R^V'(9/Lk'kG92^B.5%332uPic(8TH_6p,IloC(fl0'-.>d*RO!T-]a`tBQ9"q\(#:2UCF.Q'4l"'XF4-lj'-^9sKda*#lr4b+n\%qjH:#W,A(>h1Hr^hMt%%K6J'rVo1!^O3pLM!b(.@fg3=n)*R%s7+hQ^ClQJqh:HK_7anC51_juqs7Gb5CRe\mdb0^k\7TdUr&E&(a%7Iln)XIa/3T$-Joa8%r^hNaS:9oV:UM/O2*8HF%6:;`Li<)n`SNhY%h0iWP.T%1.uNFhK_5.T`N])4l=5&;bO^@hqr%'UEd'G&=K3'L$hri2P1fC(J2Ztj%&R]_#"iKPlN.KcF2umW]o+.L0ohB8^1"[H89@$d3ADtTHaJ3_Ui3OkN]V\$d+qXf-lN$dMK!]hsCX8gJQjgoHQN4Q8g`mWD4O5R(%+:X1pIsamk@R1g*rDO-+`js#lqXu]Re=pmM`1Ge6-UnIK#V?F38V<M'*;&bFGq@:7DgSdFou"If1FPp([FQjZ+ieDV#ij+.-'uL/%$"Z]i0S=m<7>/ltmk<R,Z]>b9,<^n-QD=/7Jn::Y^]23\H<!+h_2ihhiMU-)4kLNpZhhO#<_J,O08s8Ja?KjdS)_9T1HlZ6_GdZ8%[q@uCAAM^ZdT["XTA_&Egpmt;O=3Uf7<0!E\]&tP0F9]=9cXbu?&1qr^2,'a+i7.bleRUtHMjX9]@73Kc>gAnr)+-6pG6=3h-HDE%==`h448(9D&l&O=%U7A*PtH^$=4iF&3Q%$&h%0D*31`dVC>]?G(BEE`*'h#lEC@=FfeG-ZjVC&m=:7A>BF%UFI"7QSVdgP\?Tu2m%9tAn)P&PZgQOps-p)i0%N2-(FmJ-7h-7@?(YcXdCZ;jnM`CO[P@:Km:EZoV':AO>2CYV>Q^9Aj!WnmB>9-F<%'#n/m?Kes33jMLU%@;0Sq(cklO<3DbCPau;N0EGMRSR]uZ/XG[Ma>?t,fs*PN.qSIL"[o)0k^1-O<(*7s::a.O@/NpH!7[Tdf3G>u.0+/K_G!,ta4BB!%8uK]JVAP("5?l\:rM*K8R81^H5rQWS1ccr>+J23j`?[bJ$Z&@em5qSn!g)qsbYsJIP!mZ]Ro7&?.9TbTf=kd+iCN)^p5J@2%)UVN%F/Tpk9XaOV-%^k^3D3YPn-K$29?%d\84=hK:AIZB,c-mtIG5"+X%B8s05a*5bJ&Ae(sR3Se@J=-f+?jp,]7&a?)Nk-pRsS,9I5n:%-17aOmBBJ&B)k.OLD>/__'[&''8E9<[E8)g2%c'6QAu%X$noO92<4PMStFI_hN*h>:hep1fg&09Q+a3=_>eCW!\*e9*Hb"(^+'BK%!IE6Ih_EoPCXnN?Ob4,T"W&0a9/cujoL^_aKN/g.H7-Z(O,?dpo+)QuXL`Y'LnZ%?X&.hWQ%6u1&1Rl%#K#Z+PLA[tVMAo$3)h@2%s,.M?A7ts4>Ja`261m=[AImU)NPZ"?<6GO37K)RL%ScLg2#P3,I=DmAF;^E8IQ:p(8g_D6E6;-j@D_rC_C%C$7otJMLAMc0bVO;_%I%!\u9<a1ACM9\a3\luBj=SuDB:dN>HIW1YjsetI[`fFJ<a\_CPn7Bp1Z[jQV(8&gN-O/_f<_:q/`ApZ[-31<atRDg3KQ`h5H#?C%q=Y-<hr72/(-[eW)d7oNrtMQ!C>5!A!1n=0Kq;))QWn&F,(k0;J3DU29#d8*aHXfleE9-;[9FdE?.l"8;FMYBF/"2DTj'nhp>W\.%q;s,K%s7lPX;NkY`ecB!qT$'u\Tq6!-0^RV`PS4'Da2-MVi"aB,].]JNCgt=!Gk*$mP$)?B[!KXK$&qt[!Fod?1:0nh5[/nJ!aKT%C*:ZEb_AV:)'9u$#AdbV"2AoEY;Wb*S3t61'>ZH^iW8-"_:;&<8O<"TfR0c3[Ca2G%KJ<%H!_K575D_#djHRDa:>D:IghYe*YUgJ%fD;S474r`lCu^$SbT/rPUB+5#\B)(8H=(,n<.,;u[u0o94qA_\[1j56Era(d+W\CCbeLB'.I?-g3Ye3.5]/c\KmUajriF.*`Y#E0%8RY"0ONB%cGU"$&BaMVWG>8$20s"UNH`BX*RA]25\4D)KQAA_M_b5Yu]$&Sd:Onk#i2)r@$W$C8m"G%S%:uFm*R<h'^ScWk:t#33%L/6]hrfMsMa$@89ha&7FT459#eQ`%H1JC6u:"LJ+UeSP`7-=Km(_6LjQbcpMUCdgmJ^C^mJQ!^?H79)jDZJ<?mdRo"+:O6R7$o5+%ihBD;9gu&gf7RC5X5Z-11jLaFDF]lR,`IesVOFC;1Pt6nR,g'"C!!3W7/,]+JCHR[KI+cl-mLkF>+C_S/SDO+P_MbdIN>p4(]oK3%,Em-eC9Jp^Jn%IOf]!HFFa\u&+hW-%P=2Z.:2M-E+Q2[n"f4T)AE930S0U39i]rMR5*<;GHK]_b;fOo7]g>7X]Hjsmo@?5f)6YAk%CD3,a=HO%!ODSIMQa>L^_R\a)qDj-jlC([1`tB'DhqDFG9qGC4bMRc/O[nE-gI:;Z_+AM.o1tm:pCt@_cc9TX?H*5\[I)Etp,;Zh%'.nUgrLAiZMpm\HHcVFE3cT=/5M`.<0pI4kXVp(d$Fq/,WW'V1ZIHntj)a37QR5E9or0@jUujUU-Lc/a0<bn$rgdZ,:?]9@d7i]%%Wi]ZN3`O?tTduKkVh/FN9eB_fRTefsgOY0Mjft26;RgYAN9*nrOB/h5*F9"k!gK[J*^peLZ^3ufp7)B7mqH,81aL*HJG[bdM/NRF%LXb&/]8H><*tf*QTm[__5DZ!`Z4?H!/+fIm!KR*!r)N+N`6+n\B#:.2MBei1\bPq:&2FO*n?1<#jo&pTWF<d)+Rm3.9RD2GT1>e>%7>0jn&KZYoXd@ec4iLj*'PZ+?"\iF1C"-P!Pf[rQk)^NL8k_Wks7hna8'N=!!n^GJ9^*Sd,-pLaA-O,M4EAd)6/!F87AVV@qV_m\%'+:"cD\(K+kY'VtLmq-ml>%h2-rkpKQq8+p3c;GhQtfnb4`4g4QV76=W`D#OYIYP4V7reM<<BW(:XUml0,qnP<P8pGdW^Tc#KT'`%/Z6f10P6#EPBWYrDenfi!.DGFbb-F\3S_j,]@ZP]F,Y%n4,0YXhfc\WLh+k^j*Lq&U?jrQec!,A65;[f9md(,i?Y^eXBT8G5FY,!%G7onl79>-p$#L=WO&p[*.qRer-ObJt4ug%u1rG1<[1\3WMg-`&4`9*,2";Dg1)"'e1Y%5oLTRW0+OQroo9]0!rjKkhSqWAiQ-2G:%YEA-RidK"0D)j+='KlZ_hKL0t!T.N1fNo89Y6`mO\T;Q=r2;isBu1XbWMqOm@hU_HoM,?ecf3H&[?j`3Gs0Hoe=*_uBhG.rFMEjj%%mNVS53h#'B4)a/AO`Krg3>1D'BiO&]sc6A-=VIk!GQuFV/^5+iE.!?/s^LL9B1U=IB8D9.bJ4*5[VaXk+51Lb6B'!G,]TRFtu3Y%n3)\L(S7IMLZ#a.:M`,<>`L)GEGS8>B<"K-/iC+KK%?X.<%Jl?OpK*e9E1]0:D%#.0dBCc3MVnQ^Rj)g,`G4,;l24)2G4.I2blOD%M!i^M1m#0L\)&#=58/[n.'\T;#.!YDc!L"A7-8>XZo6AN!ZSW:m$TCCaKrcuBd%nd<_<Zdga&%C`sY&rfWq>cm2>m=ErNdkrJXel%\GY9&0`<hkG>+PC#oRcpq;Y\r6G27o]'fCuk([dMp+pO-NIZ5HD<f+C><I(Zc[ts8R1h4+l/]cZb=r3=iR^6BHQ\5(\QfWZ!3p6i%@\nI"k*RoYP+58Jq<V6T[8>a9X?Q9_b?$/8qFJMb:LrT^pYL]oPqL&440ZY+\4Z)c-"_LBju?12-5]/F(EFlk?kD'WYJY]d)3^Pk%'`ccX-J;BDNd0@BhYY-6CjD6pXl[6?_#bo_gX`tnnX[\Nqa&rIe-+mi4!V30%a9+RW2\TupK\?)G$?j>fmO\'?s;E8,:`XqU+`hL%k&lEIO<9n.Z2;h6mCkBrD-^QQ@GZEB(e-N0h\O!K]5J*FeQo7mX:[U$f=Cdu8BfV*WK&51a/m[JUtC,\fWDdQ/Ne9B<RTF=p)?AA%l1WW8hgrc?)deVo\)6-5Xj(k_%EXtus4R)b9Xd#Z[bh?,B*;p^iR#&eZ`ZK>lFP[";@fC2%G'o*,/IJJ\)3#=*g_&;g[EK?)lHd1%oBeJGm4G$$D8.0oX>0i%ht]`,LgQ5@5.:D"k1KAH,9a["fmUp@[eUD$p>5ROfAfMm@4mVnH1UICQ$;(m2daVp9k.U6iOSP46[Xk`%.Cm+O>Ajf9X\L.rH;hcN]_)adYcW*lZ1ZD0D7r.f4.kis?<6+#J'1F!c]#DuVrC##G(#>b7M6`6IXq&&TD'#"'tO]>9Knr?&=C50%YiV%#=2%5]ec1IVj$8pTIltmX;.ZeXKZK3JW+'ZmAoiG#QC*d1bhZuUY'_[&Zc:-7%p'8m>u^:(q:Nf;LD:I.cb)9`NImT1ZKB3:%KK08LhDnRX5CmW1ns:FQ*T"8$L>8*<)pq8?Z^0u<7%qbWbh/R=Jrb1Cm4H%nm/:F"#kCUlQ,9/m^*He1Z]_<V0R]qQq^8dc+CR_:%HIWIpoYLY(<#O^*9XP@#`<b]ppq#Oq;BI_,G?j`*Eld/IV[g?T!-k86f*aks?:cjST+/p&PtI%n//oMu2:YpK6'B,)(^&/FV)#dJ%6$V,I%dsKS;^!ib;c9*tVCmnke=KmO7M<!Mchi&5)KFun,Y$B"&WS7A;CU^iSnKEF2RuI)h^Q=jGFc_VoBrX9e&Z\%UAr<0q.s.Y%W:]kj.LAQljb4DINR'bT&C?a1_Vk%j_AKS_kg89dP$_AE,k(@nWW!hMK<]^WquP76Rf)t:.Mo:nJ`GB(,92'pSBcL8!MltWBSo;;%<V(=3Y*p;^E:G)6P'!a7;0ENoHdm.>a3O@K2Y4eMH]<'3Ef$D/qgkgb%*Ue&F3,FlNeq:eKL#Vdb,LaL7fSErs,LdBN[%sXQMBKM%iRMqf>`WB'_t7%J]8Ss8)TJmhR&I(/F4M8Y]Up2r0Q+%<,)2M8@3]d65oMDK0#R`j3uF8(aVmJPj.#oYUoc4=`LDWeL<'B4UGIp.%"ad:L;irJ'[b$BWJK[2c1bgbNB4AN4%'jlc6A/s'Fmd9t*O_?]RgKH>=A:EYr&h4bZVMdoT7:'Q&t.Sgg]i_hj%(6"0Psh"+fuE9%5dU%r,bsX&ke8\6H_3rmCDJr/V=25#4_^_aj?`sHgd$)hSO\uE5%?(PhkfY_0T+HHN?^4&)jcehFU>nj"]C1`$Hj.$.s,'KUA[`2%"NpI<qpU8DPIuc'\Qb0H[Rgc,O+BI*/Y[@Y\Zr!&"SS2eK->P7$F;&dn[0o^Ige>gAetqH?*^W>2j:08QeM/6aXP;^bdo$Di)XD-%4M/Z,4rbq6&pPQg(#-Y*QZ>/MH@Y`>J2-bY,7L0ZM!G[(!J=AO(P^!peVdD7J(LoDo;8t=_QE+:F=\:jiu4%J[I\).UHGSi$-/*3%<Y:i!;Zb74iGr@&fP`pHS8/JH45=Li[G[GfmLu)TMHrqoW64XLm5i0lNfN)hqQ8O>6G$WkP^D[/d\Nn_CXW&4ij*HiLYAlaM!G(7%^3Dm>B#th]Qie*8#C/$769niE7)sl<l4P,YZN)&;g8N1t^gkjXlt"MoEkNETYc!4iGF]-76:Dm4j\g,n(cC!g7rAiM:a6X-ql*ZC%KKGpAPKt4Y+CA*D0#Q1BQ.[[[EcOY'l22*-"_0Z;:(]Wj&JfU?B9Q?V]M,Ffa.9(E-`-ZNi52hg*Q2d6bd[t+QI=%T4UB8D^4X`S%Ui]UT]79W:p8mPs:'=98qAR6K2(m9EAl0Z]q%fc?Y`=/I_>`hb_l6MC)Mm*?i-YC*K#WFj02a+G:1kB&cgOK"c9]75VSbfXB7IFE%8ZeEQH97;N-"5E*EmuKPl$0&UWdC%aVAj1:'!&0GlVnm1oBAA[58@'#iTtupbf1StEc*sI*4kK!>nLr#!J-#LeF+I_,6tbpA>eti%Vjr$;F!NXgaT#:!D]\a=2Wbj%f)hno)TCHrPD/5a`U;d?2$&QU!BnW?KE5jG<N^gA>?JkQ+!Y%5;>)lpm-O>(,ppO!3(bg"&\4m<%+hODB4`$L.%T&n2A=lPK-cCApR'XSDE\;WaM3gu&1YaFg0mOYG&(/d2T0u1*K#KGNmbXtc<TB>dEL0i+]&th0BMNNH^%BO+:3TC>%f,,AsrD&_T>!q]kEF*,To2*3\WY/GYT/#>qEa"2;XkeBi<jj\>pKJ4A#>$TkV&&NbV2CA(BTKL1V<=4@'<Xgl@tdI0GL!HGqm9=b%ZcS\0bVYcYj%d%Db3R^YaC3Zhh;?p=!g.tEb]aX].A;7\;[hMWod(u%</o^F;A!(DD(Iic\OCK$^m(%M-9\+Q_IK3I7,tit@u9qC%!g2LemV\(`Aa'Ei=mW2B1Cl?tBQ$Iq[Nr_@V1j^mL-bE-M+UeEM-TYT)PX?9iW9n.1;:Q$*i/%50E8%r>QV6KXm?\S?M'1jd@2U5%BQDm`p$TCC^q,AA:IueO;`,W(RSG)r]!kf!K\6dFc"2.#MH)Snf$%ZfUEi"*i=VlJI0^?*Pkuk(q;u1l]LcN7'1;U;2hL#,htn17%TbRu(cAKLJ"t"feO;L\0&V?)!0dQk[k'j2OFV\FIW)SnMj+J.@QSr2!1,G;XG,FU\1RQ7cL9[2`+1pl@+5sA>[/Ski4tnjHH&s=q%]:6Xb&go@jK6bn`O?>=Oj-1kV@.]_1l?4lWZ*.]tnsF"6A/Pc]X6j<.PW5Ye&-g"r;R1u/q_i8K5dB$$LT;^0A2%mS/E)8m-(M\K%9/tJ)Q8!$?[^cuCR"Af%)pT2bNS&Nb?DGie$N>B5HAtf^<,*Y[lHIgY`lT`9`*C`'g;7iuB=@;\W%FMn[=tHS9@e(8@eqNkg4rQ]%P:=^ADTU>')W9asScBh/^]tij&@1&%Enta][3bQpZA(@l\gaOd,_6\?pnLemQj*%G'_N'k3YPW>S9Is\nY]Kj1DuC!#09eJ>%_a0%40HUbo3d!H)bec[Y.ofX`KlSj\9s=`L$$*,CJg>-jU<[U)PgW1\f\53#-!\P6>W>]L*iJlqa-JY>A+(2Ca_h7ZG+-@N(H6\q)9'-%*(+"H\B%9p*1"Pp/$:_m)d[s:/'W_>[<>_fE#_4=XpNLn3!mD16,UgebkBXEk*O?IZI0k`N,;mDV*W+ePo%M/Ht9)L+Ae.V\==Wb%_=&]?$9p<n9L2>a4dn&(4sPtqRCE+5B3:@6W:(V)Ed8QoB`C6g!/"^qSFJ4Q?'fm'4H-<q4OU2!=d_X;!@/;pO<9li`=DI&;#%MW%]b?Ur1ktP%7<V:8;VjcZ19=^X"aWMQn/F)OjVUQU++/YJ6s9-A>J_!\]6Zq1JYr!?5C3-,#P7>H!VWk</^>C7^pI<:ic<uZ`#[K7%`hlu@HHY1qpARX3EhF6qcN`N7pFY&3Nk,sP5ASY&7!,,Gdu>tOO+([l`j`D6g]RH]4Ta0p5kKWMcim?!p505:\q_*&^1+S@4^7on%b)q,I#9JOq.BsH83t,\)/h8^:Y&#T>K(D>!+Y]6AOBJr.VBNa!71qXZ^2WoYKOIQJ65`o:&+r$'ODG/;&SbM3D7Q,YP"#q>d?=9\%LJGCBJS>35!"`H^VXZ[HoU'Q>3:\:K=J<2+i`5"4".FIR"MfH?)@hr?aE<>Ggncmi\QVNkmZ;H'AkT9<+MPA<AesFbgAraG9;4Bi%>l\*aluqXr?-<_>i,0d3L6c:j&s0r60<C\"bl@5#^j$glSJYjFeYU(T<9T'Q."Ldn(Tn^d$d0BA@Dr>CX-0V!Pe*#`pghiKL(/Ah%QL7m*@eFK"$OBj+`2p*If%%0fW?JR-kn(OCSNAuL[7.jh+u^=%WfOtW`m-7^2<58A&p1*tp7Ab8h,*9gNQ`^3GS$"n1P2/k?T)#@%0b=`ch!4?^'8VWR\q@bW]CO\>Wff@FaL(Ol*pSC6HNp.#cX9O%K)eN7q8HIOr4uKB[(U%M`ZPuO^,'p^F9#t/n3nWg;p8j09RQ_j%ff<`E1<!?[-hk^oW][[>P,:\J/loh"F^YLR0AlKts5i-cs)7oprUom!IJ_4fqB,S6q="=Is*FS.s80:?s4`&#m4Wtb:Oi>`^]!?1%s7QD;s4cGGrStZjomco,qd9BfTDnXns8&pKqsViahuE68J,>R^rTCrqmJFZrhuEU=JNTQ,n\>"`hu+YsrnIGX<d[uC~>%AI9_PrivateDataEnd