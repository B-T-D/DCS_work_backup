%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x005.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 289 215
%%HiResBoundingBox: 0 0 288.8379 214.3677
%%CropBox: 0 0 288.8379 214.3677
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 5512 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF53FF7DA87D7D7D7E7DFFAFFFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD09FF7D7E7D7D7D527D52%FD047DFD0BA87DFD0DA87DFD0DA87DFD0DA87DFD0DA87DFD0DA87DFD0DA8%7DFD0CA87DA8FD06FFA8A8A8FFA8FFA8FFA8A8A9A97EA9FD6AFFA8A8FD0F%FFA8FFFFFFA8A87EFD68FFA8A8FD0FFFA9FD06FF7EA9A9FD65FFA8FD10FF%A8FD07FFA8A97EA9FD63FFA8A8FD0FFFA8A8FD09FFA8A9A8FD61FFA8FD10%FFA8FD0BFFA9A87EA9FD5FFFA8A8FD0FFFA8A8FD0DFFA8A9A8FD5DFFA8FD%10FFA8FD10FFA97EFD5DFFA8FD06FFA8FFA8FFA8FFA8FFA8A8FD12FFA8A9%A9FD59FFA8FD07FFFD057D527D527D7DFD13FFA8A87EFD58FFA8A8FD06FF%7DA87D7D7D7E7D7D7DA8A8FD15FF84A9FD56FF7EFD08FFA8FD07FFA8FD17%FFA8A9A8FD54FFAFA8FD0FFFA8A8FD18FFAF7EA9FD52FFA8FD10FFA8FD1B%FF84A8A8FD50FFA8A8FD0FFFA8A8FD1CFFA9A8FD4FFFA8FD10FFA8FD1FFF%7EA9FD4EFFA8FD0FFFA8FD20FFA8A9A8FD4BFFA8FD10FFA8FD21FFA8A87E%FD4AFFA8A8FD0FFFA9FD24FF7EFD49FFA8FD08FFFD09A8FD25FF7EA8A9FD%46FFAFA8FD07FFA827FD067DA8A8FD25FFA9A9A8FD45FFA8A9FD07FFA8FD%087DFD28FFA87EFD44FFA8A8FD0FFFA8FD2AFF7EFD43FFA8FD10FFA8FD2B%FF7EA8FD42FFA8FD0FFFA8FD2CFFA9A9A8FD3FFFA8FD10FFA8FD2DFFA984%7EFD3EFFA8A8FD0FFFA9FD2FFFA97EFD3DFFA8FFFFA87DA8FD0BFFA8FD31%FF7EA9FD3BFFA8A8FFA852A8FD0BFFA8A8FD31FF84A9FD3AFFA8FFFF7D7D%A8FD0BFFA8FD33FFA884A8FD38FFA8A8FFA87DA8FD04FF7DA97DA87DA87D%A8FD34FFA9A9A9FD37FFA8FFFF7D7DA8FFFFFF7D52527D527D527D7DA8FD%34FFA9A8A8FD36FFA8A8FF7D7DA8FD04FF7DA87DA87DA87DA8A8FD36FFA9%84FD35FFA8FFFFA8FFA8FD0BFFA8FD38FFA97EFD34FFA8A8FFFFA8FD0CFF%A9FD3AFF7EFD33FFA8FFFF7D7DA8FD0BFFA8FD3BFF7EA9FD31FFA8A8FFA8%52A8FD0BFFA8A8FD3BFF7EA9FD30FFA8FFFF7D7DA8FD0BFFA8FD3DFF7EA8%FD2FFFA8A8FFA87DFD0CFFA8A8FD3DFFA9A9FD2EFFA8FFFF7D7DA8FD0BFF%A8FD3FFFA87EA8FD2DFFA8FFA852A8FD06FFA9FD04FFAFFD41FFA8A9FD2B%FFA8FFFF7D527DFFFFFFA8FD087DFD41FFA97EA8FD2AFFA8A8FF7D53FD04%FFA852FD067DA8A8FD42FFA9A8FD29FF7EFFFFA87D7DFD04FFFD08A8FD44%FFA8A8FD28FFAFA8FFFF7DFD0CFFA8A8FD44FFA9A8FD27FFA8FFFF7D7D7D%FD0BFFA8FD46FFA9A8FD26FFA8A8FFA952A8FD0BFFA8A8FD46FFA97EFD25%FFA8FFFFA87DA8FD0BFFA8FD48FFA87EFD25FFA8FF7E7DFD0CFFA8FD49FF%A984FD23FFA8FFFF277DA8FD0BFFA8FD4AFFA97EFD22FFA8A8FFFFA8FD0C%FFA9FD4CFFA8FD21FFA8FFFFA8A8A8FFFFFFA8A8A9A8A8FFA8FFA8FD4CFF%A97EFD20FFA8A8FF7D7DFD05FFFD077DA8A8FD4CFFA97EFD1FFFA8FFFF7D%537DFFFFFFA87D7D7D59FD047DA8FD4DFFA97EFD1EFFA8A8FFA87DA8FD04%FFA8FFA8FFA8FFFFA8FD4FFFA9A8FD1DFFA8FFFF7DA8FD0CFFA8FD50FFA8%7EFD1DFFA8FF527DFD0CFFA8FD51FFA9A8FD1BFFA8FFFFA8A8A8FD0BFFA8%FD52FFA8A8FD1AFFA8A8FD0FFFA9FD53FFA9A9FD19FFA8FD10FFA8FD53FF%A9A8A8FD18FFA8A8FD0FFFA8A8FD53FFAFA9FD18FFA8FD10FFA8FD55FFA8%84FD17FFA8A8FD0EFFA8A8FD56FFA9A9FD16FFA8FD0EFF7D7D7DFD57FFA8%A8FD15FFA8A8FD0DFFA87DA8A8FD57FFA8A9FD14FF7DFD10FFA8FD59FF7E%A9FD13FFA8A8FD0FFFA9FD5AFF7EFD13FFA8FD10FFA8FD5BFF7EFD12FFA8%A8FD0FFFA8A8FD5BFF7EFD11FFA8FD10FFA8FD5CFFA97EFD10FFA8A8FD0F%FFA8A8FD5CFFA9A8FD0FFFA8FD10FFA8FD5EFFA9A8FD0FFFA8FD0FFFA9FD%5FFFA9FD0EFFA8FD08FFA8A8A87EA8A8A87E7DFD5FFFA8A8FD0DFFA8A8FD%05FFA87DFFFD067D59A8A8FD5FFFA9A9FD0CFF7EFD06FFA8FFA87DA87DA8%A8A87E7DFD61FFA8A9FD0BFFA8A8FD0FFFA8A8FD61FF7EFD0BFFA8FD10FF%A8FD63FF7EFD0AFFA8A8FD0FFFA8A8FD63FF7EFD09FFA8FD10FFA8FD64FF%A97EFD09FFA8FD0FFFA8FD65FFA9A8FD07FFA8FD10FFA8FD65FFA97EA8FD%06FFA8A8FD0FFFA9FD66FFA9A9FD06FFA8FD10FFA8FD67FFA8FD06FFA8A8%FD08FF7DA87DA87DA87DA8A8FD1BFFA9FD0BFFA9FD1BFFA9FD1BFFA9FD0D%FFA8A8FD05FFA8A87D52527D527D527D7DFD0DA87DFD0DA87DFD0DA87DFD%0DA87EA884FD0BA87DFFFD0CA87DFD0DA87DA9FD0BA87DA8FD08FFA8FFA8%FF7EFFA8A8A8FD0CFFA8A8FD0DFFA8FD0CFFA8A8FD0CFFA8A8FD0BFFA8FF%7DFD0BFFA8FF7DFD0BFFA8FFA8FD0BFFA8FFA8FD0EFF7D7DFD0CFF7D7DFD%0CFF52A8FD0BFFA852A8FD0BFFA827A8FD0BFFA87D7DA8FD0AFF7DA87DA8%FD09FFA8A87D52A8FD09FFA8847D52FD0EFFA87DFD0CFF7D7EFD0BFFA87D%7EFD0CFF7D7DFD0BFFA87DA8FD0BFF7DA87DFD0BFF7DA87DFD0BFF7DA852%FD0BFF7DA859FD0EFFA8FD0DFFA8FD29FFA8FD0BFFA8FD0FFFA8FD0BFFA8%FD0FFFA8FD44FFA8FD7FFF7E527D7DA87D7DFD79FFA8A87D7D5259A8FD7C%FFA8FFA8FD36FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T16:48:08+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T16:48:08+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T16:48:08+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwbzH5F1LUdU8wXVp&#xA;Hpwi1yzsbV/rMPqN6llJKTM6lGRpDFcFEZg3HguxG2KpXfflRqNy9yy3Fp6coT91IsknrUjKKLl2&#xA;NZPq/L9yfbemG0Im08m+YdEv2FjrCwS6vd+nJfCFJJpI1+u3nKdZAUZwZEhUjoidegBFdVT31NZt&#xA;NtWvL6FB1vLZbW4g/wBlS2Eqe/JOI/myfAD9JW0xt7Oa5hWe3125mgcVSWMWTqw6bMICDlZBGxSq&#xA;/oq+/wCrzef8BZ/9k+BVKDStW4H19ZuefN6cEtKcOZ9Prb9eFOXviqr+ir7/AKvN5/wFn/2T4q79&#xA;FX3/AFebz/gLP/snxVSl0rVucPpazc8OZ9fklpXhwanClv158evauKqv6Kvv+rzef8BZ/wDZPirv&#xA;0Vff9Xm8/wCAs/8AsnxV36Kvv+rzef8AAWf/AGT4qpW2lat9Xi+s6zc/WOC+t6aWnDnT4uNbetK9&#xA;K4qq/oq+/wCrzef8BZ/9k+Ku/RV9/wBXm8/4Cz/7J8VUm0rVvrCcdZufq/B/Uqlpz51XhT/R6Upy&#xA;r9GKqv6Kvv8Aq83n/AWf/ZPirv0Vff8AV5vP+As/+yfFXfoq+/6vN5/wFn/2T4qpW2lat9Xi+s6z&#xA;c/WOC+t6aWnDnT4uNbetK9K4qq/oq+/6vN5/wFn/ANk+Ku/RV9/1ebz/AICz/wCyfFVJtK1b6wnH&#xA;Wbn6vwf1Kpac+dV4U/0elKcq/Riqr+ir7/q83n/AWf8A2T4q79FX3/V5vP8AgLP/ALJ8Vd+ir7/q&#xA;83n/AAFn/wBk+KqVtpWrfV4vrOs3P1jgvremlpw50+LjW3rSvSuKqv6Kvv8Aq83n/AWf/ZPirv0V&#xA;ff8AV5vP+As/+yfFUNZpqlv5iNvJqEt5ZPaGUxzrAGSUSKqlDDFFsV5V5E+2Kp1irsVdiqXar/vd&#xA;o3/MY/8A1B3GKpjiqXXGhWbzPc2rPYXjmr3NsQhc+MiMGjk+bqSO1MsGQ1R3CKU/rusWP+99uLu3&#xA;H/H3ZKxcD/LtiWf/AJFlz/kjDwxPI17/ANa2jbHULK/gFxZzpcQk8eaEGjDqreDDuDuMhKJiaKQU&#xA;RkVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3/ppP+jP/AJm4qmWK&#xA;pHf+cdJsr6+sZkuDdWK2jGJImZpfr7yRwCGn26vC4PhTFUC/5meVQhdZJpEKh4GSFz6y8PUdodvj&#xA;9NRV/DDStwea9H1vV7CDT5GkNrePWRlKpIogvIWaJj9oLLA6HwI9xUKynFXYq7FUDeaNZ3M31leV&#xA;te0AF5bnhLQdA2xWRR/K4ZfbJxyEbcwikP8AXdW09QNQh+u260BvbRD6gGwrJbDk30xlvHioyXDG&#xA;XLb3/r/WqY2t5a3cCz2syTwt9mSNgymmx3HhlcokGilVwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqlv8A00n/AEZ/8zcVTLFUk1HyboGoX11fXMUxu7yKCCaVLq5j+C1cywcF&#xA;SRVRo3diGUA/E38xqqhH/Lfye6ugsnjR+ACx3FxGECLwpFwkHphl2fhTl3rjarZvKnl+w1PT5Laz&#xA;UG7vS0yOzSJ8NvdyjgkhZUHqSu/wgfESeuKsoxV2KuxV2KuxVL7vRYJZ2u7WRrG/b7VzDT46CgEy&#xA;H4JQP8oVH7JGWRyGqO4RSj+mLmxPDWYliirQajCCbY70HqA1aA/61V/y8PAJfT8uv7fxst96aqyu&#xA;odCGVhVWG4IPQg5UlvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUpS3gTzS8yRo&#xA;sstmPVkCgM1JKDkepoBiqbYq7FXYql2q/wC92jf8xj/9QdxiqY4q7FXYq7FXYq7FXYqlLaNNZN6u&#xA;iyLbitX0+SptX8eIFTCx8U27lWOW+Jf1fPr+1FdytY6xFPN9UuI2s9QA5G0lpVgOrROPhkX3Xp3A&#xA;O2CWOtxuFBTDK0uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLf+mk/6M/8AmbiqZYqx&#xA;r8wvMeq+X/LjahpcEc92JY41WZS0YVialvjhA6d3A+mgKrFLz8y/NcMFzItlAhjehDW9y3olY7h0&#xA;hkHNC8l0YIxEVpx9QVDGgJpU00zzTrGp64IbuyAWx1EpFFEnCRCY7+ExStJIUdljgjl5KQCsgoDs&#xA;SqzzArsVdirsVdirsVdirsVUL6ws76H0bqISoCHXqGVx0dGFGVh2ZTUZKMiDspCXiTVNK2mL6jpw&#xA;6TKvK6iH+Wqj98o8VHP2Y1OTqMuWx+z9iOSZ21zb3UCT20qzQyCqSIQyntsRlZBBopVMCuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKUkdvNLoYnRUsxxlJXi9ZK/DRi23TcDFU2xV2KuxVLtV/&#xA;3u0b/mMf/qDuMVTHFXYq7FXYq7FXYq7FXYq7FXYqll1o7pO99pcgtb195UYE285/4tQftU29Rfi8&#xA;eQHHLBPapbhFKlhq8dxMbO4jNpqKDk9rIQeSj9uJx8Mie69P2gp2wShQsbhQUfkEuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2Kpb/00n/Rn/wAzcVSDyx5q1zUfNer6ZeLarY2kt0lq0LIZGEDxKAQs&#xA;ruCqy1k5om7LxqN8VZjirsVS7Vf97tG/5jH/AOoO4xVMcVdirsVdirsVdirsVdirsVdirsVQ2oad&#xA;aX8IiuUJ4sHikUlJI3HR43WjKw8RkozMTsghLxqN5pTCLV39WzJpFqoAUCvRblVosZ/yx8B/ydgZ&#xA;8Al9PPu/Ut0nOVJdirsVdirsVdirsVdirsVdirsVdirsVdiqW/8ATSf9Gf8AzNxVh/kHSteTzDLq&#xA;uq2c0JuLNog1wIfUSQPFJMC0caMVkneUoK9F5H7YwqyHz3oms6zoDWWk3P1a5MscjfGIxJGjVaMs&#xA;Y5gA3eqEHpgViF/5C8+Trclb+L1JXLNxu7mNZmaO5WJ6BG9H6q88JQLXl6YrTbCqaaZ5f8yabriz&#xA;Xl4ki3eoFoGZ5Zw3wX8rStGfSETNDNFFxUkD0/CmKs8wK7FXYq7FXYq7FXYq7FXYq7FXYq7FWmVW&#xA;UqwBUihB3BBxVJmtrzRqvYI11pY3fTxvJCPG2r1Uf76P+wp9k3WJ89pd/wCv9fzY8k0tLy2vLdLi&#xA;2kEsL/ZdfbYg9wQdiDuMqlEg0WStgV2KuxV2KuxV2KuxV2KuxV2KuxV2KpSizjzS5d0MRsx6SBSG&#xA;H7zfk3Iht/YYqxjyZq11cedtdsprl7lYXuDGHkkJRRc8VRofrUscXEbRkwRl1HIV3JKs9wK7FUu1&#xA;X/e7Rv8AmMf/AKg7jFUxxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpXeaZcQ3DahpRWO6be5tWN&#xA;Ibmn89AeElNhIP8AZBgBS2MwRUuX3IpE6fqVvfI/ANHPCeFzbSDjLE/Xi6/qYbMNwSMhKBCgovIp&#xA;dirsVdirsVdirsVdirsVdirsVS3/AKaT/oz/AOZuKsN8iXN7/jDU7K4ExFstyiS+i8UMipcqgb95&#xA;cXLfDTjGaJyAYnkehVm2ua5pOhaTc6vq1wtpp1mnqXE7BmCrWn2VDMxJNAAKnAqXXXnzypatcrcX&#xA;pRrST0Z/3MxowEhYrRDzRPq8vN1qqcG5EcTiq1td0rU9UsIbKf1ZLO/eOccHShFrdJVS6qHXlGy8&#xA;lqtVIrUHFWQ4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgNR0r6xIt3ayfVdShXjDcgcgV6+n&#xA;KgK+pGf5SduqkHfJwnWx3CCHadqouZHtbiP6rqUI5TWpYN8JNBJG23ONuzfQQGqMZwrcbhQUfkEu&#xA;xV2KuxV2KuxV2KuxV2KuxVLf+mk/6M/+ZuKsJ8jWWnWvn3Vk05YrezSKeGO3RE+Mw3KxuyMtrbsq&#xA;xMvBlaWSpIp0qSrMvNHlfSPM+jzaTqqO1rMrisUjROpeNoyyspH7MjbGo8QcCpTcfln5dmFwC9yg&#xA;nd3+GWpRZ/XNwillY8ZjeTFyatVqgii0VbbynpGn6pZSorXBvL4l1uOMioiQ3k6RoCNkSW4kZa1I&#xA;r1pTCrK8CuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVB6npcV8iHm0F1CedtdxUEkbd6VBBV&#xA;ujKdiOuThPh9yCFLTdTmkmexv4xBqEQJotfTmjFB6sJP7O45Kd0OxqKMxnAcxyUFMcrS7FXYq7FX&#xA;Yq7FXYq7FXYqlKW8CeaXmSNFllsx6sgUBmpJQcj1NAMVYH+WF95Y8w+Z9U12xu7G4uS8siW4W1a9&#xA;VZyrpMfRaUxqsUvpGjfEa86OCMKvUsCuxVLtV/3u0b/mMf8A6g7jFUxxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVCanpkGoW/pSlo3RhJBcRnjJFIv2XQ77j32I2IIJGShMxKCFDTr+5Eo0&#xA;/UuK6gq8kkQER3CDYyRg1oRX40rVfcEEynEcxy+5QUyytLsVdirsVdirsVdirsVS3/ppP+jP/mbi&#xA;qQeUPNuo6rr+o2F8DA8BnaG14wUWOO4MKhpIrictItKSDjQH2K1Kpt5y8wNoGgT6kjQCSMqsUdwz&#xA;KskjmiRJwBJeRqKPvOwwKxDUvzduLJ71TYW/7iSRULXJAQQR3MjCdlRgjTfUyIaV5c1+k0qP07zq&#xA;+r64kE1r6KafflY/SLzSUZNQtgkyKlUk/wBF5kb0Vx8yqzvArsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVQ9/YQXsHpS8lZWDwzIaSRyD7Lo29GFfkRsagkZKMiCpCE0zUrg3L6bqKhNQiB&#xA;dJFFI7iIGnqx+B3HNOqnxBUmU4CrHL7kApnlaXYq7FXYq7FXYq7FUpSdH80vEA/KOzHIlGVTWSvw&#xA;sQFb6DirGvy70/WYru5u9a0K50vUZlLzXEjac0Ekkgi9YqbWWabm7x1q+xUCprirOJYYZk4Sosid&#xA;eLgMPuOKu9CGhX01oSCRQUJWnH7qbYql+qKq3+kEAAtesWI7n6nOKn6BiqZ4q7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhdR0+O+t/TLNFMh521ylPUikAIDpX57g7EVBqCRkoSooIU&#xA;dM1GWSR7C+Cx6nbqGlVQQkqHYTRVr8JPVa1U7HsTKcOo5KCmGVpdirsVdirsVdiqW/8ATSf9Gf8A&#xA;zNxVMsVdirsVS7Vf97tG/wCYx/8AqDuMVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqgtU0xb2ONkcwXlu3qWlyvVHpShG3JGGzr3HvQicJ17kENaXqJu0kinT0L+2IS8t61CsR&#xA;UMhNOUb9Ub6DRgQGcK5cioKOyCXYq7FXYq7FUt/6aT/oz/5m4qmWKuxV2KsF0+z812uvCS/LTQza&#xA;kxtFnnJQ/BqDF4gDMYk+rPAoSg+JT48mKs6wK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYql2q6dLM0d7ZFY9TtgRA7bJIhoWhlIBPB6Dfqpow8DZCdbHkUEK+m6jBf2/rRhkZWM&#xA;c8EgpJFIv2kcdiPuIoRUEHIziYlQUVkUuxV2KuxVKUac+aXDogiFmPScMSx/eb8l4gLv7nFU2xV2&#xA;KuxVLtV/3u0b/mMf/qDuMVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;YqlWpWs9rcnVrCMyTBQt9aJ1uIl6cR09WP8AY/m+yexW2BBHCfh5fsQUwtbq3uraO5t3EkEyh45B&#xA;0KncHKyCDRSq4FdirsVS3/ppP+jP/mbiqZYqhtQ1Kw061a7vp1t7ZKBpXNFFdhiqBm83+VYBcGXV&#xA;7NBa8Dckzx/AJRVOW+3IbjFVG41fSr7VtPt7O7huJ7S9K3UcTq7RlrS5A5AHbdGHzBHY4qnuKuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpNPXRr1roGmkXb1vF7W8zn++&#xA;HhHIx/eeDfH3c5cPWK/iH2/jp8u5jyTnKWTsVdiqW/8ATSf9Gf8AzNxVMsVSDV/J8N9ZXdvb6jf2&#xA;T3vw3Eq3U837ssGeNEneRIw/2SUAIXYEYqlE/wCVmnzSSSfpG5jf4jbemsCiD1UKXHBfTIIkDnZq&#xA;8f2cNqut/I+m6Nq1jJBPcOlxdssURfh6Sene3TKrRhHPKa5cnkTtQfNVmmBXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWnRJEaORQ6OCrowqCDsQQcQVSnTmfTLpdImJa2&#xA;cE6VOxJJVRVrdierxrupO7J4lWOWz9Q4hz6/rQNk3ypLsVSlIETzS8oL8pLMcgXZlFJKfCpJVfoG&#xA;KptirsVdiqXar/vdo3/MY/8A1B3GKpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVQ2pafDf2j20pZK0aOVDR45FPJJEO9GVhUZKEjE2ghR0m/muFktrxVj1G0IW6Rd&#xA;lYGvCaMGp9OQCo8DVeqnDONbjkVBR+QSlv8A00n/AEZ/8zcVTLFWM+YvP+iaNpV9ekvNLZCgt2R4&#xA;Q8hbgqCWVVQDkd2rsN8aVKJvzWgUsYNP9eOQM1nKLhAkqxRtJMzNxITZD6fXnt0w0rovzD0/UdTt&#xA;DPA9laWt6xjuJCTyQpf2nKReI9I+tasAKmoK+9FWV/4j0b/lo/4ST/mnArv8R6N/y0f8JJ/zTirv&#xA;8R6N/wAtH/CSf804qpweadFlQt6zJR3SjxuD8DFa7A7GlR7Yqqf4j0b/AJaP+Ek/5pxV3+I9G/5a&#xA;P+Ek/wCacVU5PNOixvEvrM3quUqsb0Wis1W26fDT50xVU/xHo3/LR/wkn/NOKu/xHo3/AC0f8JJ/&#xA;zTirv8R6N/y0f8JJ/wA04qp2/mnRZoI5vWaP1EV+DxuGXkK0YAHcd8VVP8R6N/y0f8JJ/wA04q7/&#xA;ABHo3/LR/wAJJ/zTiqm3mnRROkPrMeaM/MRvxHAqKE06nnt8jiqp/iPRv+Wj/hJP+acVd/iPRv8A&#xA;lo/4ST/mnFXf4j0b/lo/4ST/AJpxVTt/NOizQRzes0fqIr8HjcMvIVowAO474qqf4j0b/lo/4ST/&#xA;AJpxV3+I9G/5aP8AhJP+acVU2806KJ0h9ZjzRn5iN+I4FRQmnU89vkcVVP8AEejf8tH/AAkn/NOK&#xA;u/xHo3/LR/wkn/NOKu/xHo3/AC0f8JJ/zTiqnb+adFmgjm9Zo/URX4PG4ZeQrRgAdx3xVQudT0KW&#xA;9tr1LsxXNvyUsI3POJ/tRsOPSoDA9iPCoMxKgQhF/wCI9G/5aP8AhJP+acglA2Wtadfea2gtJPWa&#xA;OyJlIBAQ+qtFatKFg1RhVkGBWpI0kRo5FDo4KujCoIOxBBxVATeXfL8/rGbTLSU3JjNxzgjb1DD/&#xA;AHZeq/Fw/Zr07YqkXmrQdXN5Z3Hl2IWzyz+pqMluy27PIGT05rggoZkRA4ZDyrUbYVZbgV2KuxVj&#xA;vkqz1i2ttQ/Scd1AZbx5LW2urgXZjh4qq8ZjLO55cS5BKhSeKrQVKrIsVdirHvM9p5sn1HR5NGkj&#xA;Wwt7lZNSiMzQySJyUU2RwyBC5KVFTx8MVZDirsVabkVPEgNT4SRUA9qioxVjX5fWPmex0JrfzG7S&#xA;34lB9d5WleT9zH6jmskqoDN6nBUoOHH4VJIxVk2KuxVifmjTfNlz5q0C50qaSPS7ZydQRJeCMDJG&#xA;W9ROacv3asF+CTc0on28VZZirsVSjzdbahceXL+LTVnbUTE31IW0ogk9alI25l4hxVqMwLbgUoeh&#xA;VS/y/ZeZU8x6jeX5mTT7heUMU0yyLVipjWOJWdYvSTkslPtNvU9cKsnwK7FWB+Y7HzdJca+mn2l/&#xA;LDdi0GmypfLCIpV9QTzRgXMTBVDIfSqquVodiThVnUIYRIGJLBRyLU5Vp3ptX5YFXYqk/muLUpNI&#xA;/wBxsU8t4k0LxpbSrC5CSBnqzyQqVKAgqTv4YqgvLdp5ui8x69cazIr6ZdNC2kokvJYkUyAoIuK8&#xA;G4emX+JqtWhpsFWS4q7FXnfmHSvzAlm1OPSBcrbtqKXNv6t0AJIPqbqYkZLhJYo/rnBmUFf3daAn&#xA;4CVeiYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqE1e2ubnS7qC0me2uniYW88RAdJKVRhy&#xA;+H7XY7HvirBDL+b9rCES1F2WtIXdw9qGF3MyvcAGR6KISzhFoVKhRyrvhVknkp/OUtjJceakS3vZ&#xA;BBws4/SKR/6NG01HjZ+X79pF3PRRTxIVkWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:8D17B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8D17B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8D17B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T16:48:08+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -214.368 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 214.368 li
288.838 214.368 li
288.838 0 li
cp
clp
[1 0 0 1 0 0 ]ct
33.2905 197.545 mo
284.391 197.545 li
284.391 3.14551 li
33.2905 3.14551 li
33.2905 197.545 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
33.2905 197.545 mo
284.391 197.545 li
284.391 3.14551 li
33.2905 3.14551 li
33.2905 197.545 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
33.2905 3.14551 mo
41.1372 6.49121 li
48.9844 9.97314 li
56.6743 13.5234 li
64.207 17.1387 li
71.583 20.8159 li
78.9595 24.6333 li
86.1782 28.5122 li
93.2407 32.4463 li
100.303 36.5249 li
107.208 40.6577 li
114.113 44.9375 li
120.862 49.2695 li
127.453 53.6455 li
134.044 58.1719 li
140.479 62.7397 li
146.913 67.4595 li
153.348 72.3364 li
159.625 77.2515 li
165.902 82.3257 li
172.023 87.4321 li
178.144 92.6997 li
184.265 98.1353 li
190.228 103.597 li
196.191 109.227 li
202.155 115.03 li
207.962 120.853 li
213.769 126.851 li
219.575 133.028 li
225.382 139.391 li
231.031 145.766 li
236.682 152.327 li
242.331 159.08 li
247.98 166.029 li
253.631 173.181 li
259.123 180.335 li
264.616 187.693 li
268.696 193.293 li
.884 .769 0 0 cmyk
@
grestore
33.2905 197.545 mo
33.2905 195.294 li
33.2905 197.545 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
33.2905 197.545 mo
33.2905 195.295 li
@
33.2905 5.39551 mo
33.2905 3.14551 li
33.2905 5.39551 li
cp
f
33.2905 3.14551 mo
33.2905 5.39551 li
@
33.7363 200.447 mo
33.3921 200.447 33.1357 200.615 32.96 200.953 cv
32.7847 201.291 32.7036 201.796 32.7036 202.471 cv
32.7036 203.146 32.7847 203.652 32.96 203.99 cv
33.1357 204.328 33.3921 204.496 33.7363 204.496 cv
34.0806 204.496 34.3369 204.328 34.5127 203.99 cv
34.6812 203.652 34.769 203.146 34.769 202.471 cv
34.769 201.796 34.6812 201.291 34.5127 200.953 cv
34.3369 200.615 34.0806 200.447 33.7363 200.447 cv
33.7363 199.919 mo
34.2832 199.919 34.7017 200.142 34.9985 200.574 cv
35.2886 201.013 35.4375 201.648 35.4375 202.471 cv
35.4375 203.301 35.2886 203.936 34.9985 204.368 cv
34.7017 204.8 34.2832 205.016 33.7363 205.016 cv
33.1826 205.016 32.7573 204.8 32.4673 204.368 cv
32.1768 203.936 32.0352 203.301 32.0352 202.471 cv
32.0352 201.648 32.1768 201.013 32.4673 200.574 cv
32.7573 200.142 33.1826 199.919 33.7363 199.919 cv
f
64.6777 197.545 mo
64.6777 195.295 li
f
64.6777 197.545 mo
64.6777 195.295 li
@
64.6777 3.14551 mo
64.6777 5.39551 li
f
64.6777 3.14551 mo
64.6777 5.39551 li
@
64.4097 204.368 mo
66.7314 204.368 li
66.7314 204.928 li
63.6064 204.928 li
63.6064 204.368 li
63.856 204.111 64.2002 203.76 64.6392 203.315 cv
65.0713 202.876 65.3477 202.593 65.4624 202.464 cv
65.6787 202.228 65.8271 202.025 65.9082 201.857 cv
65.9893 201.695 66.0361 201.526 66.0361 201.364 cv
66.0361 201.107 65.9419 200.892 65.7598 200.73 cv
65.5771 200.568 65.3408 200.48 65.0439 200.48 cv
64.835 200.48 64.6118 200.52 64.3823 200.587 cv
64.1528 200.662 63.9033 200.77 63.6401 200.918 cv
63.6401 200.244 li
63.9102 200.136 64.1597 200.054 64.3892 200 cv
64.6187 199.947 64.835 199.919 65.0308 199.919 cv
65.5366 199.919 65.9419 200.048 66.2456 200.304 cv
66.5493 200.56 66.7046 200.898 66.7046 201.324 cv
66.7046 201.526 66.6641 201.722 66.5898 201.897 cv
66.5156 202.08 66.3804 202.295 66.1782 202.539 cv
66.124 202.606 65.9487 202.789 65.6514 203.091 cv
65.3545 203.396 64.9429 203.821 64.4097 204.368 cv
f
96.0654 197.545 mo
96.0654 195.295 li
f
96.0654 197.545 mo
96.0654 195.295 li
@
96.0654 3.14551 mo
96.0654 5.39551 li
f
96.0654 3.14551 mo
96.0654 5.39551 li
@
96.8242 200.587 mo
95.1436 203.214 li
96.8242 203.214 li
96.8242 200.587 li
96.6484 200.007 mo
97.4858 200.007 li
97.4858 203.214 li
98.1875 203.214 li
98.1875 203.767 li
97.4858 203.767 li
97.4858 204.928 li
96.8242 204.928 li
96.8242 203.767 li
94.6035 203.767 li
94.6035 203.126 li
96.6484 200.007 li
cp
f
127.453 197.545 mo
127.453 195.295 li
f
127.453 197.545 mo
127.453 195.295 li
@
127.453 3.14551 mo
127.453 5.39551 li
f
127.453 3.14551 mo
127.453 5.39551 li
@
127.984 202.201 mo
127.687 202.201 127.451 202.308 127.275 202.511 cv
127.1 202.714 127.012 202.998 127.012 203.349 cv
127.012 203.707 127.1 203.99 127.275 204.193 cv
127.451 204.394 127.687 204.496 127.984 204.496 cv
128.281 204.496 128.518 204.394 128.693 204.193 cv
128.868 203.99 128.956 203.707 128.956 203.349 cv
128.956 202.998 128.868 202.714 128.693 202.511 cv
128.518 202.308 128.281 202.201 127.984 202.201 cv
129.307 200.115 mo
129.307 200.723 li
129.138 200.642 128.97 200.582 128.801 200.541 cv
128.625 200.5 128.457 200.48 128.294 200.48 cv
127.849 200.48 127.512 200.628 127.282 200.925 cv
127.053 201.222 126.917 201.674 126.891 202.269 cv
127.019 202.08 127.181 201.931 127.376 201.83 cv
127.572 201.728 127.788 201.674 128.024 201.674 cv
128.518 201.674 128.909 201.83 129.192 202.126 cv
129.476 202.423 129.625 202.835 129.625 203.349 cv
129.625 203.855 129.469 204.259 129.172 204.564 cv
128.875 204.868 128.477 205.016 127.984 205.016 cv
127.417 205.016 126.979 204.8 126.681 204.369 cv
126.377 203.936 126.229 203.301 126.229 202.47 cv
126.229 201.695 126.411 201.074 126.783 200.615 cv
127.147 200.156 127.646 199.919 128.268 199.919 cv
128.43 199.919 128.598 199.939 128.774 199.966 cv
128.942 200 129.118 200.048 129.307 200.115 cv
f
158.841 197.545 mo
158.841 195.295 li
f
158.841 197.545 mo
158.841 195.295 li
@
158.841 3.14551 mo
158.841 5.39551 li
f
158.841 3.14551 mo
158.841 5.39551 li
@
159.299 202.593 mo
158.982 202.593 158.732 202.68 158.55 202.849 cv
158.368 203.018 158.28 203.248 158.28 203.544 cv
158.28 203.841 158.368 204.078 158.55 204.246 cv
158.732 204.416 158.982 204.497 159.299 204.497 cv
159.61 204.497 159.859 204.416 160.042 204.24 cv
160.225 204.072 160.319 203.841 160.319 203.544 cv
160.319 203.248 160.225 203.018 160.048 202.849 cv
159.867 202.68 159.617 202.593 159.299 202.593 cv
158.631 202.308 mo
158.348 202.242 158.125 202.107 157.963 201.911 cv
157.801 201.714 157.727 201.479 157.727 201.196 cv
157.727 200.804 157.861 200.494 158.145 200.263 cv
158.422 200.035 158.807 199.919 159.299 199.919 cv
159.785 199.919 160.17 200.035 160.454 200.263 cv
160.73 200.494 160.873 200.804 160.873 201.196 cv
160.873 201.479 160.791 201.714 160.629 201.911 cv
160.467 202.107 160.251 202.242 159.967 202.308 cv
160.285 202.384 160.535 202.533 160.717 202.748 cv
160.892 202.963 160.987 203.234 160.987 203.544 cv
160.987 204.024 160.838 204.388 160.548 204.638 cv
160.251 204.894 159.839 205.016 159.299 205.016 cv
158.752 205.016 158.334 204.894 158.044 204.638 cv
157.753 204.388 157.612 204.024 157.612 203.544 cv
157.612 203.234 157.699 202.963 157.882 202.748 cv
158.057 202.533 158.307 202.384 158.631 202.308 cv
158.389 201.256 mo
158.389 201.512 158.463 201.714 158.625 201.857 cv
158.786 201.999 159.009 202.066 159.299 202.066 cv
159.583 202.066 159.806 201.999 159.967 201.857 cv
160.13 201.714 160.21 201.512 160.21 201.256 cv
160.21 201 160.13 200.804 159.967 200.662 cv
159.806 200.52 159.583 200.447 159.299 200.447 cv
159.009 200.447 158.786 200.52 158.625 200.662 cv
158.463 200.804 158.389 201 158.389 201.256 cv
f
190.228 197.545 mo
190.228 195.295 li
f
190.228 197.545 mo
190.228 195.295 li
@
190.228 3.14551 mo
190.228 5.39551 li
f
190.228 3.14551 mo
190.228 5.39551 li
@
187.36 204.368 mo
188.447 204.368 li
188.447 200.615 li
187.266 200.851 li
187.266 200.244 li
188.44 200.007 li
189.108 200.007 li
189.108 204.368 li
190.195 204.368 li
190.195 204.928 li
187.36 204.928 li
187.36 204.368 li
cp
f
192.963 200.447 mo
192.619 200.447 192.362 200.615 192.187 200.953 cv
192.012 201.291 191.931 201.796 191.931 202.471 cv
191.931 203.146 192.012 203.652 192.187 203.99 cv
192.362 204.328 192.619 204.496 192.963 204.496 cv
193.307 204.496 193.563 204.328 193.739 203.99 cv
193.908 203.652 193.996 203.146 193.996 202.471 cv
193.996 201.796 193.908 201.291 193.739 200.953 cv
193.563 200.615 193.307 200.447 192.963 200.447 cv
192.963 199.919 mo
193.51 199.919 193.929 200.142 194.226 200.574 cv
194.516 201.013 194.663 201.648 194.663 202.471 cv
194.663 203.301 194.516 203.936 194.226 204.368 cv
193.929 204.8 193.51 205.016 192.963 205.016 cv
192.409 205.016 191.984 204.8 191.694 204.368 cv
191.403 203.936 191.262 203.301 191.262 202.471 cv
191.262 201.648 191.403 201.013 191.694 200.574 cv
191.984 200.142 192.409 199.919 192.963 199.919 cv
f
221.615 197.545 mo
221.615 195.295 li
f
221.615 197.545 mo
221.615 195.295 li
@
221.615 3.14551 mo
221.615 5.39551 li
f
221.615 3.14551 mo
221.615 5.39551 li
@
218.862 204.368 mo
219.949 204.368 li
219.949 200.615 li
218.768 200.851 li
218.768 200.244 li
219.942 200.007 li
220.61 200.007 li
220.61 204.368 li
221.697 204.368 li
221.697 204.928 li
218.862 204.928 li
218.862 204.368 li
cp
f
223.614 204.368 mo
225.937 204.368 li
225.937 204.928 li
222.811 204.928 li
222.811 204.368 li
223.061 204.111 223.405 203.76 223.843 203.315 cv
224.275 202.876 224.553 202.593 224.667 202.464 cv
224.883 202.228 225.032 202.025 225.113 201.857 cv
225.193 201.695 225.241 201.526 225.241 201.364 cv
225.241 201.107 225.146 200.892 224.964 200.73 cv
224.782 200.568 224.545 200.48 224.249 200.48 cv
224.039 200.48 223.816 200.52 223.587 200.587 cv
223.357 200.662 223.108 200.77 222.845 200.918 cv
222.845 200.244 li
223.114 200.136 223.364 200.054 223.594 200 cv
223.823 199.947 224.039 199.919 224.235 199.919 cv
224.741 199.919 225.146 200.048 225.45 200.304 cv
225.754 200.56 225.909 200.898 225.909 201.324 cv
225.909 201.526 225.869 201.722 225.795 201.897 cv
225.721 202.08 225.585 202.295 225.383 202.539 cv
225.329 202.606 225.152 202.789 224.856 203.091 cv
224.56 203.396 224.146 203.821 223.614 204.368 cv
f
253.003 197.545 mo
253.003 195.295 li
f
253.003 197.545 mo
253.003 195.295 li
@
253.003 3.14551 mo
253.003 5.39551 li
f
253.003 3.14551 mo
253.003 5.39551 li
@
250.101 204.368 mo
251.187 204.368 li
251.187 200.615 li
250.006 200.851 li
250.006 200.244 li
251.18 200.007 li
251.849 200.007 li
251.849 204.368 li
252.936 204.368 li
252.936 204.928 li
250.101 204.928 li
250.101 204.368 li
cp
f
256.107 200.587 mo
254.428 203.214 li
256.107 203.214 li
256.107 200.587 li
255.932 200.007 mo
256.77 200.007 li
256.77 203.214 li
257.472 203.214 li
257.472 203.767 li
256.77 203.767 li
256.77 204.928 li
256.107 204.928 li
256.107 203.767 li
253.888 203.767 li
253.888 203.126 li
255.932 200.007 li
cp
f
284.391 197.545 mo
284.391 195.295 li
f
284.391 197.545 mo
284.391 195.295 li
@
284.391 3.14551 mo
284.391 5.39551 li
f
284.391 3.14551 mo
284.391 5.39551 li
@
281.514 204.368 mo
282.602 204.368 li
282.602 200.615 li
281.419 200.851 li
281.419 200.244 li
282.594 200.007 li
283.262 200.007 li
283.262 204.368 li
284.349 204.368 li
284.349 204.928 li
281.514 204.928 li
281.514 204.368 li
cp
f
287.197 202.201 mo
286.9 202.201 286.664 202.308 286.489 202.511 cv
286.313 202.714 286.226 202.998 286.226 203.349 cv
286.226 203.707 286.313 203.99 286.489 204.193 cv
286.664 204.394 286.9 204.496 287.197 204.496 cv
287.494 204.496 287.73 204.394 287.906 204.193 cv
288.082 203.99 288.17 203.707 288.17 203.349 cv
288.17 202.998 288.082 202.714 287.906 202.511 cv
287.73 202.308 287.494 202.201 287.197 202.201 cv
288.521 200.115 mo
288.521 200.723 li
288.352 200.642 288.184 200.582 288.015 200.541 cv
287.839 200.5 287.67 200.48 287.508 200.48 cv
287.063 200.48 286.726 200.628 286.496 200.925 cv
286.267 201.222 286.131 201.674 286.104 202.269 cv
286.232 202.08 286.395 201.931 286.59 201.83 cv
286.786 201.728 287.001 201.674 287.238 201.674 cv
287.73 201.674 288.122 201.83 288.405 202.126 cv
288.688 202.423 288.838 202.835 288.838 203.349 cv
288.838 203.855 288.683 204.259 288.385 204.564 cv
288.089 204.868 287.69 205.016 287.197 205.016 cv
286.631 205.016 286.192 204.8 285.895 204.369 cv
285.591 203.936 285.442 203.301 285.442 202.47 cv
285.442 201.695 285.625 201.074 285.996 200.615 cv
286.36 200.156 286.859 199.919 287.481 199.919 cv
287.644 199.919 287.812 199.939 287.987 199.966 cv
288.156 200 288.332 200.048 288.521 200.115 cv
f
151.684 209.359 mo
152.393 209.359 li
153.756 211.384 li
155.113 209.359 li
155.828 209.359 li
154.087 211.937 li
154.087 214.28 li
153.418 214.28 li
153.418 211.937 li
151.684 209.359 li
cp
f
159.608 212.282 mo
159.608 212.579 li
156.821 212.579 li
156.848 212.997 156.969 213.322 157.199 213.537 cv
157.421 213.753 157.731 213.861 158.137 213.861 cv
158.367 213.861 158.595 213.833 158.812 213.781 cv
159.028 213.726 159.25 213.638 159.466 213.517 cv
159.466 214.091 li
159.25 214.185 159.028 214.259 158.798 214.3 cv
158.568 214.34 158.332 214.368 158.103 214.368 cv
157.509 214.368 157.043 214.199 156.699 213.861 cv
156.355 213.524 156.186 213.058 156.186 212.47 cv
156.186 211.871 156.348 211.39 156.672 211.033 cv
156.996 210.682 157.441 210.5 157.995 210.5 cv
158.495 210.5 158.886 210.662 159.176 210.979 cv
159.459 211.302 159.608 211.735 159.608 212.282 cv
159.001 212.105 mo
158.994 211.775 158.899 211.512 158.724 211.309 cv
158.542 211.114 158.299 211.013 158.002 211.013 cv
157.665 211.013 157.394 211.114 157.191 211.302 cv
156.989 211.492 156.868 211.762 156.84 212.105 cv
159.001 212.105 li
f
162.281 212.423 mo
161.789 212.423 161.451 212.484 161.262 212.592 cv
161.073 212.707 160.979 212.896 160.979 213.166 cv
160.979 213.382 161.046 213.558 161.188 213.679 cv
161.33 213.807 161.525 213.869 161.769 213.869 cv
162.105 213.869 162.376 213.753 162.578 213.51 cv
162.781 213.274 162.882 212.957 162.882 212.558 cv
162.882 212.423 li
162.281 212.423 li
163.489 212.173 mo
163.489 214.28 li
162.882 214.28 li
162.882 213.719 li
162.74 213.949 162.565 214.111 162.362 214.212 cv
162.159 214.314 161.903 214.368 161.606 214.368 cv
161.229 214.368 160.925 214.266 160.701 214.057 cv
160.479 213.847 160.371 213.564 160.371 213.207 cv
160.371 212.794 160.506 212.484 160.79 212.268 cv
161.066 212.059 161.478 211.951 162.032 211.951 cv
162.882 211.951 li
162.882 211.89 li
162.882 211.613 162.787 211.398 162.605 211.242 cv
162.423 211.093 162.167 211.013 161.836 211.013 cv
161.62 211.013 161.417 211.04 161.215 211.093 cv
161.012 211.148 160.823 211.222 160.641 211.316 cv
160.641 210.756 li
160.857 210.675 161.073 210.608 161.283 210.568 cv
161.492 210.527 161.694 210.5 161.896 210.5 cv
162.43 210.5 162.828 210.642 163.091 210.918 cv
163.354 211.195 163.489 211.613 163.489 212.173 cv
f
166.878 211.154 mo
166.811 211.114 166.736 211.087 166.655 211.067 cv
166.574 211.053 166.486 211.04 166.393 211.04 cv
166.047 211.04 165.785 211.154 165.602 211.377 cv
165.413 211.6 165.326 211.917 165.326 212.335 cv
165.326 214.28 li
164.718 214.28 li
164.718 210.587 li
165.326 210.587 li
165.326 211.162 li
165.447 210.939 165.616 210.769 165.818 210.662 cv
166.021 210.554 166.271 210.5 166.567 210.5 cv
166.608 210.5 166.655 210.506 166.709 210.506 cv
166.757 210.513 166.811 210.52 166.878 210.534 cv
166.878 211.154 li
f
33.2905 197.545 mo
35.5405 197.545 li
f
33.2905 197.545 mo
35.5405 197.545 li
@
284.391 197.545 mo
282.141 197.545 li
f
284.391 197.545 mo
282.141 197.545 li
@
17.5562 195.068 mo
15.8755 197.695 li
17.5562 197.695 li
17.5562 195.068 li
17.3809 194.488 mo
18.2178 194.488 li
18.2178 197.695 li
18.9199 197.695 li
18.9199 198.248 li
18.2178 198.248 li
18.2178 199.409 li
17.5562 199.409 li
17.5562 198.248 li
15.3354 198.248 li
15.3354 197.607 li
17.3809 194.488 li
cp
f
21.4443 194.927 mo
21.1001 194.927 20.8438 195.095 20.668 195.433 cv
20.4927 195.771 20.4116 196.277 20.4116 196.952 cv
20.4116 197.626 20.4927 198.132 20.668 198.47 cv
20.8438 198.808 21.1001 198.976 21.4443 198.976 cv
21.7886 198.976 22.0454 198.808 22.2207 198.47 cv
22.3896 198.132 22.4771 197.626 22.4771 196.952 cv
22.4771 196.277 22.3896 195.771 22.2207 195.433 cv
22.0454 195.095 21.7886 194.927 21.4443 194.927 cv
21.4443 194.4 mo
21.9912 194.4 22.4097 194.623 22.7065 195.054 cv
22.9971 195.494 23.1455 196.128 23.1455 196.952 cv
23.1455 197.782 22.9971 198.417 22.7065 198.848 cv
22.4097 199.281 21.9912 199.497 21.4443 199.497 cv
20.8911 199.497 20.4658 199.281 20.1753 198.848 cv
19.8853 198.417 19.7437 197.782 19.7437 196.952 cv
19.7437 196.128 19.8853 195.494 20.1753 195.054 cv
20.4658 194.623 20.8911 194.4 21.4443 194.4 cv
f
25.7373 194.927 mo
25.3931 194.927 25.1367 195.095 24.9609 195.433 cv
24.7856 195.771 24.7046 196.277 24.7046 196.952 cv
24.7046 197.626 24.7856 198.132 24.9609 198.47 cv
25.1367 198.808 25.3931 198.976 25.7373 198.976 cv
26.0815 198.976 26.3379 198.808 26.5137 198.47 cv
26.6826 198.132 26.77 197.626 26.77 196.952 cv
26.77 196.277 26.6826 195.771 26.5137 195.433 cv
26.3379 195.095 26.0815 194.927 25.7373 194.927 cv
25.7373 194.4 mo
26.2842 194.4 26.7026 194.623 26.9995 195.054 cv
27.29 195.494 27.4385 196.128 27.4385 196.952 cv
27.4385 197.782 27.29 198.417 26.9995 198.848 cv
26.7026 199.281 26.2842 199.497 25.7373 199.497 cv
25.1841 199.497 24.7588 199.281 24.4683 198.848 cv
24.1782 198.417 24.0361 197.782 24.0361 196.952 cv
24.0361 196.128 24.1782 195.494 24.4683 195.054 cv
24.7588 194.623 25.1841 194.4 25.7373 194.4 cv
f
30.0303 194.927 mo
29.686 194.927 29.4297 195.095 29.2539 195.433 cv
29.0786 195.771 28.9976 196.277 28.9976 196.952 cv
28.9976 197.626 29.0786 198.132 29.2539 198.47 cv
29.4297 198.808 29.686 198.976 30.0303 198.976 cv
30.3745 198.976 30.6309 198.808 30.8066 198.47 cv
30.9751 198.132 31.063 197.626 31.063 196.952 cv
31.063 196.277 30.9751 195.771 30.8066 195.433 cv
30.6309 195.095 30.3745 194.927 30.0303 194.927 cv
30.0303 194.4 mo
30.5771 194.4 30.9956 194.623 31.2925 195.054 cv
31.583 195.494 31.7314 196.128 31.7314 196.952 cv
31.7314 197.782 31.583 198.417 31.2925 198.848 cv
30.9956 199.281 30.5771 199.497 30.0303 199.497 cv
29.4766 199.497 29.0518 199.281 28.7612 198.848 cv
28.4712 198.417 28.3291 197.782 28.3291 196.952 cv
28.3291 196.128 28.4712 195.494 28.7612 195.054 cv
29.0518 194.623 29.4766 194.4 30.0303 194.4 cv
f
gsave
8.10742 201.001 mo
18.0435 201.001 li
18.0435 193.138 li
8.10742 193.138 li
8.10742 201.001 li
cp
clp
10.0645 197.013 mo
14.2896 197.013 li
14.2896 197.573 li
10.0645 197.573 li
10.0645 197.013 li
cp
f
grestore
33.2905 173.245 mo
35.5405 173.245 li
f
33.2905 173.245 mo
35.5405 173.245 li
@
284.391 173.245 mo
282.141 173.245 li
f
284.391 173.245 mo
282.141 173.245 li
@
16.3008 174.548 mo
18.623 174.548 li
18.623 175.109 li
15.4976 175.109 li
15.4976 174.548 li
15.7476 174.292 16.0918 173.941 16.5303 173.496 cv
16.9624 173.057 17.2393 172.773 17.354 172.645 cv
17.5698 172.408 17.7183 172.207 17.7993 172.037 cv
17.8804 171.875 17.9277 171.707 17.9277 171.544 cv
17.9277 171.288 17.833 171.072 17.6509 170.91 cv
17.4688 170.748 17.2324 170.661 16.9355 170.661 cv
16.7261 170.661 16.5034 170.701 16.2739 170.768 cv
16.0444 170.842 15.7949 170.95 15.5313 171.099 cv
15.5313 170.424 li
15.8013 170.316 16.0513 170.235 16.2808 170.181 cv
16.5103 170.127 16.7261 170.101 16.9219 170.101 cv
17.4282 170.101 17.833 170.228 18.1367 170.484 cv
18.4409 170.741 18.5957 171.079 18.5957 171.504 cv
18.5957 171.707 18.5557 171.903 18.481 172.078 cv
18.4067 172.26 18.272 172.476 18.0693 172.719 cv
18.0156 172.786 17.8398 172.969 17.543 173.272 cv
17.2461 173.576 16.834 174.001 16.3008 174.548 cv
f
21.4443 170.626 mo
21.1001 170.626 20.8438 170.795 20.668 171.133 cv
20.4927 171.47 20.4116 171.977 20.4116 172.652 cv
20.4116 173.327 20.4927 173.833 20.668 174.17 cv
20.8438 174.508 21.1001 174.676 21.4443 174.676 cv
21.7886 174.676 22.0454 174.508 22.2207 174.17 cv
22.3896 173.833 22.4771 173.327 22.4771 172.652 cv
22.4771 171.977 22.3896 171.47 22.2207 171.133 cv
22.0454 170.795 21.7886 170.626 21.4443 170.626 cv
21.4443 170.1 mo
21.9912 170.1 22.4097 170.323 22.7065 170.755 cv
22.9971 171.193 23.1455 171.828 23.1455 172.652 cv
23.1455 173.482 22.9971 174.116 22.7065 174.548 cv
22.4097 174.98 21.9912 175.197 21.4443 175.197 cv
20.8911 175.197 20.4658 174.98 20.1753 174.548 cv
19.8853 174.116 19.7437 173.482 19.7437 172.652 cv
19.7437 171.828 19.8853 171.193 20.1753 170.755 cv
20.4658 170.323 20.8911 170.1 21.4443 170.1 cv
f
25.7373 170.626 mo
25.3931 170.626 25.1367 170.795 24.9609 171.133 cv
24.7856 171.47 24.7046 171.977 24.7046 172.652 cv
24.7046 173.327 24.7856 173.833 24.9609 174.17 cv
25.1367 174.508 25.3931 174.676 25.7373 174.676 cv
26.0815 174.676 26.3379 174.508 26.5137 174.17 cv
26.6826 173.833 26.77 173.327 26.77 172.652 cv
26.77 171.977 26.6826 171.47 26.5137 171.133 cv
26.3379 170.795 26.0815 170.626 25.7373 170.626 cv
25.7373 170.1 mo
26.2842 170.1 26.7026 170.323 26.9995 170.755 cv
27.29 171.193 27.4385 171.828 27.4385 172.652 cv
27.4385 173.482 27.29 174.116 26.9995 174.548 cv
26.7026 174.98 26.2842 175.197 25.7373 175.197 cv
25.1841 175.197 24.7588 174.98 24.4683 174.548 cv
24.1782 174.116 24.0361 173.482 24.0361 172.652 cv
24.0361 171.828 24.1782 171.193 24.4683 170.755 cv
24.7588 170.323 25.1841 170.1 25.7373 170.1 cv
f
30.0303 170.626 mo
29.686 170.626 29.4297 170.795 29.2539 171.133 cv
29.0786 171.47 28.9976 171.977 28.9976 172.652 cv
28.9976 173.327 29.0786 173.833 29.2539 174.17 cv
29.4297 174.508 29.686 174.676 30.0303 174.676 cv
30.3745 174.676 30.6309 174.508 30.8066 174.17 cv
30.9751 173.833 31.063 173.327 31.063 172.652 cv
31.063 171.977 30.9751 171.47 30.8066 171.133 cv
30.6309 170.795 30.3745 170.626 30.0303 170.626 cv
30.0303 170.1 mo
30.5771 170.1 30.9956 170.323 31.2925 170.755 cv
31.583 171.193 31.7314 171.828 31.7314 172.652 cv
31.7314 173.482 31.583 174.116 31.2925 174.548 cv
30.9956 174.98 30.5771 175.197 30.0303 175.197 cv
29.4766 175.197 29.0518 174.98 28.7612 174.548 cv
28.4712 174.116 28.3291 173.482 28.3291 172.652 cv
28.3291 171.828 28.4712 171.193 28.7612 170.755 cv
29.0518 170.323 29.4766 170.1 30.0303 170.1 cv
f
gsave
8.10742 176.701 mo
18.0435 176.701 li
18.0435 168.837 li
8.10742 168.837 li
8.10742 176.701 li
cp
clp
10.0645 172.712 mo
14.2896 172.712 li
14.2896 173.272 li
10.0645 173.272 li
10.0645 172.712 li
cp
f
grestore
33.2905 148.946 mo
35.5405 148.946 li
f
33.2905 148.946 mo
35.5405 148.946 li
@
284.391 148.946 mo
282.141 148.946 li
f
284.391 148.946 mo
282.141 148.946 li
@
29.7856 146.327 mo
29.4414 146.327 29.1846 146.496 29.0093 146.833 cv
28.834 147.17 28.7529 147.676 28.7529 148.352 cv
28.7529 149.027 28.834 149.533 29.0093 149.871 cv
29.1846 150.208 29.4414 150.376 29.7856 150.376 cv
30.1299 150.376 30.3862 150.208 30.5615 149.871 cv
30.7305 149.533 30.8184 149.027 30.8184 148.352 cv
30.8184 147.676 30.7305 147.17 30.5615 146.833 cv
30.3862 146.496 30.1299 146.327 29.7856 146.327 cv
29.7856 145.8 mo
30.332 145.8 30.751 146.022 31.0479 146.455 cv
31.3379 146.894 31.4863 147.528 31.4863 148.352 cv
31.4863 149.182 31.3379 149.816 31.0479 150.249 cv
30.751 150.68 30.332 150.896 29.7856 150.896 cv
29.2319 150.896 28.8066 150.68 28.5166 150.249 cv
28.2261 149.816 28.0845 149.182 28.0845 148.352 cv
28.0845 147.528 28.2261 146.894 28.5166 146.455 cv
28.8066 146.022 29.2319 145.8 29.7856 145.8 cv
f
33.2905 124.646 mo
35.5405 124.646 li
f
33.2905 124.646 mo
35.5405 124.646 li
@
284.391 124.646 mo
282.141 124.646 li
f
284.391 124.646 mo
282.141 124.646 li
@
16.0854 125.948 mo
18.4077 125.948 li
18.4077 126.509 li
15.2822 126.509 li
15.2822 125.948 li
15.5322 125.692 15.8765 125.341 16.3149 124.896 cv
16.7471 124.457 17.0239 124.173 17.1387 124.045 cv
17.3545 123.809 17.5029 123.606 17.584 123.438 cv
17.665 123.275 17.7124 123.107 17.7124 122.945 cv
17.7124 122.688 17.6177 122.472 17.4355 122.31 cv
17.2534 122.148 17.0171 122.061 16.7202 122.061 cv
16.5107 122.061 16.2881 122.101 16.0586 122.168 cv
15.8291 122.243 15.5796 122.351 15.3159 122.499 cv
15.3159 121.824 li
15.5859 121.716 15.8359 121.635 16.0654 121.581 cv
16.2949 121.527 16.5107 121.5 16.7065 121.5 cv
17.2129 121.5 17.6177 121.628 17.9214 121.885 cv
18.2256 122.141 18.3809 122.479 18.3809 122.904 cv
18.3809 123.107 18.3403 123.302 18.2656 123.478 cv
18.1914 123.66 18.0566 123.875 17.854 124.119 cv
17.8003 124.187 17.6245 124.369 17.3276 124.672 cv
17.0308 124.976 16.6187 125.402 16.0854 125.948 cv
f
21.229 122.027 mo
20.8848 122.027 20.6284 122.196 20.4526 122.533 cv
20.2773 122.871 20.1963 123.376 20.1963 124.052 cv
20.1963 124.727 20.2773 125.232 20.4526 125.571 cv
20.6284 125.908 20.8848 126.076 21.229 126.076 cv
21.5732 126.076 21.8301 125.908 22.0054 125.571 cv
22.1743 125.232 22.2617 124.727 22.2617 124.052 cv
22.2617 123.376 22.1743 122.871 22.0054 122.533 cv
21.8301 122.196 21.5732 122.027 21.229 122.027 cv
21.229 121.5 mo
21.7759 121.5 22.1943 121.723 22.4912 122.155 cv
22.7817 122.594 22.9302 123.229 22.9302 124.052 cv
22.9302 124.881 22.7817 125.516 22.4912 125.949 cv
22.1943 126.38 21.7759 126.597 21.229 126.597 cv
20.6758 126.597 20.2505 126.38 19.96 125.949 cv
19.6699 125.516 19.5283 124.881 19.5283 124.052 cv
19.5283 123.229 19.6699 122.594 19.96 122.155 cv
20.2505 121.723 20.6758 121.5 21.229 121.5 cv
f
25.522 122.027 mo
25.1777 122.027 24.9214 122.196 24.7456 122.533 cv
24.5703 122.871 24.4893 123.376 24.4893 124.052 cv
24.4893 124.727 24.5703 125.232 24.7456 125.571 cv
24.9214 125.908 25.1777 126.076 25.522 126.076 cv
25.8662 126.076 26.123 125.908 26.2983 125.571 cv
26.4673 125.232 26.5547 124.727 26.5547 124.052 cv
26.5547 123.376 26.4673 122.871 26.2983 122.533 cv
26.123 122.196 25.8662 122.027 25.522 122.027 cv
25.522 121.5 mo
26.0688 121.5 26.4873 121.723 26.7842 122.155 cv
27.0747 122.594 27.2231 123.229 27.2231 124.052 cv
27.2231 124.881 27.0747 125.516 26.7842 125.949 cv
26.4873 126.38 26.0688 126.597 25.522 126.597 cv
24.9688 126.597 24.5435 126.38 24.2529 125.949 cv
23.9629 125.516 23.8213 124.881 23.8213 124.052 cv
23.8213 123.229 23.9629 122.594 24.2529 122.155 cv
24.5435 121.723 24.9688 121.5 25.522 121.5 cv
f
29.8149 122.027 mo
29.4707 122.027 29.2144 122.196 29.0386 122.533 cv
28.8633 122.871 28.7822 123.376 28.7822 124.052 cv
28.7822 124.727 28.8633 125.232 29.0386 125.571 cv
29.2144 125.908 29.4707 126.076 29.8149 126.076 cv
30.1592 126.076 30.4155 125.908 30.5913 125.571 cv
30.7598 125.232 30.8477 124.727 30.8477 124.052 cv
30.8477 123.376 30.7598 122.871 30.5913 122.533 cv
30.4155 122.196 30.1592 122.027 29.8149 122.027 cv
29.8149 121.5 mo
30.3618 121.5 30.7803 121.723 31.0771 122.155 cv
31.3677 122.594 31.5161 123.229 31.5161 124.052 cv
31.5161 124.881 31.3677 125.516 31.0771 125.949 cv
30.7803 126.38 30.3618 126.597 29.8149 126.597 cv
29.2612 126.597 28.8364 126.38 28.5459 125.949 cv
28.2559 125.516 28.1138 124.881 28.1138 124.052 cv
28.1138 123.229 28.2559 122.594 28.5459 122.155 cv
28.8364 121.723 29.2612 121.5 29.8149 121.5 cv
f
33.2905 100.345 mo
35.5405 100.345 li
f
33.2905 100.345 mo
35.5405 100.345 li
@
284.391 100.345 mo
282.141 100.345 li
f
284.391 100.345 mo
282.141 100.345 li
@
17.1831 97.8687 mo
15.502 100.494 li
17.1831 100.494 li
17.1831 97.8687 li
17.0073 97.2881 mo
17.8442 97.2881 li
17.8442 100.494 li
18.5464 100.494 li
18.5464 101.047 li
17.8442 101.047 li
17.8442 102.208 li
17.1831 102.208 li
17.1831 101.047 li
14.9619 101.047 li
14.9619 100.407 li
17.0073 97.2881 li
cp
f
21.0708 97.7266 mo
20.7266 97.7266 20.4702 97.8955 20.2949 98.2329 cv
20.1191 98.5703 20.0381 99.0767 20.0381 99.7515 cv
20.0381 100.427 20.1191 100.933 20.2949 101.271 cv
20.4702 101.607 20.7266 101.777 21.0708 101.777 cv
21.415 101.777 21.6719 101.607 21.8472 101.271 cv
22.0161 100.933 22.1035 100.427 22.1035 99.7515 cv
22.1035 99.0767 22.0161 98.5703 21.8472 98.2329 cv
21.6719 97.8955 21.415 97.7266 21.0708 97.7266 cv
21.0708 97.2002 mo
21.6177 97.2002 22.0361 97.4229 22.333 97.855 cv
22.6235 98.2935 22.772 98.9282 22.772 99.7515 cv
22.772 100.582 22.6235 101.216 22.333 101.648 cv
22.0361 102.081 21.6177 102.296 21.0708 102.296 cv
20.5176 102.296 20.0923 102.081 19.8018 101.648 cv
19.5117 101.216 19.3701 100.582 19.3701 99.7515 cv
19.3701 98.9282 19.5117 98.2935 19.8018 97.855 cv
20.0923 97.4229 20.5176 97.2002 21.0708 97.2002 cv
f
25.3638 97.7266 mo
25.0195 97.7266 24.7632 97.8955 24.5874 98.2329 cv
24.4121 98.5703 24.3311 99.0767 24.3311 99.7515 cv
24.3311 100.427 24.4121 100.933 24.5874 101.271 cv
24.7632 101.607 25.0195 101.777 25.3638 101.777 cv
25.708 101.777 25.9644 101.607 26.1401 101.271 cv
26.3086 100.933 26.3965 100.427 26.3965 99.7515 cv
26.3965 99.0767 26.3086 98.5703 26.1401 98.2329 cv
25.9644 97.8955 25.708 97.7266 25.3638 97.7266 cv
25.3638 97.2002 mo
25.9106 97.2002 26.3291 97.4229 26.626 97.855 cv
26.9165 98.2935 27.0649 98.9282 27.0649 99.7515 cv
27.0649 100.582 26.9165 101.216 26.626 101.648 cv
26.3291 102.081 25.9106 102.296 25.3638 102.296 cv
24.8105 102.296 24.3853 102.081 24.0947 101.648 cv
23.8047 101.216 23.6626 100.582 23.6626 99.7515 cv
23.6626 98.9282 23.8047 98.2935 24.0947 97.855 cv
24.3853 97.4229 24.8105 97.2002 25.3638 97.2002 cv
f
29.6567 97.7266 mo
29.3125 97.7266 29.0562 97.8955 28.8804 98.2329 cv
28.7051 98.5703 28.624 99.0767 28.624 99.7515 cv
28.624 100.427 28.7051 100.933 28.8804 101.271 cv
29.0562 101.607 29.3125 101.777 29.6567 101.777 cv
30.001 101.777 30.2573 101.607 30.4331 101.271 cv
30.6016 100.933 30.6895 100.427 30.6895 99.7515 cv
30.6895 99.0767 30.6016 98.5703 30.4331 98.2329 cv
30.2573 97.8955 30.001 97.7266 29.6567 97.7266 cv
29.6567 97.2002 mo
30.2036 97.2002 30.6221 97.4229 30.9189 97.855 cv
31.209 98.2935 31.3579 98.9282 31.3579 99.7515 cv
31.3579 100.582 31.209 101.216 30.9189 101.648 cv
30.6221 102.081 30.2036 102.296 29.6567 102.296 cv
29.103 102.296 28.6777 102.081 28.3877 101.648 cv
28.0977 101.216 27.9556 100.582 27.9556 99.7515 cv
27.9556 98.9282 28.0977 98.2935 28.3877 97.855 cv
28.6777 97.4229 29.103 97.2002 29.6567 97.2002 cv
f
33.2905 76.0454 mo
35.5405 76.0454 li
f
33.2905 76.0454 mo
35.5405 76.0454 li
@
284.391 76.0454 mo
282.141 76.0454 li
f
284.391 76.0454 mo
282.141 76.0454 li
@
16.9995 75.1816 mo
16.7021 75.1816 16.4663 75.2896 16.2905 75.4922 cv
16.1152 75.6948 16.0273 75.978 16.0273 76.3291 cv
16.0273 76.687 16.1152 76.9702 16.2905 77.1729 cv
16.4663 77.3755 16.7021 77.4766 16.9995 77.4766 cv
17.2964 77.4766 17.5327 77.3755 17.708 77.1729 cv
17.8838 76.9702 17.9712 76.687 17.9712 76.3291 cv
17.9712 75.978 17.8838 75.6948 17.708 75.4922 cv
17.5327 75.2896 17.2964 75.1816 16.9995 75.1816 cv
18.3223 73.0962 mo
18.3223 73.7036 li
18.1538 73.6226 17.9849 73.5615 17.8159 73.521 cv
17.6406 73.481 17.4717 73.4604 17.3101 73.4604 cv
16.8643 73.4604 16.5269 73.6089 16.2974 73.9058 cv
16.0679 74.2031 15.9331 74.6553 15.9058 75.249 cv
16.0342 75.0601 16.1963 74.9116 16.3921 74.8105 cv
16.5879 74.709 16.8037 74.6553 17.04 74.6553 cv
17.5327 74.6553 17.9243 74.8105 18.2075 75.1074 cv
18.4912 75.4043 18.6396 75.8159 18.6396 76.3291 cv
18.6396 76.8354 18.4844 77.2402 18.1875 77.5444 cv
17.8906 77.8481 17.4922 77.9966 16.9995 77.9966 cv
16.4326 77.9966 15.9937 77.7803 15.6968 77.3486 cv
15.3931 76.9165 15.2446 76.2817 15.2446 75.4517 cv
15.2446 74.6753 15.4268 74.0542 15.7979 73.5952 cv
16.1626 73.1362 16.6621 72.8999 17.2827 72.8999 cv
17.4448 72.8999 17.6138 72.9204 17.7891 72.9473 cv
17.958 72.981 18.1333 73.0283 18.3223 73.0962 cv
f
21.2114 73.4268 mo
20.8672 73.4268 20.6108 73.5952 20.4355 73.9331 cv
20.2598 74.2705 20.1787 74.7769 20.1787 75.4517 cv
20.1787 76.1265 20.2598 76.6328 20.4355 76.9702 cv
20.6108 77.3081 20.8672 77.4766 21.2114 77.4766 cv
21.5557 77.4766 21.8125 77.3081 21.9878 76.9702 cv
22.1567 76.6328 22.2441 76.1265 22.2441 75.4517 cv
22.2441 74.7769 22.1567 74.2705 21.9878 73.9331 cv
21.8125 73.5952 21.5557 73.4268 21.2114 73.4268 cv
21.2114 72.8999 mo
21.7583 72.8999 22.1768 73.123 22.4736 73.5547 cv
22.7642 73.9937 22.9126 74.6279 22.9126 75.4517 cv
22.9126 76.2817 22.7642 76.9165 22.4736 77.3481 cv
22.1768 77.7803 21.7583 77.9966 21.2114 77.9966 cv
20.6582 77.9966 20.2329 77.7803 19.9424 77.3481 cv
19.6523 76.9165 19.5107 76.2817 19.5107 75.4517 cv
19.5107 74.6279 19.6523 73.9937 19.9424 73.5547 cv
20.2329 73.123 20.6582 72.8999 21.2114 72.8999 cv
f
25.5044 73.4268 mo
25.1602 73.4268 24.9038 73.5952 24.728 73.9331 cv
24.5527 74.2705 24.4717 74.7769 24.4717 75.4517 cv
24.4717 76.1265 24.5527 76.6328 24.728 76.9702 cv
24.9038 77.3081 25.1602 77.4766 25.5044 77.4766 cv
25.8486 77.4766 26.105 77.3081 26.2808 76.9702 cv
26.4492 76.6328 26.5371 76.1265 26.5371 75.4517 cv
26.5371 74.7769 26.4492 74.2705 26.2808 73.9331 cv
26.105 73.5952 25.8486 73.4268 25.5044 73.4268 cv
25.5044 72.8999 mo
26.0513 72.8999 26.4697 73.123 26.7666 73.5547 cv
27.0571 73.9937 27.2056 74.6279 27.2056 75.4517 cv
27.2056 76.2817 27.0571 76.9165 26.7666 77.3481 cv
26.4697 77.7803 26.0513 77.9966 25.5044 77.9966 cv
24.9512 77.9966 24.5259 77.7803 24.2354 77.3481 cv
23.9453 76.9165 23.8032 76.2817 23.8032 75.4517 cv
23.8032 74.6279 23.9453 73.9937 24.2354 73.5547 cv
24.5259 73.123 24.9512 72.8999 25.5044 72.8999 cv
f
29.7974 73.4268 mo
29.4531 73.4268 29.1968 73.5952 29.021 73.9331 cv
28.8457 74.2705 28.7646 74.7769 28.7646 75.4517 cv
28.7646 76.1265 28.8457 76.6328 29.021 76.9702 cv
29.1968 77.3081 29.4531 77.4766 29.7974 77.4766 cv
30.1416 77.4766 30.3979 77.3081 30.5737 76.9702 cv
30.7422 76.6328 30.8301 76.1265 30.8301 75.4517 cv
30.8301 74.7769 30.7422 74.2705 30.5737 73.9331 cv
30.3979 73.5952 30.1416 73.4268 29.7974 73.4268 cv
29.7974 72.8999 mo
30.3442 72.8999 30.7627 73.123 31.0596 73.5547 cv
31.3496 73.9937 31.4985 74.6279 31.4985 75.4517 cv
31.4985 76.2817 31.3496 76.9165 31.0596 77.3481 cv
30.7627 77.7803 30.3442 77.9966 29.7974 77.9966 cv
29.2437 77.9966 28.8184 77.7803 28.5283 77.3481 cv
28.2383 76.9165 28.0962 76.2817 28.0962 75.4517 cv
28.0962 74.6279 28.2383 73.9937 28.5283 73.5547 cv
28.8184 73.123 29.2437 72.8999 29.7974 72.8999 cv
f
33.2905 51.7456 mo
35.5405 51.7456 li
f
33.2905 51.7456 mo
35.5405 51.7456 li
@
284.391 51.7456 mo
282.141 51.7456 li
f
284.391 51.7456 mo
282.141 51.7456 li
@
16.9009 51.2734 mo
16.5835 51.2734 16.334 51.3608 16.1514 51.5298 cv
15.9692 51.6987 15.8813 51.9282 15.8813 52.2251 cv
15.8813 52.522 15.9692 52.7583 16.1514 52.9272 cv
16.334 53.0957 16.5835 53.1768 16.9009 53.1768 cv
17.2114 53.1768 17.4609 53.0957 17.6431 52.9204 cv
17.8257 52.7515 17.9199 52.522 17.9199 52.2251 cv
17.9199 51.9282 17.8257 51.6987 17.6499 51.5298 cv
17.4678 51.3608 17.2183 51.2734 16.9009 51.2734 cv
16.2324 50.9897 mo
15.9492 50.9224 15.7261 50.7871 15.5645 50.5913 cv
15.4023 50.396 15.3281 50.1597 15.3281 49.876 cv
15.3281 49.4844 15.4629 49.1738 15.7466 48.9443 cv
16.0234 48.7148 16.4082 48.6001 16.9009 48.6001 cv
17.3867 48.6001 17.7715 48.7148 18.0552 48.9443 cv
18.332 49.1738 18.4736 49.4844 18.4736 49.876 cv
18.4736 50.1597 18.3926 50.396 18.2305 50.5913 cv
18.0684 50.7871 17.8525 50.9224 17.5688 50.9897 cv
17.8862 51.064 18.1362 51.2124 18.3184 51.4282 cv
18.4937 51.6445 18.5884 51.9146 18.5884 52.2251 cv
18.5884 52.7041 18.4399 53.0688 18.1494 53.3184 cv
17.8525 53.5752 17.4409 53.6968 16.9009 53.6968 cv
16.354 53.6968 15.9355 53.5752 15.6455 53.3184 cv
15.355 53.0688 15.2134 52.7041 15.2134 52.2251 cv
15.2134 51.9146 15.3013 51.6445 15.4834 51.4282 cv
15.6587 51.2124 15.9087 51.064 16.2324 50.9897 cv
15.9897 49.937 mo
15.9897 50.1934 16.064 50.396 16.2256 50.5376 cv
16.3877 50.6792 16.6104 50.7466 16.9009 50.7466 cv
17.1841 50.7466 17.4072 50.6792 17.5688 50.5376 cv
17.731 50.396 17.812 50.1934 17.812 49.937 cv
17.812 49.6802 17.731 49.4844 17.5688 49.3428 cv
17.4072 49.2012 17.1841 49.127 16.9009 49.127 cv
16.6104 49.127 16.3877 49.2012 16.2256 49.3428 cv
16.064 49.4844 15.9897 49.6802 15.9897 49.937 cv
f
21.1938 49.1265 mo
20.8496 49.1265 20.5933 49.2954 20.4175 49.6328 cv
20.2422 49.9702 20.1611 50.4766 20.1611 51.1514 cv
20.1611 51.8267 20.2422 52.3325 20.4175 52.6704 cv
20.5933 53.0078 20.8496 53.1763 21.1938 53.1763 cv
21.5381 53.1763 21.7949 53.0078 21.9702 52.6704 cv
22.1392 52.3325 22.2266 51.8267 22.2266 51.1514 cv
22.2266 50.4766 22.1392 49.9702 21.9702 49.6328 cv
21.7949 49.2954 21.5381 49.1265 21.1938 49.1265 cv
21.1938 48.6001 mo
21.7407 48.6001 22.1592 48.8228 22.4561 49.2549 cv
22.7466 49.6934 22.895 50.3281 22.895 51.1514 cv
22.895 51.9819 22.7466 52.6162 22.4561 53.0483 cv
22.1592 53.4805 21.7407 53.6963 21.1938 53.6963 cv
20.6406 53.6963 20.2153 53.4805 19.9248 53.0483 cv
19.6348 52.6162 19.4932 51.9819 19.4932 51.1514 cv
19.4932 50.3281 19.6348 49.6934 19.9248 49.2549 cv
20.2153 48.8228 20.6406 48.6001 21.1938 48.6001 cv
f
25.4868 49.1265 mo
25.1426 49.1265 24.8862 49.2954 24.7104 49.6328 cv
24.5352 49.9702 24.4541 50.4766 24.4541 51.1514 cv
24.4541 51.8267 24.5352 52.3325 24.7104 52.6704 cv
24.8862 53.0078 25.1426 53.1763 25.4868 53.1763 cv
25.8311 53.1763 26.0879 53.0078 26.2632 52.6704 cv
26.4321 52.3325 26.5195 51.8267 26.5195 51.1514 cv
26.5195 50.4766 26.4321 49.9702 26.2632 49.6328 cv
26.0879 49.2954 25.8311 49.1265 25.4868 49.1265 cv
25.4868 48.6001 mo
26.0337 48.6001 26.4521 48.8228 26.749 49.2549 cv
27.0396 49.6934 27.188 50.3281 27.188 51.1514 cv
27.188 51.9819 27.0396 52.6162 26.749 53.0483 cv
26.4521 53.4805 26.0337 53.6963 25.4868 53.6963 cv
24.9336 53.6963 24.5083 53.4805 24.2178 53.0483 cv
23.9277 52.6162 23.7861 51.9819 23.7861 51.1514 cv
23.7861 50.3281 23.9277 49.6934 24.2178 49.2549 cv
24.5083 48.8228 24.9336 48.6001 25.4868 48.6001 cv
f
29.7798 49.1265 mo
29.4355 49.1265 29.1792 49.2954 29.0034 49.6328 cv
28.8281 49.9702 28.7471 50.4766 28.7471 51.1514 cv
28.7471 51.8267 28.8281 52.3325 29.0034 52.6704 cv
29.1792 53.0078 29.4355 53.1763 29.7798 53.1763 cv
30.124 53.1763 30.3804 53.0078 30.5562 52.6704 cv
30.7246 52.3325 30.8125 51.8267 30.8125 51.1514 cv
30.8125 50.4766 30.7246 49.9702 30.5562 49.6328 cv
30.3804 49.2954 30.124 49.1265 29.7798 49.1265 cv
29.7798 48.6001 mo
30.3267 48.6001 30.7451 48.8228 31.042 49.2549 cv
31.3325 49.6934 31.481 50.3281 31.481 51.1514 cv
31.481 51.9819 31.3325 52.6162 31.042 53.0483 cv
30.7451 53.4805 30.3267 53.6963 29.7798 53.6963 cv
29.2261 53.6963 28.8013 53.4805 28.5107 53.0483 cv
28.2207 52.6162 28.0786 51.9819 28.0786 51.1514 cv
28.0786 50.3281 28.2207 49.6934 28.5107 49.2549 cv
28.8013 48.8228 29.2261 48.6001 29.7798 48.6001 cv
f
33.2905 27.4453 mo
35.5405 27.4453 li
f
33.2905 27.4453 mo
35.5405 27.4453 li
@
284.391 27.4453 mo
282.141 27.4453 li
f
284.391 27.4453 mo
282.141 27.4453 li
@
11.5747 28.7485 mo
12.6611 28.7485 li
12.6611 24.9951 li
11.48 25.2314 li
11.48 24.624 li
12.6548 24.3877 li
13.3228 24.3877 li
13.3228 28.7485 li
14.4097 28.7485 li
14.4097 29.3086 li
11.5747 29.3086 li
11.5747 28.7485 li
cp
f
17.1772 24.8267 mo
16.833 24.8267 16.5767 24.9956 16.4014 25.333 cv
16.2256 25.6704 16.1445 26.1768 16.1445 26.8516 cv
16.1445 27.5269 16.2256 28.0327 16.4014 28.3706 cv
16.5767 28.708 16.833 28.8765 17.1772 28.8765 cv
17.5215 28.8765 17.7783 28.708 17.9536 28.3706 cv
18.1226 28.0327 18.21 27.5269 18.21 26.8516 cv
18.21 26.1768 18.1226 25.6704 17.9536 25.333 cv
17.7783 24.9956 17.5215 24.8267 17.1772 24.8267 cv
17.1772 24.3003 mo
17.7241 24.3003 18.1426 24.5229 18.4395 24.9551 cv
18.73 25.3936 18.8784 26.0283 18.8784 26.8516 cv
18.8784 27.6821 18.73 28.3164 18.4395 28.7485 cv
18.1426 29.1802 17.7241 29.3965 17.1772 29.3965 cv
16.624 29.3965 16.1987 29.1802 15.9082 28.7485 cv
15.6182 28.3164 15.4766 27.6821 15.4766 26.8516 cv
15.4766 26.0283 15.6182 25.3936 15.9082 24.9551 cv
16.1987 24.5229 16.624 24.3003 17.1772 24.3003 cv
f
21.4702 24.8267 mo
21.126 24.8267 20.8696 24.9956 20.6938 25.333 cv
20.5186 25.6704 20.4375 26.1768 20.4375 26.8516 cv
20.4375 27.5269 20.5186 28.0327 20.6938 28.3706 cv
20.8696 28.708 21.126 28.8765 21.4702 28.8765 cv
21.8145 28.8765 22.0708 28.708 22.2466 28.3706 cv
22.415 28.0327 22.5029 27.5269 22.5029 26.8516 cv
22.5029 26.1768 22.415 25.6704 22.2466 25.333 cv
22.0708 24.9956 21.8145 24.8267 21.4702 24.8267 cv
21.4702 24.3003 mo
22.0171 24.3003 22.4355 24.5229 22.7324 24.9551 cv
23.0229 25.3936 23.1714 26.0283 23.1714 26.8516 cv
23.1714 27.6821 23.0229 28.3164 22.7324 28.7485 cv
22.4355 29.1802 22.0171 29.3965 21.4702 29.3965 cv
20.917 29.3965 20.4917 29.1802 20.2012 28.7485 cv
19.9111 28.3164 19.769 27.6821 19.769 26.8516 cv
19.769 26.0283 19.9111 25.3936 20.2012 24.9551 cv
20.4917 24.5229 20.917 24.3003 21.4702 24.3003 cv
f
25.7632 24.8267 mo
25.4189 24.8267 25.1626 24.9956 24.9868 25.333 cv
24.8115 25.6704 24.7305 26.1768 24.7305 26.8516 cv
24.7305 27.5269 24.8115 28.0327 24.9868 28.3706 cv
25.1626 28.708 25.4189 28.8765 25.7632 28.8765 cv
26.1074 28.8765 26.3638 28.708 26.5396 28.3706 cv
26.708 28.0327 26.7959 27.5269 26.7959 26.8516 cv
26.7959 26.1768 26.708 25.6704 26.5396 25.333 cv
26.3638 24.9956 26.1074 24.8267 25.7632 24.8267 cv
25.7632 24.3003 mo
26.3101 24.3003 26.7285 24.5229 27.0254 24.9551 cv
27.3159 25.3936 27.4644 26.0283 27.4644 26.8516 cv
27.4644 27.6821 27.3159 28.3164 27.0254 28.7485 cv
26.7285 29.1802 26.3101 29.3965 25.7632 29.3965 cv
25.2095 29.3965 24.7847 29.1802 24.4941 28.7485 cv
24.2041 28.3164 24.062 27.6821 24.062 26.8516 cv
24.062 26.0283 24.2041 25.3936 24.4941 24.9551 cv
24.7847 24.5229 25.2095 24.3003 25.7632 24.3003 cv
f
30.0562 24.8267 mo
29.7119 24.8267 29.4556 24.9956 29.2803 25.333 cv
29.1045 25.6704 29.0234 26.1768 29.0234 26.8516 cv
29.0234 27.5269 29.1045 28.0327 29.2803 28.3706 cv
29.4556 28.708 29.7119 28.8765 30.0562 28.8765 cv
30.4004 28.8765 30.6572 28.708 30.8325 28.3706 cv
31.0015 28.0327 31.0894 27.5269 31.0894 26.8516 cv
31.0894 26.1768 31.0015 25.6704 30.8325 25.333 cv
30.6572 24.9956 30.4004 24.8267 30.0562 24.8267 cv
30.0562 24.3003 mo
30.603 24.3003 31.0215 24.5229 31.3188 24.9551 cv
31.6089 25.3936 31.7573 26.0283 31.7573 26.8516 cv
31.7573 27.6821 31.6089 28.3164 31.3188 28.7485 cv
31.0215 29.1802 30.603 29.3965 30.0562 29.3965 cv
29.5029 29.3965 29.0776 29.1802 28.7876 28.7485 cv
28.4971 28.3164 28.3555 27.6821 28.3555 26.8516 cv
28.3555 26.0283 28.4971 25.3936 28.7876 24.9551 cv
29.0776 24.5229 29.5029 24.3003 30.0562 24.3003 cv
f
33.2905 3.14551 mo
35.5405 3.14551 li
f
33.2905 3.14551 mo
35.5405 3.14551 li
@
284.391 3.14551 mo
282.141 3.14551 li
f
284.391 3.14551 mo
282.141 3.14551 li
@
11.5747 4.44824 mo
12.6611 4.44824 li
12.6611 .695313 li
11.48 .931641 li
11.48 .324219 li
12.6548 .0878906 li
13.3228 .0878906 li
13.3228 4.44824 li
14.4097 4.44824 li
14.4097 5.00879 li
11.5747 5.00879 li
11.5747 4.44824 li
cp
f
16.3267 4.44824 mo
18.6489 4.44824 li
18.6489 5.00879 li
15.5234 5.00879 li
15.5234 4.44824 li
15.7734 4.19189 16.1177 3.84082 16.5562 3.39551 cv
16.9883 2.95654 17.2651 2.67334 17.3799 2.54492 cv
17.5957 2.30859 17.7441 2.10596 17.8252 1.9375 cv
17.9063 1.77539 17.9536 1.60693 17.9536 1.44482 cv
17.9536 1.18799 17.8589 .972168 17.6768 .810059 cv
17.4946 .647949 17.2583 .560547 16.9614 .560547 cv
16.752 .560547 16.5293 .601074 16.2998 .668457 cv
16.0703 .742676 15.8203 .850586 15.5571 .999023 cv
15.5571 .324219 li
15.8271 .216309 16.0771 .135254 16.3066 .0810547 cv
16.5361 .0273438 16.752 0 16.9478 0 cv
17.4541 0 17.8589 .128418 18.1626 .384766 cv
18.4663 .641602 18.6216 .979004 18.6216 1.4043 cv
18.6216 1.60693 18.5811 1.80225 18.5068 1.97803 cv
18.4326 2.16016 18.2979 2.37598 18.0952 2.61914 cv
18.041 2.68652 17.8657 2.86865 17.5688 3.17285 cv
17.272 3.47656 16.8599 3.90186 16.3267 4.44824 cv
f
21.4702 .526367 mo
21.126 .526367 20.8696 .695313 20.6938 1.03271 cv
20.5186 1.37012 20.4375 1.87646 20.4375 2.55176 cv
20.4375 3.22656 20.5186 3.73291 20.6938 4.07031 cv
20.8696 4.40771 21.126 4.57666 21.4702 4.57666 cv
21.8145 4.57666 22.0708 4.40771 22.2466 4.07031 cv
22.415 3.73291 22.5029 3.22656 22.5029 2.55176 cv
22.5029 1.87646 22.415 1.37012 22.2466 1.03271 cv
22.0708 .695313 21.8145 .526367 21.4702 .526367 cv
21.4702 0 mo
22.0171 0 22.4355 .222656 22.7324 .654785 cv
23.0229 1.09375 23.1714 1.72803 23.1714 2.55176 cv
23.1714 3.38184 23.0229 4.01611 22.7324 4.44824 cv
22.4355 4.88037 22.0171 5.09619 21.4702 5.09619 cv
20.917 5.09619 20.4917 4.88037 20.2012 4.44824 cv
19.9111 4.01611 19.769 3.38184 19.769 2.55176 cv
19.769 1.72803 19.9111 1.09375 20.2012 .654785 cv
20.4917 .222656 20.917 0 21.4702 0 cv
f
25.7632 .526367 mo
25.4189 .526367 25.1626 .695313 24.9868 1.03271 cv
24.8115 1.37012 24.7305 1.87646 24.7305 2.55176 cv
24.7305 3.22656 24.8115 3.73291 24.9868 4.07031 cv
25.1626 4.40771 25.4189 4.57666 25.7632 4.57666 cv
26.1074 4.57666 26.3638 4.40771 26.5396 4.07031 cv
26.708 3.73291 26.7959 3.22656 26.7959 2.55176 cv
26.7959 1.87646 26.708 1.37012 26.5396 1.03271 cv
26.3638 .695313 26.1074 .526367 25.7632 .526367 cv
25.7632 0 mo
26.3101 0 26.7285 .222656 27.0254 .654785 cv
27.3159 1.09375 27.4644 1.72803 27.4644 2.55176 cv
27.4644 3.38184 27.3159 4.01611 27.0254 4.44824 cv
26.7285 4.88037 26.3101 5.09619 25.7632 5.09619 cv
25.2095 5.09619 24.7847 4.88037 24.4941 4.44824 cv
24.2041 4.01611 24.062 3.38184 24.062 2.55176 cv
24.062 1.72803 24.2041 1.09375 24.4941 .654785 cv
24.7847 .222656 25.2095 0 25.7632 0 cv
f
30.0562 .526367 mo
29.7119 .526367 29.4556 .695313 29.2803 1.03271 cv
29.1045 1.37012 29.0234 1.87646 29.0234 2.55176 cv
29.0234 3.22656 29.1045 3.73291 29.2803 4.07031 cv
29.4556 4.40771 29.7119 4.57666 30.0562 4.57666 cv
30.4004 4.57666 30.6572 4.40771 30.8325 4.07031 cv
31.0015 3.73291 31.0894 3.22656 31.0894 2.55176 cv
31.0894 1.87646 31.0015 1.37012 30.8325 1.03271 cv
30.6572 .695313 30.4004 .526367 30.0562 .526367 cv
30.0562 0 mo
30.603 0 31.0215 .222656 31.3188 .654785 cv
31.6089 1.09375 31.7573 1.72803 31.7573 2.55176 cv
31.7573 3.38184 31.6089 4.01611 31.3188 4.44824 cv
31.0215 4.88037 30.603 5.09619 30.0562 5.09619 cv
29.5029 5.09619 29.0776 4.88037 28.7876 4.44824 cv
28.4971 4.01611 28.3555 3.38184 28.3555 2.55176 cv
28.3555 1.72803 28.4971 1.09375 28.7876 .654785 cv
29.0776 .222656 29.5029 0 30.0562 0 cv
f
.209473 132.858 mo
.209473 130.03 li
.77002 130.03 li
.77002 132.19 li
2.22119 132.19 li
2.22119 130.239 li
2.78125 130.239 li
2.78125 132.19 li
5.13037 132.19 li
5.13037 132.858 li
.209473 132.858 li
cp
f
1.43848 128.396 mo
5.13037 128.396 li
5.13037 129.003 li
1.43848 129.003 li
1.43848 128.396 li
cp
0 128.396 mo
.769531 128.396 li
.769531 129.003 li
0 129.003 li
0 128.396 li
cp
f
1.5459 124.772 mo
2.11963 124.772 li
2.03857 124.947 1.97119 125.123 1.92383 125.305 cv
1.8833 125.494 1.85645 125.683 1.85645 125.879 cv
1.85645 126.183 1.90381 126.412 1.99805 126.561 cv
2.09277 126.708 2.22754 126.783 2.41016 126.783 cv
2.55176 126.783 2.65967 126.729 2.74072 126.621 cv
2.82178 126.513 2.90283 126.297 2.97021 125.973 cv
3.01758 125.764 li
3.11182 125.332 3.24707 125.028 3.40918 124.846 cv
3.57764 124.67 3.81396 124.576 4.11084 124.576 cv
4.45508 124.576 4.7251 124.711 4.9209 124.981 cv
5.12354 125.251 5.21777 125.628 5.21777 126.102 cv
5.21777 126.304 5.19775 126.506 5.16406 126.723 cv
5.13037 126.938 5.07617 127.161 4.99512 127.397 cv
4.36768 127.397 li
4.48877 127.174 4.57666 126.952 4.63086 126.736 cv
4.69141 126.52 4.71875 126.304 4.71875 126.088 cv
4.71875 125.805 4.67139 125.581 4.57666 125.426 cv
4.48242 125.277 4.34033 125.197 4.1582 125.197 cv
3.99609 125.197 3.86816 125.258 3.78027 125.366 cv
3.69238 125.474 3.60498 125.717 3.52393 126.095 cv
3.47656 126.304 li
3.39551 126.682 3.27393 126.959 3.11182 127.121 cv
2.9502 127.29 2.72705 127.371 2.43701 127.371 cv
2.09277 127.371 1.82275 127.249 1.63379 127.006 cv
1.44482 126.763 1.3501 126.412 1.3501 125.953 cv
1.3501 125.73 1.37061 125.521 1.4043 125.318 cv
1.43799 125.123 1.48535 124.94 1.5459 124.772 cv
f
2.90283 120.54 mo
5.13037 120.54 li
5.13037 121.147 li
2.92285 121.147 li
2.57227 121.147 2.31543 121.221 2.14014 121.356 cv
1.96436 121.491 1.87695 121.694 1.87695 121.963 cv
1.87695 122.294 1.98486 122.551 2.19385 122.74 cv
2.40332 122.929 2.68701 123.023 3.04443 123.023 cv
5.13037 123.023 li
5.13037 123.631 li
.000488281 123.631 li
.000488281 123.023 li
2.01172 123.023 li
1.7959 122.881 1.62695 122.713 1.51904 122.51 cv
1.41113 122.314 1.3501 122.085 1.3501 121.829 cv
1.3501 121.41 1.48535 121.086 1.74854 120.87 cv
2.01172 120.654 2.39648 120.54 2.90283 120.54 cv
f
.756348 116.49 mo
2.60596 116.49 li
2.60596 115.653 li
2.60596 115.342 2.53174 115.105 2.36963 114.937 cv
2.20752 114.768 1.97803 114.68 1.68115 114.68 cv
1.38428 114.68 1.16113 114.768 .999512 114.937 cv
.837402 115.105 .756348 115.342 .756348 115.653 cv
.756348 116.49 li
.209473 117.158 mo
.209473 115.653 li
.209473 115.105 .337891 114.688 .587402 114.404 cv
.837402 114.12 1.20166 113.978 1.68115 113.978 cv
2.16699 113.978 2.53857 114.12 2.78125 114.404 cv
3.03125 114.688 3.15283 115.105 3.15283 115.653 cv
3.15283 116.49 li
5.13037 116.49 li
5.13037 117.158 li
.209473 117.158 li
f
1.86328 111.683 mo
1.86328 112.007 1.9917 112.264 2.24805 112.453 cv
2.50439 112.642 2.84863 112.736 3.2876 112.736 cv
3.73291 112.736 4.07715 112.649 4.33398 112.46 cv
4.59033 112.271 4.71191 112.015 4.71191 111.683 cv
4.71191 111.36 4.59033 111.103 4.33398 110.914 cv
4.07715 110.725 3.73291 110.631 3.2876 110.631 cv
2.85547 110.631 2.50439 110.725 2.24805 110.914 cv
1.9917 111.103 1.86328 111.36 1.86328 111.683 cv
1.3501 111.683 mo
1.3501 111.157 1.52588 110.745 1.86328 110.442 cv
2.20752 110.145 2.68018 109.989 3.2876 109.989 cv
3.89502 109.989 4.36768 110.145 4.70508 110.442 cv
5.04932 110.745 5.21777 111.157 5.21777 111.683 cv
5.21777 112.216 5.04932 112.635 4.70508 112.933 cv
4.36768 113.229 3.89502 113.378 3.2876 113.378 cv
2.68018 113.378 2.20752 113.229 1.86328 112.933 cv
1.52588 112.635 1.3501 112.216 1.3501 111.683 cv
f
4.57666 108.396 mo
6.52783 108.396 li
6.52783 109.003 li
1.43799 109.003 li
1.43799 108.396 li
1.99854 108.396 li
1.78223 108.275 1.62012 108.113 1.51221 107.917 cv
1.4043 107.721 1.35059 107.485 1.35059 107.215 cv
1.35059 106.77 1.53271 106.405 1.88379 106.122 cv
2.24121 105.845 2.70703 105.703 3.2876 105.703 cv
3.86816 105.703 4.34082 105.845 4.69141 106.122 cv
5.04248 106.405 5.21826 106.77 5.21826 107.215 cv
5.21826 107.485 5.16406 107.721 5.06299 107.917 cv
4.96143 108.113 4.7998 108.275 4.57666 108.396 cv
3.2876 106.331 mo
2.84229 106.331 2.49805 106.425 2.24121 106.607 cv
1.98486 106.796 1.85645 107.047 1.85645 107.363 cv
1.85645 107.688 1.98486 107.938 2.24121 108.12 cv
2.49805 108.308 2.84229 108.396 3.2876 108.396 cv
3.73291 108.396 4.08398 108.308 4.34082 108.12 cv
4.59717 107.938 4.71875 107.688 4.71875 107.363 cv
4.71875 107.047 4.59717 106.796 4.34082 106.607 cv
4.08398 106.425 3.73291 106.331 3.2876 106.331 cv
f
3.67236 104.758 mo
1.43799 104.758 li
1.43799 104.15 li
3.65234 104.15 li
4.00293 104.15 4.25977 104.083 4.43506 103.949 cv
4.61084 103.813 4.69824 103.61 4.69824 103.333 cv
4.69824 103.01 4.59717 102.747 4.3877 102.558 cv
4.17871 102.369 3.89502 102.274 3.53076 102.274 cv
1.43799 102.274 li
1.43799 101.667 li
5.13037 101.667 li
5.13037 102.274 li
4.56348 102.274 li
4.79297 102.422 4.95508 102.598 5.06299 102.787 cv
5.16406 102.983 5.21826 103.206 5.21826 103.462 cv
5.21826 103.887 5.08984 104.211 4.82666 104.427 cv
4.57031 104.65 4.18555 104.758 3.67236 104.758 cv
f
0 99.8105 mo
5.12988 99.8105 li
5.12988 100.418 li
0 100.418 li
0 99.8105 li
cp
f
3.27441 96.8604 mo
3.27441 97.353 3.33496 97.6909 3.44287 97.8799 cv
3.55762 98.0688 3.74658 98.1631 4.0166 98.1631 cv
4.23242 98.1631 4.4082 98.0957 4.52979 97.9541 cv
4.65771 97.812 4.71875 97.6167 4.71875 97.3735 cv
4.71875 97.0361 4.604 96.7661 4.36084 96.5635 cv
4.12451 96.3608 3.80762 96.2598 3.40918 96.2598 cv
3.27441 96.2598 li
3.27441 96.8604 li
3.02441 95.6523 mo
5.13037 95.6523 li
5.13037 96.2598 li
4.57031 96.2598 li
4.7998 96.4014 4.96191 96.5771 5.06299 96.7793 cv
5.16406 96.9819 5.21826 97.2383 5.21826 97.5356 cv
5.21826 97.9136 5.1167 98.2173 4.90771 98.4399 cv
4.69824 98.6626 4.41504 98.771 4.05713 98.771 cv
3.64551 98.771 3.33496 98.6357 3.11914 98.3521 cv
2.90967 98.0757 2.80176 97.6636 2.80176 97.1104 cv
2.80176 96.2598 li
2.74072 96.2598 li
2.46436 96.2598 2.24805 96.354 2.09277 96.5366 cv
1.94434 96.7188 1.86328 96.9751 1.86328 97.3062 cv
1.86328 97.522 1.89063 97.7246 1.94434 97.9272 cv
1.99854 98.1294 2.07275 98.3184 2.16699 98.5005 cv
1.60693 98.5005 li
1.52588 98.2847 1.4585 98.0688 1.41797 97.8594 cv
1.37744 97.6504 1.35059 97.4478 1.35059 97.2451 cv
1.35059 96.7119 1.49219 96.314 1.76904 96.0503 cv
2.0459 95.7871 2.46436 95.6523 3.02441 95.6523 cv
f
.39209 93.8027 mo
1.43799 93.8027 li
1.43799 92.5542 li
1.91064 92.5542 li
1.91064 93.8027 li
3.91553 93.8027 li
4.21924 93.8027 4.41504 93.7622 4.49609 93.6812 cv
4.5835 93.6001 4.62402 93.4316 4.62402 93.1748 cv
4.62402 92.5542 li
5.13037 92.5542 li
5.13037 93.1748 li
5.13037 93.6475 5.04248 93.9717 4.86719 94.147 cv
4.69189 94.3228 4.37451 94.4102 3.91553 94.4102 cv
1.91064 94.4102 li
1.91064 94.856 li
1.43799 94.856 li
1.43799 94.4102 li
.39209 94.4102 li
.39209 93.8027 li
f
1.43848 91.1499 mo
5.13037 91.1499 li
5.13037 91.7578 li
1.43848 91.7578 li
1.43848 91.1499 li
cp
0 91.1499 mo
.769531 91.1499 li
.769531 91.7578 li
0 91.7578 li
0 91.1499 li
cp
f
1.86328 88.4497 mo
1.86328 88.7739 1.9917 89.0303 2.24805 89.2192 cv
2.50439 89.4082 2.84863 89.5029 3.2876 89.5029 cv
3.73291 89.5029 4.07715 89.415 4.33398 89.2261 cv
4.59033 89.0371 4.71191 88.7808 4.71191 88.4497 cv
4.71191 88.126 4.59033 87.8696 4.33398 87.6802 cv
4.07715 87.4912 3.73291 87.397 3.2876 87.397 cv
2.85547 87.397 2.50439 87.4912 2.24805 87.6802 cv
1.9917 87.8696 1.86328 88.126 1.86328 88.4497 cv
1.3501 88.4497 mo
1.3501 87.9233 1.52588 87.5117 1.86328 87.208 cv
2.20752 86.9106 2.68018 86.7554 3.2876 86.7554 cv
3.89502 86.7554 4.36768 86.9106 4.70508 87.208 cv
5.04932 87.5117 5.21777 87.9233 5.21777 88.4497 cv
5.21777 88.9829 5.04932 89.4019 4.70508 89.6987 cv
4.36768 89.9956 3.89502 90.144 3.2876 90.144 cv
2.68018 90.144 2.20752 89.9956 1.86328 89.6987 cv
1.52588 89.4019 1.3501 88.9829 1.3501 88.4497 cv
f
2.90283 82.6787 mo
5.13037 82.6787 li
5.13037 83.2861 li
2.92285 83.2861 li
2.57227 83.2861 2.31543 83.3604 2.14014 83.4956 cv
1.96436 83.6304 1.87695 83.833 1.87695 84.103 cv
1.87695 84.4336 1.98486 84.6904 2.19385 84.8794 cv
2.40332 85.0684 2.68701 85.1626 3.04443 85.1626 cv
5.13037 85.1626 li
5.13037 85.77 li
1.43799 85.77 li
1.43799 85.1626 li
2.01172 85.1626 li
1.7959 85.021 1.62695 84.8521 1.51904 84.6499 cv
1.41113 84.4541 1.3501 84.2246 1.3501 83.9683 cv
1.3501 83.5493 1.48535 83.2256 1.74854 83.0093 cv
2.01172 82.7935 2.39648 82.6787 2.90283 82.6787 cv
f
.371582 76.3472 mo
1.01953 76.3472 li
.897949 76.604 .810547 76.8403 .749512 77.063 cv
.695313 77.2925 .661621 77.5083 .661621 77.7109 cv
.661621 78.0752 .73584 78.3589 .871094 78.5547 cv
1.0127 78.7505 1.21533 78.8447 1.47168 78.8447 cv
1.68799 78.8447 1.85645 78.7842 1.96436 78.6489 cv
2.0791 78.521 2.16699 78.271 2.23438 77.9067 cv
2.31543 77.5015 li
2.41016 77.0088 2.57861 76.6445 2.81494 76.4082 cv
3.05811 76.1719 3.37549 76.0503 3.77344 76.0503 cv
4.25293 76.0503 4.61035 76.2124 4.85352 76.5298 cv
5.09668 76.8535 5.21826 77.3193 5.21826 77.9336 cv
5.21826 78.1699 5.19092 78.4194 5.14404 78.6831 cv
5.09668 78.9463 5.02246 79.2163 4.91406 79.4927 cv
4.22559 79.4927 li
4.38086 79.2227 4.49561 78.9595 4.56982 78.7031 cv
4.65088 78.4468 4.68457 78.1899 4.68457 77.9336 cv
4.68457 77.5557 4.61035 77.2651 4.46191 77.0562 cv
4.31348 76.8535 4.10449 76.7456 3.8208 76.7456 cv
3.57764 76.7456 3.38867 76.8198 3.25391 76.9683 cv
3.11865 77.1167 3.01758 77.3599 2.9502 77.6973 cv
2.86914 78.1025 li
2.77441 78.6021 2.61914 78.9595 2.40332 79.1821 cv
2.19385 79.4053 1.90381 79.5132 1.52588 79.5132 cv
1.09375 79.5132 .749512 79.3647 .5 79.0542 cv
.25 78.7505 .121582 78.3252 .121582 77.7852 cv
.121582 77.5557 .14209 77.3262 .182617 77.083 cv
.223145 76.8467 .290527 76.604 .371582 76.3472 cv
f
1.43848 74.4302 mo
5.13037 74.4302 li
5.13037 75.0381 li
1.43848 75.0381 li
1.43848 74.4302 li
cp
0 74.4302 mo
.769531 74.4302 li
.769531 75.0381 li
0 75.0381 li
0 74.4302 li
cp
f
1.43799 73.4243 mo
1.43799 70.542 li
1.9917 70.542 li
4.64453 72.8237 li
4.64453 70.542 li
5.13037 70.542 li
5.13037 73.5054 li
4.57666 73.5054 li
1.92383 71.2241 li
1.92383 73.4243 li
1.43799 73.4243 li
cp
f
3.13232 66.4585 mo
3.4292 66.4585 li
3.4292 69.2466 li
3.84814 69.2192 4.17188 69.0977 4.3877 68.8682 cv
4.604 68.6455 4.71191 68.335 4.71191 67.9302 cv
4.71191 67.7007 4.68506 67.4712 4.63086 67.2549 cv
4.57715 67.0391 4.48926 66.8164 4.36768 66.6001 cv
4.94141 66.6001 li
5.03613 66.8164 5.11035 67.0391 5.15088 67.2686 cv
5.19141 67.498 5.21826 67.7344 5.21826 67.9639 cv
5.21826 68.5576 5.04932 69.0234 4.71191 69.3677 cv
4.37451 69.7119 3.90869 69.8809 3.32129 69.8809 cv
2.7207 69.8809 2.24121 69.7188 1.88379 69.395 cv
1.53271 69.0708 1.35059 68.6255 1.35059 68.0718 cv
1.35059 67.5723 1.51221 67.1807 1.82959 66.8906 cv
2.15381 66.6069 2.58545 66.4585 3.13232 66.4585 cv
2.95703 67.0659 mo
2.62598 67.0728 2.36279 67.1675 2.16064 67.3428 cv
1.96484 67.5249 1.86328 67.7681 1.86328 68.0649 cv
1.86328 68.4028 1.96484 68.6724 2.15381 68.875 cv
2.34277 69.0776 2.61279 69.1992 2.95703 69.2261 cv
2.95703 67.0659 li
f
.5625 lw
33.2905 197.545 mo
284.391 197.545 li
@
33.2905 3.14551 mo
284.391 3.14551 li
@
284.391 197.545 mo
284.391 3.14502 li
@
33.2905 197.545 mo
33.2905 3.14502 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x005.eps)%%CreationDate: 26/05/15 4:48 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6H$f*AcT$6b!8dh2dZuMIIHf&2IGaeI6<ikUTKq[ck5F?7foKZ*M%c&6!:udBk;r?B6U>^&=dEVj[d8+Id/In4)Qf&eqnFXQ%;3@'JW[8H`:9(me8>gYMBD%k*9NKS8'anVb_pk?dPSF@-8ZJ5IeQ#n0pIah^hsYllJ'r2KeU+u=]@lWG<g(G:X0(Gko`LdbPD*WA%m44=En#F^!7^HE8GJC3WUaTgY"H(WKiO@49*W:H%f"3G(fea9l58.:g4[9)Dn2ggB[bdIf[JC1PXk.a2iGfAMkg/>eH+i*j('"Xb%:ffclh<-3h./Rr^riH+Hkk2R<I\Y_FbciS/mETp`qZX/2n=M%"8_oWpZ]"[(VciE=$$0WCblVNOo'(O7-)$HsPbc+t;+mnnQI)ag%3BXABeYrL\-+QsXf'6P`TmX>!hY<^(nm;t3qFR<LrANutb>tAKeB%tO.>n\j[<`K9ZeqrCWunDHJACuV"YQh2O*Vmo]A<D([]^qc%Ws7d>KBh@e0'+-TE87G%0%sB[b%4SpR[U3'2+c'XJug8pXJTaJ9iEa/pqNV%[O"@FZ)\\3:Ke.c7#Y/H3crjXFPUrGn^2$P(s->\%V*2EGD:G'ceYT'-5=fRq#5>lHrD1N>%eTYk(2F+F=RjbS,7)u?F'?E!-O="Yg&Ui''!sqt)F-ss,bnA>p8]]8<<WueWW+n[pq)T-%-GViK`_T=H:Xd8.@aTeM1B*PMHn*>7<0ldt8d4+LDeU,UdPUluBin!VY`u"b.Mbe.`%n3HAP<b+#QJ6^e&5/Z%6q*sZ&#667=;FD%`$`MJQDmjQBr.P<pi`KccRTb,%],Q@9Bi--d\ll;oiq]0_bVh;D8K("Kl+,!8tTOMn.WuQMsqD7D/k0AMf$=,r.Q`>:W,Zs6nr20%n.XQ9Ih@QT_E',)C&M-@gP)8%VG]^IeNZSbjY>j@jV!$j2egGaoosVl)m(,0\,+/q62t@BC`e*M-JF*ZeasaH1&Qs+Y^KO_;m+Jk%Z$lD(^T_jfs7):NNY)-,;V422UqK<qK^tDZO#:)rJ<X:/A+^_9O)c76;8-1\Te31l,NY.B=tdj2obT2grPLDC3_M65Fndk321:AL%_bVgPjVurEGs^E-:Fq.#9;F/][`/g=*3Fca[jAqXXB<o*PZ(/IZ=&Y"X%t2%.<Um@ZsLm6Utk5IX)4)E/7m@,Z.&I3F8Cqq:.HXr%B%lF42\\W5r1iiKN->%m,&N<?B4P.mEb(e7[jCd/r8HCj$s=h2l",dr:-Tji(+8WhLDq#2(;3b^'JFl5'F"%<s&,sIZ@A$*T/_>b%5Ffd`TC\EK9;GRQ6Cbg_T<?Z#c<pFo0^*GmYj+.!^O2V:EW4C9K`_5?r2'E+ku*@)SA4]'\P.K7J*B26r^ZWAp)SV1I\jf]?h?"Y%:K!(-=t'bmV4n#EohsYn9B<jn?E-uqZsY1u%0"5;nU4:Jo[)KsDEjY"DhQ[^oL;D+YuTEpr(iUIIsARN.+#\k:r)eAhbs*]M)>$/%6jTbX_j^'Z=u6+!r\O/C?I#%*P*W!W-qbt4kQ;f9G]#LeiL<DYik+8gQ*s'p(tVkoD="RoD8U*GT`DfBU@g^N)d86/@,:Ul>4HmQ%jLh[^kZ`m#;IE@R[6)\_&%qq+Z4b+ZP[e!rdp"5C<f^YG5Zue!M<aS`bgUIO`;^['+Q$!$DSe1XDn%'e,jMbmX>L>W[C`gj^/8=o%OLR4.hZCM$23=!$0ZYcL8@_kP.2C1@7*[5fV-MtoXct*ITh-]ChigHd%k+DLhGkr]OqcVJ`T!a\\4LX2.Zk\Qb9bSoB"+(F6dh*h%(@SIYar$g<V=Z`p"!'^=?6]:modT=[_m;J#7/"!<E"2&^B9K1S7Aj2>__DJZaYX^m)E]S^[(Kj>Sm8S@OZa0l(M/`Z%HZ[Q_Z6=/%jHQD#/BO%G(+th%2T@:aUh/3YnD/&fYrWVo1JK?ipcj12<`g:Q]?Xoq`]d#.-2U[@.F6\:PX<Wpc[*n%1\h";Otala"hq#IB=RJL%d8.;coq\E1M2bp5Js;?[<'+1h2KqTF+#oU3q!4.X!caL(Pb=O>'qW%%-AJKf\HuiiI[CtuW@X9N3T>Bk@sXE!IZR.KP'/=S(/F3&%DXJWhOKp4NRs0/]k"EK[hZg4!N@Q4CF>TG>RnQFGWt[<iBfYlF.;?#K9'G2;Y:):eQR&9+3Lh?>SX-RX-?"5-KU0LS76`\D"=a&#%Q^B<9COjf#oaXS%8t0A7M55L&jR'N(YI'G';(EE-NG$Lmeehi%-pP&$2m@1Of@%YR``n_t<k%t"BMfmQ*6s,2b"aTG]>13X!I:_V%^K%^&BodIrCY&NEWf"cDZ/jDFN@\`)TR+j46_qsU+kem_*c<['@XkEo02(<?]RUb;*@ITGeuPfE\]2m<Slq#b9<a5,k?XA(NP-q/%p7&L.<].KiNV.5CP#-D'e$npbY3,*ZX.NAI)NCIXV;JGFN$#'f7!YH=9NR(BfgdVJ\E)/a[FBLPHJW\<Kq%1p&ZXRV]JYo+DjJ(4%/.+\o/;qfBs"3PuBI`kFnB#Hmd2?%tg9<p:Mop@-@O68Wbj)Gb0Pb"1G$ETV>MhHP^u5P_,rdkGKQ7N=9Ca@so9T'n,AWb-N)8i.%`>;7V3Mh)Z;B7=smFEbY^=I*L@kDi[A=0HBLfQA1k=IG7/2!=8D]<#'qHI@U3]L%CqZfB3M=rK\(?Sn%/8r?S7k(ZbMQKUOh85.t%HO^T<455<GhjCi[IL5njJ*0Jpj-*&1M,@SINT?>c^Iu00h4Ao`%Z^qB9o!*:3VdM?ptLs]Y0O>*O(q+=((5$1WEWX$q9HW5lPDe6%(saJV`;sV1g,dc9;#@\!6K^`i>?2W<8[hnojFPCV?K>]#@Y8)BUs#kY7VM%q@f%,)krgP?HdZaigE6'UrLH&2YP3N.1^m*-59I;,%FJFP`iPZ=R@Q^8>J)Sdu\,G(7D8!CloD)Se[@Y%p<o9QPo(_lRrN2\`c81"BmJOH@Y@jnq:*pZPV-33:POp$29R^/pLVI,p^ULi4%cKc0JDZ*RR[Q>I4)cCP'P1S6%B/o1?B!kY+-4/JII*hWrSlC82%W2Le!GT7%lN"iD/#8!!Jrg&hUBhT7qk(tsZeh_TCu"Z\RrA]R%NpllT(D47#6MIt`RCm4BRl4IE,9&]H'.B1HGLUV!?>(@g."__>@KjD%jh(J@>qJl6\-@3QDoQ+b2Of\eDRK)hGk7uOkIFk3I25>W%rr.@`2]KGK8"M]]8[[;k]J]$<J+rg4mkAS!NV>oC#(fCQRmV&i]7\;Gan*hnVbV4)5:`Pj\W'F6"qAfBf]D46j_N9l\-Ugg]34SK%Er3!4Ip1o'E[<Gi&)+5`g[%.:P.@@QG<NL$aIP9(44"[B6qA@H"Le+#"lIT<ejAGH_HIB`OuIm.O$3:/#=/;\MF-kfH2f9<CB2(/%9Ak-X9eDL&C2YtlbX&r3QV[r^Ep+IraHLAF%Y@KT3-e4$XZn%)]u7^doZ:=sUgR85iJPOi"$jouD4h?6^aOUW$M4oF/4B)Z0eaa@%!!A<=>-.sJ3hnq&XP_BqpoEq>go,Dr-GMu,R6.HNS$(EF=,NW.ok(N91'r$n&el%3b#OntG5(e1]iShmF#SjZ8*sKNi1HXEZ0FWp%cMLn;o&p&Mh/#B.Ac-4mgsPloTDqo.riuT;1:IY9E'<Xhh-j*#q/3Z6)s*sT]ABaBJ/@5Z+HAq,?e'%hqV&mD'YStu&c[p@nA!)!%<N"'qB;8Vqem#57B-_F"@;bHj?@ViCkRr.t.+`sNoW"i=EKpDTGAQ=e\LGOBH7OIS-$4UEeU*%RlE(7)j_0tZGIt\*_dJ7]8'r7L%p=noB^]1F\F8ZF]`t>/@fm`guf7rmreS`q;I13E[pDK%B/e#WBdXYbCHYnk(H/cTBI=*RE8L]HM=T6R6+<m$)D=>1<kPqe)Yh*^(%rI8;Q,7QYOs*!;bA=r2&Z;#5"5O4;icf)m),Uur"drijjrKkU;7K$Uqr23EXIh$C_@:TgM2udI6@`/eclL1DuZ?K4H]3=j9YAl>)%2>.7EIogFbldqTWFs$(KKDKqemP5j?\7DbhDZ>&e2;!G/a^bd#e,RVSg<!&K'-a"U5S-fBA4'u,bO8W>O^b`k=1*g_!d:r'Pn:p1%*C(e6*Q`qKlf5JN;,<dj3uD%C#rm4hUg*<<]78@p(\Rh%PN>uC?[ZcJ)u[P-a>#n'hlTuO,a^?#3I%!,]iJn?3mHsILXkgZVt/YM%^>"-S=1^=*TQ1H4!E1YMDE2Di>5bdRo:gY&V&q)Jq3-!*J[LW<,(3$A$n\IEQ;Sof87@ZD_%.R1m1:J:Q^G]qe0`QU^MGdaTF3@!%5N7q5M`g+I4Ruo(+A<a@#pK+>;]"`TAB3u!p0[K1#NKDi7-)/)(.Q(ZOc\).Jii@;j+#db*H$b#1pA3,LO"fQhV%>J/TD9?91*Kc%lC0@dZD;8^!*W:sbjpdKQ7U\R6r=CVLfRE<-e8R!(7S>'Dr2UM+[s_=;1)LiTR';YZ2.Jm8ti``q-18KR\]6lOG7EYI0YVCWjWhZ%:QRV8N$<dr!J-t56@^S7?j>Y]i^KQ10i2,^45B^!4L'fO20o_3=3g]nIQdT\dZO',j$rl_X&f7=V:"Z>U!NVYH2Xl$@T!ND"P>2^%>%F5_+QOifd.D!794Vk?XsFq)lrs^M]5o21JUM(n9f?7/`t]qQ6"=>XkZ:u,p@&P2Z'FTY4l?*L%P:@Xi[Glr!d:VmL!<HTBN!dH%nVVmZ>ZM#:kkfMLs6tXH^Rm%[lX!Js9D<2$.]Zte[WQL:>9(<qVP6XZ:@DZR+o9!W=uAu@$n:Di*o(jH(\95N(Y,UK'fa,'/&,<a%D)NuhkR'"oOM]K98bfF@kTo'>(cVJ5Z<R?ZGC".jek=2?D:\:EcgR=EWb"<*@G3'P%Nc1i7"I/PGQPJ,?GG?&rX3IkG@%=EB:&r7%c"=7[m6KoBj86;WL*,HnrF*Cjq#*rKq4<Y"QA_B[=Ks:t[UDDbQoD<YG6HKEr7g]<p60-Bd)Q*Ig:@&^har]9"S4t>Gp*=_7JjRO%Cp`KL?GG7oZL$\HLgQ]lNU!88Yho6s6FGF<[<`L*1V(mb0rT45=V(>YAu"OOY$S$^pQYNWp6\i2gOXoN[8sWiJc'C@s4_JHU^m+4%0:2NCa[]l=QW"!V;dd-ZafebBm0iDM-abQ+@An/"80tE<^KYRJ3`U-XhYm^qN>b@Ss#=&#!4G_`)UN&gVkKaK,Xri;4@^r'Om?rQ%DQR4am.=iVW83O+fP3k#EU7^qg94Xg^fR""M\%3Qo7Ngcqkj#jYjTCbMg:5(lej8bl:=W.]Hj_TC!UZ_2#"^&SQAWI?fAu*VU8;%%arMl8/h#>-<SR8d9br*C=57eY7.0m[^-P67(Yd;e>-`1]I?p5EjMUo`q/K;s1dtc;<[9t-*\u]uIJX5sg[>U+"IK%rp"$6V_-=d?%$lm7E>Hlf*g90-[Sp:lR(2QYmh+*aW$SV;b%BrK%%5C*kTP@Lhg!:4':ok1^NAX-%\eE9ZhVMFBMg;O#Vtjs#Y<j@34nNZuD"1Hq%/(OIjrlUBK(Y\?H=W6CZ>eKBIY7XD$gRZDsRp]'GE1@UHKi>1#WV0og2qN]]_ZNAP02!+,K,NS2AR"hgWY9[b..l6/0uN,frut06%'[:#2n#_&Ip\PjU"^%SOlu_.>G$MnfmBi80I(qH:m:=Vg$891!$^pjDWH(TldiY"OrCV[`iL]H>b-a==h]W/LiA@r(Ds`VeKmJQp%HJ8>DH8h3'7.*m22F(7P.JD>0LTo9j?q+3u;?J5Y<e!W'Jm8$VRT<`6rU4LAb?*<(]eG-KP>[t8HrhjNKQnJc^V)\\Xp+_@U.7;9%Y%rOsR<X)W-7ds;e:K-c@Pujt]3GK_:_ngSPDc8-GR<PuHFFX3)P/'TSs;0\HP`'t^ghF*jZ'?7UDXM0$7a1OrMc[/?pQMBTR=?h%MQjOB.T^ET]RBhYjYf+^"d'l/_()VofBU&h7r-a^O0fL/2Jc\HXCuYo%>0T;-X&6rYn:TFDQM9p$q)N0RNM\H&6dekeSa$4`,].$%b:Da`qWZD1=0q+jImKEn/G_9&QUROG<UYXhf?6LY%$V.b6V![06/dC7X<h6R:6rIF@<]W02nn\gCd[\>fcGgZ`M#=#s8I^4+W+so%I>5.l(r@A\3>YkRiUQ4S/CIsB/)`rE9KJ`jG5$J1Bh0F?0RinYIP[EfV*[dr]]0(s8neh18e7>Ql7LdA=rYI'AubkG-Ud!Wn&Q.I%C:"bcVAA=1p#t`_Td](\q5IQ0gah,m'7ith!EWL-G!BNaP!W3JUY"P5L$o$1IH%ePp$`"='J[7%%F\oP1b/B5HXUTUDk)Z1TlNk3%nCr7.;T'kRDGN92($0gS4uT,rTtHT/J*Y@CHM>,Pk-1*d*/N=X\=O3Zo%F#g:89]aIlae4<Bl.>]$Y6CoBuC./*7%1.%d"W\%C0/%qU6]GNCMlYe@PSg%=[EABGe+lX*7W);O!@?h;eS@^bB1%CEQ:(hAY0kOdG'i7:$:oMXM-Tp6`h\/f_nWW5pt@i#F.F`/o)'Kr!&i%OE?"&iPN515tG[53!S(W+Xf_hO,cB(f-2<EDRH%cm:;t\,4.?Kpi\6k3^V_MKuZi<4-E-,KQ`Bf9OR>9@_pm,3Z,eU;Ms6i0Sk_N%`ZR_$ZU>;^49Parq=EV6Y+_0HW*0f!ieI<(05b+0k(MOLiR6`JB4&YsP-T8B,23W'm;M(%Wk<W)09k><mB<)FZh8(t?+A^pT1Y%-%BA-uJ,O__3Q?.+[M0*KPj(g633P%"F9:lZ<o^\SJ/cMoCVj7g28uZC\:_Ig7\+?DA2-%kj.QsbT#fN"BPg/6T%ColfL3BJChlSKF%<8.2V/C^2f_Tm59Qq2G5)sa^'V9[KFf"Thl0Qu$MZ^(6TE`MNkg^0ghb3_W/4hptC0')[@X$rV:f/2D&D-XQNUmA0TG#QT(ZB8=<%bFW4E%"smE9@#IQQ"bV';ji*.JPF>W9iIA'KUd(3B%K]qcJ%iPDC3e6ZGUuurDoV./[TjpoG`/ITEf"lTRrXdh-1$(lonD;Q)o@@%r%;l'Ve-sHAog+F4->hXDdQfOYh^".ZaV5%m:u*eqj8fQ,,$X[JCX/WighhNXXq8',%9Rf=6\bA<cTZaUcm8.Vt*nJW7%%#j%o\1%T[Mi#G#hn7r$mEWmhs_d:g8,X1S+R:YB4Vr[Pp.omeBf9rI)f5beMGn4ci9M^Mq^1'k)/8TMfWQ``RXJr@:lc+,%d*iRG'Z7(P<W%l)^\A)i&'TD&'LWgBW:pcKuW#LI(:?lor'RHWXtd,^FpV;qH%nmE`V,8pd44=(X?mV'g>*Sj$.,o^+!)'F*0)fr5ZUj_F7hqfqd+%A3MeOl,p>Y=o6;9<r01NE>2NSSpN\o,F'V(Snas#@>OVX(46%GT'/tmc0)p+?_tHHNEaf6dR5"R<Bi9\L&/5b>Hq7JKo.<!q,TOV%q9Wd"^85>S8qkFJ@tdm>3n`7gD*%XG3\1J8=r"K4?EX2Vh%oR&om-Me;^p1*h>[&p->Vr7o"8V^C`Y%k&%'dU_cOfWl.qeITJ)4*%l,#]^47tKLWJNH2X*;3n4h/8-##qTslX.'B;c';:iGdc'oMc1*ct[cS<jr!LO3W,'4^XbD""W32T?BPdV>&0Mq/^-TC@Q0,r_EFU%r[p"q>Ns[ClQ`X^o?U@4I@X!8(09h2E4+S+o<7dO:1%&1f%0dMmHdON<dOGO4k1qO^2I5:L$R"^P(0<`)s-7\e&Ou98fs,/G!2+R%>$/1^DUho:T[F'4GjI;Sr@:&-e+l0c%GA5=kM9^raan<rVU$&W!L;MJ$K];%So:IFdIL7OlZ'HDQ*1%H8mrKV[*nELrlcj?Pr#!t%PIWcR/s&]%\W-D*G=rI"Q\C\e<k:+Adld[+8Yg"<^#od%G.m3AKt[3H3ifX&\`daA$7>TXXgE$tm^a.l;R^k\Ohs_sUf(k6YEa9t%XgT#BSk9f#GG[3#l)(u*m&F%`>j<_-0;MKkAu3$+Y&jk*J+^4'eI(0AG4YC8-,4dUYPqQ%X;"d5/#QM\H`,TjQO>jfeZ7#ba1>)k%/n^g1/'`4^e([gkq^Ugo-e_nAISZBo#M!%I%<rig@!8fBAl&HVFjF"2&>(PcHXDO%C$Tj*-BSdcY+P'`49Ri*UkQ.Ai2<3tV`Eq>%LL]%[?CJQS$[hhZZ*c"a5CG\D?hJb<32TCl:VFI0"MAU<bjMQ<p?:!"\KB:Qqf8sHqM.3KVcLH+?h_iM(<:fo?^2BY/(<\GFo!t^%$@_hJ>$6'@%WLb\rM7aB^AXsZdb+qSqK4)!:Apb>NdZCW2P,NWL?>)1We!t?,\?!_nEF0Cp&#r"A$`/fh1p^"Vrdj8CH_1OT!UL(%#'2>fP%HI"!H5##6@"!qC@fUGWorX+`G'7S4Y:9t]VBN1iamH[n+W?2fnGhgb8g5&\p:c-bWc9_N:RI9b6pbG@HR!9NcW4PAsI!d%`&3bT1[+WM;p0OM/U5!Z0(:*DYY&Z0FB6>@CJ]09$sM]8)5J1*eQ4ma=F.;8--`Qa/@4"p9_1'Y`jC[lI.*Oc45cQIUFCD#[-#/`%]_P!e%.4VTpqC@l2k=`c^Lfa?9pO,^=`u60^='tXl/OUn;JgaVZI?JLkC'73S8Rcs.toG9Nu1uu:jG8dpT'O<(S!2:r7[$nf(_k&%o,4]/j/?qB<Ebl_STZLM9n1a?\9VHT0R2Vjk54#8FM$e;1ijU<.Bn#%nuJ!Xj2?/GgF@OeN5!2.5c(rN_(D4XoG#oimqsZG*<I`[%hr3&!d^<'*Y>XA<O_PEh!Z=Z_P/'];*k?7_C#-.r-f8%pK<\FhX*obiUue1s^KX(KC"#:BjdTad_ZZ3'5FL:]I8PMQ5NEWkLm0]7%?fo,Zd2l-aQ/=2k0#3eE/Z+`&(NYT#PpPU'UGH8h@'2\M<rl5Y3gmAc(I(4h)s5Gi+%!l"\U@fd[8eegc*HI$E<L*Be*LT/Yg"X?%#..B]6Obkh]gI^f,%X1,'lor>;VM+0F*eZRjE58T04?HeHuiZg2D((F:Z1Ce3ci%D(3c_%mg7L7&g)CbA"e\L_Od2kP7JALlX;&e%RCdnn-.7aNkMJ92h8:OQDH#21+uZ#X-"4CWpflBpR-r:@r*Z<ND&Q@D[LcpKW<hl9+%,qo*5'n^4ZI;fD]u?5B_Ym<p)eV?d<ZB$%YO.J!U!-uEd(1&^-8$#3</)QS,4)ARp:NVuA8OR/K_%>=Sb$5-h2OC7gg_Fn,o,jl]b-[o<]q<jorr]`k]nYi]2fu\2p)ZC?(QUt%cgo"[U,u#4:B9jTau4SKW*(T'd1=5Y/(-L-[C=?I;9>kUs%u?sH+m"boo)MT2rZYghRpEZ$thEjbP(oddX;lr8ng"PX6M(c=k<HP%_HnRs>d_Ui&A!HP*"DTaFDI81bUej";[V`cV2eZKRG/T+JH9T'=r:b&5fVkKgPbB`m+@Ip!^clK(-SV_3(u/>mW#]i39=3lI\Vok%']Y4clI='sBMVB]9:+WNIb_9<YgnI/_#V_>?eu=[:oc\J"1lqf@LpUN'sH$TBL*]mnYo4s7iA\1^[4\G`qF2oYE9sLn9dm-pFgRi%<`hnZ/.QhpD*)]s9;DZTO2"A<)8/:f+OFT)k=ShUJi.W,&"T*#r>X7ugW5Kt[fu)cQm,a1[;ECEp.e6e._<pD)a[MRF"`'>j"j/!%!(hS)JeAf7db.nBWW10[O3Kms=G5H,Y5W3j)g&Ie^__pWKA.d2is5`G,9sMcetaS724[Q,2?pJAE$ltRa+i5hnMp6tSJ]ClNA^jY%3j+GJH?[/Em;I67&3l)lZ&X%f\:S>oHE;)WR>U:^plESsk1%==A`;ca-A&!dD>pk1DDg%$4.G7/5ud:I;3OODL"iT[0tFX<Z_unM%Sa=uCrheZ"E2>7A&?H%+M=0@,',%#C''Z>WESHfL#bfhgcL>92nI-39B$HAW$shb;7)e]8r-UlCW9FGqcQ%nlA+):uKsTam/kULO%1d^3(J8R4]i#PpO;1]^Vo"a5#G,i(LEgIUa1&U!<P,=$1qiMW/@m<+%cGI\*\,t<BUB%soF8>^[_R]G8pLh%[;Xg5a4Am,/bQ$87%"i9L1m7X71p0ajQQ61J.dGl*s4ur605l*_,M(rdRJG[>=+u.8RL^+7hO^o97gd>><0u%bs+hm+[ikA0V/%QE++T\R5)E3tdkCdB:%2%)?+Oe%Bu4h(A2(a3l&AV6F02bqi#k24'^%>R=LiNVgkVRZBdSsEs^>WFXV5tD2?plS$^&1>SH"1.7uEM)\_>St3JYf15j)p4OV%Ys+3u!.Wk_[RBOs&\,`X!`u26D+\aFdf![g0b&.7-($[IPhpUXl(IPZJTiWBl#:C-C!_`A##0dAk+t7#>U"nrK64cmHRH[mR[+7r%=s=ta/+!j,at_u4OlXg%GNKjD5q2Pm(DuHG<</MTBf3U+E:&6hN-Y,Oksr$jJN*9j(FmPSCft#ERcAU1@&j9nnT]GVNk6K3PDp4F%[QHbR<o9EoQQSefm>*V0a<hX?79"n,0<S'i5nd[h_BZ&Jh<@tT"\sA@-(\Lagdl4)a,"tf7\Ch=C;GY_).TM[_#jUbm$TL<R<s?9%d(5%?;M"'89Cm%JZUhO7#*'\3.N1&0<?tdMj%hVJIO-2%Z8'u+!a5>s^4:3j!+lEdF,+M;hH+;SU\2>:'1:pMW#?*^Zh6,M?\Vd+%2j`Q<1f"5qOA/ED>rim@F@ur#dSVl*kh(Z>Rt*sQ^$cGjNJ])gUEuYp)1V%=i!ENs=t7bNlSpo^OlPj`NsAD1Oh!n(DX#O*8mr[P%XBgY?nI3@U&a!DM*I5sG/qQSk6>2d\2=>Cg(1E^TLMOoN8ets=r,@o>gT%aH\t'17H]@5GhHZ'(9=t')qouILBb[Co=BpSD+&RuP%-Zf`L#><E='nU)FV&k>ZQ2/&=(#DcNgl!^7OQEs$/8R4tp+:T'6\$bDO.8W1fs!M[k.=&)QH+2j4W4-gU2nS6JMJ!P2S>(8=sqa,%,4b4:hnC2ZGL1,^o_>a9iX)4bUWm6N:IP(DC_e7?`jY=JMr.cQqtonq_hXkg@5oqWd`>GPD"p-&;N.h>RfK^#!b]E9q2"pPS8B,B%XXCa1T"?.O_Qu#5(?!6[NSiB3qoI/TpJ!23QhF)1ke;m1\qd;&`j&'%I(45(4dks^j[$N.!pgi`k>a.'6k#.K&u$RBK`BtN:J82j%XdEB8R$`ca@$5"[Bi<oep)CYg1s4*$2dO8#!9isl(g^_Xb2da#,-p1.2c8.D&60o+c`HOV9L+Dl=ZoYF3G<9Fh3ZGb/:EC*cpteZ%h0eOOLe&d_Si-&*)dhjFFlp">os!QD=kI5VjNI3[;Tl2kB6oBVEaF43bdhcD*'1\nI5C*..01+'TaT2>9;Er!6T7i@.t`jsbOKZ;%_DCC0>At38FEFSfA^E0X@dG)Gn-h@D/N@n`SSt?J#+],0i$^U-i>HagfcB,8d"Q,Z3Os(gjj8]od%MMM6k5bh7Ci.[qla)@c_2;J%b4tAF,XN-.$$7q()<O6V5$MtI&CqK.fu6BZ#YAJ%V\731N0H%sl%O#$$4\e9<t\/4qfaH\Juml,Ou(]oHPK$2P:+:*\@nGR.5<po%DfrlBYWhs.emIUX;o-Nn+/\#qWF&@hT)A:jH2X(cEj3+pX*re"b@%WF4)u(So\h(W4=_YO0V+=_/92Ip<++.EKjo;L*0IMb!aGBd%X,\4n,G+[.5O)jBn?!ga6"=i/2aZ0,*.KJp:TipKo(:SVDE^-*7n\#`ZP=`>-ZQ+A:8l=\:WnIEr%T$%]G6*@6P9uYUN0as<^`RW%j5*5o+qCd/]LkE+j?/l+Y#aPo^&Hj`.f4+VZm(C4P"_oTLYf,MnA#q+r?0u=Qkcom*?fB6Kak.%H/m*3Get`qp>ptU@H^:/6"\`Q%4>9PH=J4&!66>%QYSelZ*oCaXrl_Z!BGI&+2ANM&5/M:R/s8DrK1O_UEi^H21_&+?+(H*QD;-)IoJ$RqpKuO/?j>>N0ouk91!8RI%hIsubV9">;j^&ZjAA]CHk`']$WtXDnGa`;>NX\&W@0jn9fe\>OgL^+[Vk(WiRAdQqQ(*;$hhZp@GE*3[QEsA](kUa_C'Y8%dZ]J/%07IE#gGci&0k]rb`uWh*46sn0p&\)";\&s94<!?l-i@ot^8GHdb'A%tLA0'$&CoeI)Z,o](,a/E`(rT60$(4)B#h.*=MH^2+.F>j%1j#8"U&cEAq,bY*_IoG[X&;0BRi.a\j5G?P,S*I2$;Z_(Bc[)p@DA>@?9`BmO(FC>@Tt09irA@k7_G?V(6)*%_`Jo,HXM=YArbt"%,6Em(B]iDd,Kbce.0<)rcJbu9Zrdp.cjW!I6@9]?pDQMc4!Kk/N6$D8"\*#(A1SiIZSu>]`iW[frL(bqAE9/Dlthp=7>-K@hB[7U%!K-[ZU^V.5I#i]I'(l"hLeK!b)VWgU)-j:%J!<MY-6tTa+Qkn(ZO8,E\VFG./LAu,m)_WN]]]`@@sNQ+*bq(Ibb%9HDdG%kO!tL.%ID:l(H`'J(Y6?8@8?&A-81.q;L8M)sO52X%mW)fe":<'>Z/Fi/e"FYK]XkAo%I<B@Y+$9_AqRZD'u!m*ddBD3bW)Ss]U,uI)?_(L%>j'qAGJ^JWg6.EAiJS3kk/5/&YA]YQ\A5MJM<;]a/`S1Q%aTogQtJ-c5+J0ViQ?rq3I<"o+"h.plA57Trn2mecA*@A/LQYkB3TeZ%VeSW@LPpNia]S@X55k&M^+ef!3;3aH<pn>eb;q28D>_V(SDKtm%QUT?5p8lh2X[/-8+U)q,OL=-QLQ9uEI2ZD.a/;L%W7@F.3"i9%=W5n./par^K]It#a"riO0&4V]kVpOCM\PP59Wea5LrJ3?N0`(IB+RsfCe.&a*/7OG*jkeIWhHss,HfGj6kg6dUp_W-G/tdGcPf;k%8+@@M=Q@AWS-DZn"\V2qZ(_XK^_/bW,+m[gFS7Z3VhVNcMr@/-a4g@V3>1!Em(jN/b[d"D@p#+Ek&RDKo#7?jV8E"7A-ReQZ.MPS%LLm8^Vk/=c84U`lX\QS+"q9L&Ug?hD,PC#.&fI[)AJ,l[QnL@SN)[_OIRYernReR$*<SGeJ*VEr^NOHr5]&N'Rur%70)H'pS+*pg%o\Ht9Ur)rP@ZsTA$ga4:VSY@V^diD"7nn^/kLcS/i?J,`A#@*h+qlh/.bqh"L_3SE_@8jb\,&"!E@'Iun3tY-$1H#-r4G't\&bmb%P=S2GZU&,a:?i2?'BhKR)3BgmT&_oo3at'n/SY">!_HgYEk^6a>H\I&*aX2%9/t<H#C;iimD)l^EVH-s&YMpGBAA[M*YR$/jFYU8%j3R,T<V<mZ?2H3TbaGT2b/M@lGq7L=.on8\oilI-H0MKeh9,2"(OO+fp8qFJjS&*VK(G![)5WhZ(bCS*\[/P-o$5fapVAet)5eu4%mYIT!fkpELplH"NF-Wbt$gG&u4"/eL-7$L32cZj=p]9AGG.T.*B@u1>g=;ig?U?R8[[0^k;X]$G.uQR&;K&i[?8ZTWC<.cQdJN_$%_iiioCga)tCTH>Y)0Xa+oT/_C&=?mMHQSPtp)TH-f=ncaX44_An"BY_$d,]SLZK/?h?6n`5.]Y6Hnd:,B3OlkF&8^2"/5q9PuUVo%0f`V2l$`SpX-#(c%gV(TYSNPnGX>'/WUiCH0h&3q>PW,^VphlVe@)mC[LnT!?Yg0fP<YIPL[Wne7*_QaFGN!p2$pn8l6i+#a<\<W%F!&!V.eZSWIb$0C.joV+SDSujf9(h.\fR,4JQjD[m>!,Z\8fGu@#!P82W?$'I]/'9\nma2j^@:`,A=t'[a:A>+a4BKOi5NAV7<!D%6V-c9NlMtig[u`A&364cq$`)$ACL?OkZpn"5F]qOQYta,Pd.RZquU3U?(@,%VXr!-MfeN#XDGK+ou]j<dfjI/a_'"]'t''l:$:\e%pdjtCflShkJ`Y=ja8R?il25Sdr%uWBflV[lF(4.^FFLcBp=eiNZK[`bkfTa.G2#bES'E[RcABG4.\"_eG=g;1U=jYfX.kg'VXl#]%_9k',Cc]?1o0(cOXDBr4>e4lIBp<Ep5?*K,aG+?V79ndl1Rl[J$71.!*"04^@ra+e2I1EbNK[*"QV0hMh^4ackEej)IoG2`flVZK%#'38Rc)0OR@]u(#jc#.i:$6.N-bK\INL`f,QV09u?I9@jl25iUjG`L=Zg%8I>.Jb&r5q9J6qk?%??mVMS'J3'hD=P/A^e1]$?6&5%1/cp<T[/M]TA?G92\#;?G)'@%)(cX43;2#%))g,mp(+d=cJQ4#oR1kEmnFXF?X;0O[Jo0UHQVUQHn+g,%?&%9F[E6OF!iBS--<Ig%UKge828+)#$JOE3i?<ReC&rQS3=?u[GUl3FP&S'ea$9N%VV<?L'_cpF:q8\uG!,Bqi;TK"@B_`Cg]d$)]nma<rk7LVfZ<q%6a+%Y%*4m'RRQGl/KO&[93DCsdR_*hAP=N=Kc>uU.s$_/%_JVQhg^V#4,%-m,XD@7*\MEfO47D1Vn8%HdSdX0'+$25*DdJ<8p\Zf;#/pHG%R72sg7X&KpS:10+P+cm]RB[Fi!d>^*fP=1okse;qnmla;a3K4kpY3Os5:[33VH]J')`DY@S&g3L8-SEL8qMnc:IJ`0HHr!WKSQFZ%DmYM2hQqY$mIagU9Fr/K)a),X-pSP^063lE:k1+>NpcE8j[A]7,kEbY*L!pjH1?ia;bO@!.5+e-7`5tQM(7(>M3GG_d^gfGU5?;@%hG"[EhLtLOUeV(]<'L#H:OZl>N"_jBMDB811_I6=miir+Gt6<'KQ&,:R>!qf*cpj@59%D-rA9)L'^rTQ53FC`:1XE9#N8et0lA[u%7jelaM20pFBA;n8ANiRXA-fq[#k<k#CG'(a`$k`Z3k6phhV"G`*05F``jq=On=ISF</0%^%#_4]h8A_s1;hI[_qjPPQ#U]OA$lFM%_hm/f8(T;Dn$n93%"iK.MjaB#@Qoq#9mPb0_grcp`jdHNL+aQn;dSrIN-W;]^&9>RV!oPK]\*r!2r"ksFV?L7p,[SJ;cGpRn2$)m%1Q_JlZ,G@O+7Cc],Mp-Mq3L[Bbf@U-jJ;sEm.bq1#bE2'<$Ef`Z.p^">7PJP)*,I&?C)J:7koIAqo\ib^bB#]pLYcLm-BQd$u]T$%1&4;tg_jNrJ];6],UWBm_j1&UlbR$^2^'Yh1hV>K;3*V*A5Pg-E88mdYuZOQj!+;a2c8%k_NL:X]7KQ)W?kl2lV7:&-B_RRC`<-i%QUk#N@N'tep[K!)j6s=\=Gcdd9eOKZ2K6XT[`>-*\DG4iRO\*&X4ta$pLrBI2k_5C@Q#%4J<NM7+:H>3*S?)Y-kQP,%A#k=6quUN%7hu-BDE-"J/UgBt9L$aGgKD9>I>Pp0DXY.n?/I^sD(_DeXLDOP2>FV.6?E$A*\'$]DI]\7-QWoQjZ-q$GGX7=D4^9_](4g+doX"+%I&P29&)0_Hrmm8Da5nTNVr;cJ?WP+\8qi/,&=!!g:!`$9R7H+\FXLug"=G0a<B>/>V;'ICQ_$g+k-sbegO7=q"Ppt]#t[iQ;1nK!%H?8q!QeQ:-Ha4VIo:,L!JCLr"k`'X`Drr.pTkZB.J*eMS;JeIs*0ji^o&60-.c$]D>iWeMdG='Z>sP7+N[qNc>NqQR;S)>6QJ_YA%i(D2SbDNo5BCP/KrJdX]r[t;84QS!3##!*-+Tb-lARQl,TcA#fV;3dddj2<s<q5T]Ya9-QVTrY,qo#$6(3/@[0NHB-=+a+B[nT?%%`G@\"[:paMifj=.D>mGWX]<1_'n,haE@84`9l917hb3BU_[HZiUM[.(c'#qh4lT5X+ac<mZ2lP'<a(0Y<Dg*NL@!<H,#8t(I`ZBH%T&*mYG7f%5=e8%f;$6^&ifcd93+q!Np1]5Cj<#Zh@D&s7G%i[GHu>DBW2oL,`e%E#Q,en>1[c&tmm^D5*0OA=W1@GUrH,Y6A1NV2%q\u2:-4jL4.Q_hQaRQN;#K?qfa3'TJZ@49eaE$J^7$05_3tVsr9giC5W*YCS,aT]9`DJOQGSaK8*Hi)V#.cQU+1YR3*t/X:o4,XC%Ln,82&5]J;`qeYd4QMO%-pIg3/pnPmiO>.C:*dFX46:;R)%j#N^gVDUDt!Pi<2j^Fc#8Z3a^h9=Cr%O_*!Bo`Kq4/@_&@M0'td[6%66[No*<hIPbtKONe%MVL<d@/0"WW!U'h-*t1)#Bnr*JEWF?(5<LhuQmj&$aUY[0=*Z=1:+EB#jejY@mtL9+Y"C?0s:&BM,-FQ#Jt%2V*k6h#&oo(1>W35hDrnSHUuDK7=B(b8QG4"W4Q9*%da%.17hE%cG\QfRm#=\l$dt2cSih^o08Dro`oCblWjH:VXFqH59o<*5DhD%E_$sRe/Z7IX)Hs"J6S8,_,bh7jeI/:?&8gd^nlEG-$`&4<jYNqL7L^eR7m@SL=uN\0BMf\Qh1eoaqo"]nq8[XM\Cd`rDGiJ=_du\%V0oFKllWj(cdu'PasSdZFsb]I58u*/]mfLsL)T_k5@-bfhWd&jfhe8erPCKH%`s$WI'6mje)n^.VmJCNZ_8T!lSnHPW/9<q(OiDl%N;UgQEZogN&kBObcd-!CDY<VV@Q&d3_g])kNKVBuJ%&m+-<Ij,rPELG)uKV,G-BeJEQb<TqLrS<O]j)NY@%'RrFe8lLYqD628=1E%Hi740@3B("=-?(`f?[%Do:+s\m'/PEqM"ZS:fc;'dbWTYIM(T;Om_lMTC&B@Jf]*=?hF6j`m/i?][^qrqtOVrH2dR.NACVV/<9-.%?*T9,YMX;93Ji+]_UDFs"Fg8qrPCK.n2D3kA)-B/^e34\I\H_WXjdckf.[&&5Q?\9q"OW=RtJVadO(17al^a&jZWCrl5+g6#MeV]%D?fmma#ClKIQgl"L@p#nHi:gd%(VEPo"BM2\,(f[n\r[uW/'3o8+bF:me$t&eM!&F1CSp)oo#6'2R+fKr`6e4H>M6IIcFSk;=F19%EZa36p\KU$l5/nQ^/9ZHpHH;gn+Ca3nK.;bT:$>l?9c24>-&B[,2MQ$mSK*gXXA(k?hgaP6bM%7amc"5qJeG1O*.X5XAbTX^=U\p%Np'Wl)Z;k6374hSqtS0,L1e!lNP"Ar]%8SXSBWtAYam7Rhs2*?m.Bi:oa?gr\aSStrE__'oJ+D<nsRHd]%8UjD5TINa1p4ZghleG%b#.X#oA`rkSWGSooo&$8Nd7g8UtpZ5hs34/(qOVXZYLHM?9c&3I;ef=:7E?k?GGu_fYfIV2r_N"i@?f+a2Y^BcV9`b3'"8Rj13bp%HuWT9ks1C"oaAObO.P)^rk3ar8cB%$FA4ms=XcA'al+jkEhGG*QVe5Ih:V]H3)PgRK%D]YNVA)",l/c=HK9qR`/.o>XEQXpb=jfp%e\$5EHc`]:`X'-8\n60WOinP(k]OL8mkY-rb$JiQrb+dBh0eIo#j,'^Ae$bCZbh)?Q$^.3.!#''Y6#\Z5+8C9$hMR!RCU116.kum%b"r'8(:;RY[3if#Q`V-8os[&1Gl2W[rd<PYlY9IG1Cboog&5_GV&jG'086a9bK\c:Tm$B[;*Rs.Y3,'=1Y;G];Yi1lEOMK1J#tQZ%DVFd.q:<lurfcbf[Bu^Yp!MpWN'+kWV;L`cG;I"+e+ZK3TtWk)Q=P/V>[Eq-V6Z"T>:JgskA#!2T%al-L&HU"H%4Q^[^FepDYM,?%n+M]U(b`Se-ge=>^>>L7WIPeClac-CXF+DN=_Vf(Eo#S>)_[[:Vu9\F?.l'TG6cH+rp@(FC@]#IpC#h*q>2A5(\1c8H[a0_m""6l%B=hGp-5G7_chZj2rFGcimUB\'e]gCpbY$$umrYn%WaROESs::aqH`A78%;pnYXNRF;u+ST79Z(Xf)U!BFrTcgcgZL_SJ7X9.Z5\'%\WXS^'%E?l-T8>Rn[EUAWS`g'1Q.=KB/eOAYr9"Tl`]\mja+>bME1WX;SM"NT7Cd\NU>lYbsN\GhpG?*JEQ4<6;&uYS/3!VFA-;Z%IG.jf89IM)o&&he?@MqNqK]>nFgH_XTXcGp/10a:;5\k1^$QHY8]^SfEA,1MhsunNC3Io!-I.h-1%7SL_,#K1jSa\Ig$QT$od0/B%B!M4cr%)H^f.+='=ZSA>m>eDQ>"\fqk'(um`ML,kk="#JF?dZ-1Ab)K_'8p;@.DKjYfo=Vdd-UZ*<2[1r8;<%\OYD.+3ZAt>2WhU%o<23RUF#oULJkH#ABFe)im,c6J5a=D\?fG&ah3*K;AULcI46=$J48#&=_q&YU6#I[_5,*t`k[eoAP;`H(RR6E3QR@-A0X574;4O2%hQ$o(2>h_Ed8Mk<jNS'o=0,WKb[`N2o58bD+$_DHEKsOMH^lCia9=ph<pNPLpYr)O3A*.JBnQ"82GRl!M5A-7MOmDqj&Z?:ZWqmb%"#h),U:h6\[+aX<8hkfU]D>G'eFu'#MgXh/B*2'^gb1ciShp-<;WdAD@J.ftm"dXRadiKA!RCSG#>=bMW.GRn^B&LILB%NF1A"dn%l=u`7"88??cu4V"GmC7:>Nt[%D3oX6B?]g.+S\d<a>+W_=Nf;B(p?lm,4qN_7ih^!r&jpYSLL_J0);M>2Dq[7_<%Qei'Xc(b+3:V%j]10MXPeQ?(B\5B]3?oLWb\pk+0E)sb$%sD1Q\uUI<3R/=Sac<=rrb8ep+1\hrg(fPe0%lF-]5Qp(f*AUV$OL',[*BMe,596]H9`%^!eOGVgB4aCR[7TIfDm)p6Z5*qdA!M/T#&76X-]U*k1=Uf7h,U6DiGTUC";u6<VB9ph<CiFi/9BkZWD"@6P2MIAXMl^)#r=/)38'%i;8tcjr./GZaBI\q/!84p@Vo.%>d#<gtXNG-n>:^$qY=@/oKXoPsnLaIl:+(0%mr7!,l*K#g3ib%QE0R8V`/W:K`W0m,U8:AdLP^%ZpV:)'^_"/XS#tN*r!>HLeC)#`E%;Xjjr0ni_hMe@3fc-&Oh9-e/9[8NSU+t^@!5Tp[Q`[QhhCgHY[I!$6>&5e3;:*Tjr7mIDK[U%d3@g^m.19:"+q1UbI%-5c3g#48+<3Zm3L-!Q`ke-.CSV"%QB2jlITk_(A[/XoH._^5tA!\>&\_-Z..B'RA2i"[J6'D_N.#u8ZEcX%T:**^Q.474dr&n\2g:Qk4Iqq[Vrt&@]Y&e;[FEX`bt]b;m4P6$;D3)>(0?M-1]IXNf_Qde]^3:]njDNZ2A]G7YL-C]qGR=HCAm4"%[]\c<DY"[FJ*'D9pY&sQr-*Ss##-CZ$i>upZK4:!m3V49!j+@IV8Yo8[L;car+rcb]!msfV4HlKn]0?Lrh?44Pho2_B>jB+V&nel%67q"C+ii1&VMXO[Q/7N[h+g_pRSQTFZ^p=q\QF03L;,luRL:ol8:t,P^j*#,4[,)S>Rm@#B,\!a*=c:5es7b=6>"4KKO1WX3'Q#A%9Va0b<IK_?C/XYU)67AM?V'#$g[i;5lGMe+.=:d:/\\Et?6_/[@C_osVFl:gs!MAoj77Jh4:o&tLUr"aL^.baIC"P].aQo#m<"Yc%?9(""=t/&BKs1=Je+1dU6eqO[kOPJ*mmaKYC5N2W9dunC.,M9o*L1\KALIL@<_nKk)`3$u^Gf4hW=uW.4.GfNhQ[t/OrUCaY(fF_%1if'WoVP,mpu^k]/3c'pJ!L<q;g;A'9T:[K9s:CZIQ@_47M!jWhM2?Z>u[EYWMRfSB\J0W;JOleIS-D7R77jSC[:Tnh\NHk-5&2r%o&sQnG0a!?hN'MGa&+WoFm/e)rUo!hF8mFaIaO0?,7jL12,$i!a4>+Y\NQVqNnR_P1qYEspnb6YKo]PdE8SXESa=g;:hEcboH`pg%7pFKJ"u8*>>*#?+_,?.RMoVI-M9S81ULfZmCn0W#7XOTON6LQHblnK@Lmgu`$?IHC*8'D)=j2)#N@A?kmt]Y5EV'T\k+'5Tj34cn%&b9D9O;0$[h/8;E9-%Fks)r]f.;^];HhjN3arL2%rC:h^?B2JN006/qmc3W<g3e=;.K*:CNjj&br_2;4833rAe*9EAS2mVb+8;XV%<e!=lQ4iFK<p<p^F.3QlT(n[qQrf:fMj5U9$0r9eilk0lb);7kchtc4Fa(62G/'^CWDEJ*kNnjHXj1M$GI=DGG+'2u#O1ql&M4+l%4C`B_e`s(jccgn[nah8o!6d)[4V2*)k*KN=7.5r&=Z/UCf2=&e?+U;&q76MRDQW>TSOKkn8>U2K@]8sa8<7UI7aU=/Y<o%qH^'qf%>#4U&m[_78q&PaTPF][%=\:c.\o#+FTe-q_+2VegUuV=Ynb)34l%qe#q?`WABh/*FHln=#nKE;SRpR!5G4kT>`rHb:iNikOjE&Wc%B^9<f8I`R&j<t.l_K".fd')7&crV8a%S`<QZn;&T/&4P-I7/OeXY';!?j>:JJ;NIe?n9jdgs>GfQW]\nY0Q"(:g'3'QW?`-2,3j9%k*P9=!8HM.E6!*&4mFrjr%_U'M6o1s.2E:uF013q<hJ]3:T^4Fom_17))ehKIBZ(A*M^0<@6-39@*ClBdc?$8T[XY>jjp`b%#GD2%XaYDBVY!^=hHp3`XWme,L6MEZ;GW?`6BROqR.G*@&Po2M(^:ALRG#^0qg>3UPt8q6?6_?e5`^mJ@t)Z3OYOW0223010t]sq>Tklb%2nVU">]g"u/\ceZ^&=2.\5YMQ0VioW>.g?^8hDrd8o!V$[YI*1;G3X3*\i7jK^0tc(u.2JAR=4&>YlkZ3N+73]P$(^_7rQrrbSVF%][mH[g\m)#7!d:$MGYTD6P`b?j8;:TE4p9k:N]&IGp758^P5,ELW0BCj2@Vj1/]MU<qSgiYTnr%H$akupfK)(7o)7gQClrQ@Y"1k%mRmD00j#Oll+er9#"*-SB=.G9X4+1UCaqB^-)m81^NuQViod;fIB^W0q:pA&Oh/k,SRe6RJW":Qm@%4_GUck(5D%32cIMg2:]7O>%Y1m&:LSa1T*^98oqYjst*;@"FY\g/?9oR?'KnoTFje&H,?5!'7Gtu2beKl,pj+<rOUlFg*-h<S,4F]4).f!]L:P@+i^&ahE8h[UO%B^MUqrabuW]5sa`5Lf5!gW=o3J$S+F#g#<`nYFoZIecJqSod'NAb1t+]X>oRcZVG8p6!r$icMghpA`6p-f'f08H."s-f'dppka,U%1[P".Mk9lGc5q5AK?E&_O*e=GCH8m?A6biSG50\'bQ[_nI<G%d7dnVjCZdOBitg7mb;IHsI[fH"+uAK;rj=PG9#Z]iKtkTc5c9+=%ha7dj9A5<`p\!U&ZU&6mUckja"I<6+rO0Dg9@o^ub^7%b_niZo]Ac7&n(p,Sc7'*dL]fg`S)<FihobP\PkcrqR!(/:DEiOT-jMFU%)797H^n>%5Mn&</f`YItE0.<KjE;dF&tal[l\-f#$[=r1hOV$EgO0_&%#Lg+2KW$8cWiF-=CZZbH$P'r:>ph0pLQkd:;>S[g:8up%:>[YYhK,I_F8g=Elp7^J.GMA=hlW0LD2Vo=.BG?p=fM&]B<?/BY&uLt*GQS.PC'C,[`*nOR:AR0/bNR-6-2,\5\e$C'77h93Ks]D%hRUm_#DWIZbNeQpZ-<Et2,d/!9Q4)VDk52"1DWqKO'O;=l.N\B=LBTl9852&%smOrfe6n0D&2J#AuGW5HK9U:(\^'gegY93M"Td]%`WYO-jQ5=epb55Kk,<a*<(e=2gmq]2O\p)'#Ugl>+FYVtJmK`;#DErp\_P(c*b`;V*>+YCZ+V!H#&Z#,NYfg"RR'`Cp)2G7A!*42%=slBU%92rFaYW'\DB,>WQV-2g:_`N6>R$/Td'5`0erag[*!ld%Q(r&\H!W+K'N$/cSk,]sZ!\8.%:0a/<!IR0k/pa5H_7$78:+3Q%E]K"bcT>#2D&Ee:,F'F"YXSg;qZA6_\J03ZkHFT]E@lCFN$E^:je?/3HMcnT(K&1=>*Xr;q,#'t;$=sB<&r:o1,djBcU?<2Nf4FA%i+-Z"B(.Q6@P`UHba/M`@pUW/bfHcod_dN/60^VD&M//`+#bE7jhu`qPu28bcH$A*FC.!:]Mr&IiA2^6oYuJ=,DRd%O4rT*jFpHD%AE%X[s3u,627"r>[(P?dR`dM)BBiKgT<4?KPI?_]G2<gt5!Cl\F31`c0G+WK[1e[Cj<l#&1=*]5WFKQ#%c3[?C4)ZN6'$5&Oo8OQ%8#pTARJf6E(lJ(2Q+iO6Zn'cX3KJR%fS5u;*YA0&3_CKr063,`bd!/eZL`UmGh^lq3=k2=eW7B9^lrV'j-JHc$P&Eah0*dpHbe1E%]phH1?3'Zf5Vh&4SH&C2.7\V*bbDVRH%tb).89mJ:Ri[o]m_MAeDYM+qJU:.q?lQ)V8G49DgGVo8*B1p7j9DAgZC,3fVusK35$SN%nc$qDBp+d=(W"O;7uqRk_*5BeZ<3sIk16OQ'K@U"ZQBSNPIL:=df+.LgrY>H6emq,k*u`WO>8n_2(ka_3hFfQFdnhOg-;")Da3(r%+8PNcR7@"TG(SC_(F$qfSTQAEr]Y1%M5O.T-,^T,f>uC;DWgLq;[J[\Va^7-Y&dW-nho?SIE^V.d6<=R]d?<WD>Ya8h\:sB]_\bH%cT?mOq5o88^WTboI<U;ANCs>mgIgi1d6!cBI?Ru0?ScLPI/Qq0`(Z.tNbP)_b=cI0Bkp_YRT\^[,JD=-UMaduS.F<hk8:T9oeGc3%.aM^eOfa]6EI3[_p7l;NPPB0R*t#k!+)4P$03>X%7(Ta=A1El8iK`Bo.d5E/JId`;T'Um3UrUW!L+9(ce/g>T(9JdRIpaC1Yo-*W%6P#gO\DD]8JDMSti\^TG04B"bM4Z:lc)f.h=DDG`R7,"j$/NGU\mgN[ob3mq;:%o/mQ7rG6g`a&[N<'i`Wql8Nq27*.RtMh^M";Y%aAUVU4-=>M(mSJ2Hki)KXbo38>Tc%bR'Bb7&rT&2XCSQI&'5Cu^`>e<]\C/j2dk]o*&!I+Egm"&TqF_4atfNHg#G)Y>.K&4&Cn]L%5ajru`s[:grm+&#2[h9PW.pnfSc(J4h;`D5UX;[d,ut\ir2qGS[VG2%[pHhJs0l?M^\rW5>Q*VT17(3Ymd;!.WW(JOeW]&\0_Ilt%@Mj3=@KARiJ.C1[!3-,nn)j>qcLfe9[Ic*,DKp@5AE9;(P",f_eDeL")U0(%qJ:Q=[X`1/nTX(71P/5uA`6J&=jd!A,q^ZoVg[I)%/\b9=qR%m(q!l>3qe`FLk*J,!HX$AZDo:41]?XI2GKNprqf!pImOG[^Q1b(O)[X8Jc7!gqq;@<hGGRXN@cF><D8!fPQ;TLb,=h?q%!4I[[+cbd3#^ESqjcM1n9Qr5:BDhel^q\28+@?^(O+lB2(<)e7PG9p9@eWHJUeNL%8ecE7J]$@F?#g?ZHZGXO#<3E8IV.O$V+ApJ%TLT3Vgrm7Go.QW%/f#JFJ2i.*-Gf)#_jD7@(-]ulB[XYD/D3;:^R7UpNNM1C0tLDH14.$?Bl&D&[5D%#..,U:;q@WP2kk-q8A)L^%I%Fs0F^%kU!ua/hH9J,Q19_&\lXe@&THa,V,D`N.],CBe0='j.oh!jkG9uIRf;`Y8X!n/Tle8PKAU8.p*ZYGLDfY4#YC"+^p*=[l%s!l91*c+qK1t6((m"VF&r(PG1GWG[n>K4Oh(?oLkb&<Iqb?.]7og+YdE_aU;hdl+HhjCA7T*0.<gmX":<RLYDEt4L\A%DR:570Kp%Ml0)4?W@js)lrhco$h+0jY1QB-X$\FYf'Rh$J#LpG_20fUgkJ``caYlXj"4"V0lSD\_>4!(J9U_WiT>ngN5?qYmhtL#9Ksb3ZAmV%Q3g3ir6:JE#_ks!1BjsWNGGK22cIeV*7I`@Dl1mX^NbK*>Vj>ZOOET^,i7N$3'#H'1qSe+g@?f0\X&QgFK1_#Z5;H%4DT0IbO?pG%)J'G2`T#*RR9OEr2fE8V\VreOVD^?AXej&2JnM'f2cZh:Ro+?^qNRH?+LnsBakI(>oCb(9HN)$0PB8BfHMLul=e8p4(STk^96cU(%4nFcNnDKBZKg#.$AKp-"IXUXrps('LUBXHUlis`&7<WFs]&]r3iJQ&.=lBF/Cg`ZLYr0f^+'rsCnuQf8KjVSP0#&,RIT\!e+GpO.%/TOOpn&hgL'?J=s`J!5VmE&Pr"DW/sTWST/!S(]$KS:;($(Jo+2S[Hp?g>X<mcBeXa'FhL79JeJUr/LF1\2S&aU5/2."rkd/37!a%7RXKmPm1\Hq4^uM2'RDZ3/belZ-f#F*/g)2UGA#R[i%1:%:isG]OhE]KZ\q_PBN?+j.gQ:=N^DuD8NQVUO-]`7.oJS``X3]_^mAC%+BXu)DT>j_%R^mo"-7sP9"1%Ecl6Ej+dTc-je76brQo-^Z,VM/!g258)T%>mZ*>QW#de;YE:p*:pPU)QjVFAL1G*nFKU&Wd9.l16%-j&D[.S%L!94K_((F1+R+tmG7@[`3!+Fu@GNXZS_iQVqN=_V`:$#@Pj=sk[$b#m.*T9G&ZYQMSRITTjN.(U@tlp;kTX*(3aDFP,5%,*[giU%6RgbfF*?Z=?L[`#1LjoLOj4MPkUl)4A"fi/hgKBQS\Hs,cF"hX0WSl4uAI@JOVKNB(@dobR-oDn_O6kFL<>3QK6F@X@Bh%&q?$iEq8AS'KP](cALdYc]L;$aFT&ppU(M_,X5E7!Ba`co<DApB=uACCMPRKmX[Rme(0<AJb"J?c620h'[ub!X8Df<X%SeRIE:\;%[jm!].=A53F+1:`cLT3IVgU77L:OMn;tg$l8,W1fi&',&:Ik?YZ.kfaJKE`a0,P]9FBrfT42>_rU=!07odOb<5$asQ?99?'o'*Gs%1!e5E%Y/-DlC_0G/>lSX)YE%Dc7o>RZu:0_U32?/A^Lu#;P.4:BIbuN0!Z')TSU$u00p$M->[o(+udZ-(0d$pa!gF=]5uH7[Dg>>%Y-r>L*9Hk6g,rSI]K8nln\9DuEqSFJQ^%<JI6#@B?8(j7Lcao^p91f=$1Vo""uYng,F*[m?:sS=n,3n_6(jaI5-o1ULPc@:G&W90%I(+eHn$6JFWV"t.TZ?q%cbF*$pIjYgQF8k=QMIgiqdVie\?fD1[_,kCMHl<7aL\Hq6_EOlca7>=<_i\_g;0E%*$+.Id\Xf]'/3U_%Z>ZS>^!-:#Z]\DIGqV%q`J_c/WB'X;5J)0-/&*]T?!D`'f^bQ)C9Lc6iWRfIo2F%,T%F@LJ`ipl8#oDC"P(<Z;\SC%StI!HIOZuI%gF&r.s3F/D($aTi`TM9B`\.iLdV46%fDE<'/>,0Cl5u#:61s\m2^'O4IffP'T=UF),pOk<.f<*THLRAj-Y8KN-@#TGdrR/!m?\`0%rC4D!mJ`Y]6.!m8_<#P`\WWb"T:tUdEZV.kStRu'b2A`L1Jmk:&<_>6s5lP&?he]4&<c\#YCs[sJVS`mO$3:/#=/;\MF-kfH2f9<%C\Zml6I`EEWX3-4etoGnMIuE@Th'K1dfddD*B5`Qe$>Dj)?@,$[:)cOHj>N&`",gjQ4U?VTd5>nY*jsMrIb<<M*RI/mmq3a5<^L1%';D12'g^:L->+W!'<u9cYcG't<)k`T)i@$kB%Bpl"(5;5P%C^u'(i9"CDsu6^h;j:':#Ym6?T;;^^Hlg0F@5?J5/tJU-p/:<`*tS%VMJAH;6a.n#3nTB:9(UkPskaPjK,@S#Qj!rqPl#1V)hQU3!@^[#RoQD5TWl2C)9V*T;3o=;&8+r$!o<-!n2]bOp$aZ[B)pp/Ep9+%!['4u)Ch`'OL)N-5S_X2!P!k<;ojiN"DnmH0r@_"D^$-C.B/]M#Y@:K%$(ir;#r"T<C*H81Fqb;><kYYO[[29M^kB^!@25f8OXE<%P*f7"j<QQ8/#]7I)'hS7Ta)9;b\E;o>`jRT:a;3WDA4sZP`pZl)GgDUn:H0BPC_PIU_lZl<M8$\14Z@>DeuS.h'4='JO+Fa!Vd?8%?lF3`X?eY8LQW#:MCt=X?-UH*._[D@=]s2Zc+9('"fP1YjK*'Q'F(;+_H01EjpD6`Tk6._86&&$X6DZrR6V-68cWa%#,qV?C'oQU%`%Sn+`23N%AJ5n6)ph!0NYgmq_bbK+8Qe>Xn6H4ocdYnr`eF]!+9Hl7O3[cjdJ0->::(Y3#r=T68`!]nMF.NciC<nRK9<+K0F8Z\%A<\lTq[#<h,subbm9n/4`=\]9!T'b/Ch/O*L9NSjjW[XC.if]_kFcE'IKR[o&]MR3CM),t!@(-CBW*VPD&>TI>Y#!lM(kkrh#O8U%U5]`3OL=.R!b&*$?j7$\73n^O5plY00GP(j6T[O\d^LV1UeB8%9+6fK2'c!T>\,C`,El/?PGH!ed$#I"0IRZ58oecYO>k$!7?p9T%Pa3%0c/]G8=WJo6f*3H@A=ob+*X[d_DB$GMcA(!lYVFg)ZKpOQBbP&6ga8QW'R/.D',?UkP.OY(;,EZk^a,^90S3.uAQl8=M?"e4%W[+Cb5dD7RWZi#lkXC-NC[/2rg1d9rF@!F&1Dl6L3QY\2m4,%a?QZL;e#eolW_gg+HBP$C1cnA=I*3C\b(Hc&U:V-'E.u?._lP@[%meWRg.[*(dQ%<+Cj!hG\0!VfmN!hNjRo=KY*'\;?Cp)NWgHFTa5O@'W9,P&_@N1\l0(TF,K@pU2&un'g@L5qJG$.T9E%kMl7&48t%Q7sdFh3=G'$Lbkp-jZ?G38d&0`(240J-7H>kaF_l^"=V*75T]1VC@t&,aOj1l3(RjX[)(b%&O<G/:^K]"=#EIJjEe!!Q'C!@aUjY%LmfM##`K:X$5FC/oJI<K('7AG#,Vou@N*cG3ne9\0mRjJ+]CG9B>T%7(duXP1eA9'$S%E1@[=MHZ:VE^$`9m)/HsRq:l3^fmgohf%'U2$PdOdKh7FR[E10)mfJP%d:IPQJ)Of1;PqAp>Kq,1mEL_RHH1C2W"<;&c*1s()X"\KK@J3'-@$s6;Y:=C?STnR")[M[A@0P3;3%#o9bH>@"6bQj.E(>q27aEmk1pA2G.1N3:#gVDK-E5t`(T-=*_sqNnQl&7c$_GQiN4Qa1mqohg5hW`0!IW[tHY0gpXg$DpQe_1W\a%2Gc7G2aieq0"#,2a.)jc#`$X8PTW4'1,N3gFDrl=N0o_5d1hee-d`,(+he,B=<ro`O==*c.&s!f6AA0Ehpe;5&Sj5_M*f`L`YFJT%W.nfPMMi`P<*9;e3muen)jR'!k.$@J`MkF.'NOlr_@`_f=A`C9fq>9i0+s<:@'^;8S"d_%'OOqW!E3";JfO7kYR-.N,(WOgW4FVb%[@&/Jht)I\l4RKV.2r:Ak?W$fEIdn;T_[N`iNRD_#]3qUA2o69)^)$elHSkDY`&=-fUE-$*,<$b]EgL$W,`Ra9;!Q`:,=7%%P4V2%7Dofc9gCp&KhNkg:%I\+$0Wcr#n/paVYAIf70muUZQXI1&eQ>O9F"06eXbW-)^\M\WfDd$TMH63M#\Zu`m#Ut/Q$%^Qkb3b=gNf1%JW<6VWeq#0q@\&_HtZ*G#.@.rSW49d3\q$G73`Gs'K)@gaQtM#@-/HZIfN>F<m$L\M?f(?3qED=lnq.=ooj)&W?rbmV`#-bGLHcC%QKa,VEb-NS*h2p2C;O_F=U/Jr]Fjl'MFu-0=]S':_k\O46jK:gJGC@nQRE,oT-2OmFP3<s<&&*J.>gZSLo.8X[mYqoD(rIsq%B,2%NH:U\_c0c1EpaZN&_IP?.:B5D[02o.2:Jjo;6:djMaZn[LcAHA!7KAmm9FWB1r4<s]uFHGfn5(hAqFg^8n%CE.S5Z29o2h;NQNJ*%bI!MUHm:[BUH$CWkAAUQ"$Ij=9,SWe%kq5:*YB)up#r9o=@na0D+l'?2V;f`!#QQ&Q7'`C(qj-J@tWN82:[9*iGJt/@T'A0n;X_H%d6qbXBI4H9$rBfh([6=?X$dX]Lb1k39MbmrMBQGH'N^i__cUL=0qt>924<%9#\Pb.f0%fM,HOrM_d/-/(E4$BUmSPtf*<KMlT.fV%7RpI<VjrBY"2opK0%cOB7bQ=3gpDpDH#=:5pPZNT3'Ro5R3FARS_8XJ7@]")@L8KUm'>F5_8.>@5uFnK3=+_-L_p`kDX&mM8,V`Y%Oa&cNLaPS[4nK3c877hVLp1phjdG!o>U,1[lbk=XKkd?n",NrpL'+.<))TKFQ]bc@@tl_UKHYE]E7ZIi)/Sk3a]ZU@WO@:d_rr$J%T];:#_I0)O^t$?8*r6YILA=I^`@P'*[>R=a]3+C0;N*t$-C^'$I2oR2<Et;5b!!F=,goR70@QT#2+1PrMJR*[e"`&WA`ep_*u"a=%bXNOk1FX?gWj)7+]#<*cT0lf%6X\'0c/rClq4]E:D(KDZ&g@Hj5H=Vr;\</T[.dEb'6=Z:V=SSpMp6'q+PieB3aW6*=Z/tq'1V(p%:ONRGOFf9RMeET02iWGE"t2/5$E?`'%Faf#;T<+>bd1O!Wfj%G4i.Lbkr8I18qV=qHftmK^]<;^e(79G]d=#^@8TU+GG&2t'a,)p%[ab(R,ufme"FNIu]uOLt*+bs75r[IB@++QGo+Hb-k-IMlCCJiI3)q(h'FZT"b]TFm[ug$C,eag\J0;H8M.AWi<L\e_\S)VWG_Sr%%%H1L2_&*[cl76q'&ue+_i[0a0Z"O^/\S,+U<k!=oS7P=&e/aB2;&q6f>Yp=IJJf).kgT'2LaM`Ul&82Y6g$r^Q<=/XL;HQ^8?<2.%2qs(deD,'UWT`[6I!%-JMkY+^NFbTk>MH"n%0Su[H^$g`-J(tU0-sPpJO:]Hoh\g0#mZ[aC+9pp)&W3;OYR?!UY5ok:#fW?!B)-k%8Q_I"\lf=radS.H5e!G4qS_30]G4j,=n;1!",gn_7)T^O79F-sq;6`l[3?f($)Rco%uGEhM[%?[9OK'ZQug'\QqqZdhBgGk;7_?+%]4!7<BYBnB_\BBb[_/c4^(@G:BSE<#!AHTa_R4p1RQdjji!@t4ZE.4#UqLl*0W:J!5fthfNG3?)G6h&>e[9LS0GaXtX&93XAVp8g%AEA]$fW-,7N&bVm-K`Nlp"AYF**(K?j9W4OYgY^):!9I_%%T&JdN'&4,5A4\VRn_i?=S;MdA0%Z1(DIk[NSoACm`HL)jAMo]0;7E%2GlBYD8P[hnb/QVW;.fWoa]k<%/)lmh[lP6E^G]rg(\2-M,7Zc(6CC&!jP]e=grE;m$?B[[Ka`[@d@Q0IJ.Co7ho6Lj!\R.*7mC/%ksLh1bq#r]+j2tlS-PIF\#[u[`=SLeBS30s4Q/3:-+5^j0u:k?1Wlk]A#Db[c#]@l]3i4aa(oH'9u/R1kue6,<Ehu3&u[1[ZFlcO%?r==S6nH/RTU.6N3YC89l,!M*-QSSLXl3POAcX_]><=N/>Ea8"?987BR0A3SY"ftdSlrs^3VqHDK;5UTg4fBl/d0=geq1joBVN*S%)ogF&AHbF,K%[2iA2-Mb0X=kR#(`pZnTYhO&4MF)5.Xoh%"B2/@B5YMj=/3@&V:*RAjIfU>"OsQapP+iM%J:R6u&^RDBmh!`r!nh%KJ=K>_KNl"&I!'[dKO'[PqEnr>nE2jV^SiQ8`,lf66TX9,djS:U8242BV!3t6W2OVcl<>QMCe6N@\XfW=e<4Ka=o,\bn_f9ce7Fu%i^K&KT`tO%X!HCk<%,Z:=sXE[f.+n3#$\tfCR'"\KL*[_,p>Qa3f0t=&jf<L\Y^SBmHhj>q$3B?.,=5&`[],>]9L9C)Q>"2T#ar.%fhs-X2.J[MWhbOR/E4rU)EA(-WcZ'ZY6.2$,5%8`7CJn099k0iVSFc`dV;l5(,\So@C""@.Z+(j#.IQ'Llk);O_[YBMp.]b/!Y3)%R$?!/WKL5t[\L&Mi>p[Ono:RuUe@k%7Lg26f13alW+E*:]U!_K;0@:T/AY;9l_F(*$K"o)o>/k(%a<>nn?/RfMG)P_0LsaT]8F"T%:H(G2Vf)8s\2p<(Jgpu?*0'9k_9qoXmBUPL'@jU+=8e[d^r$t!PB.a(Lp^oQ+DTL(JaE&.mS,n_8$\PZm^3SHIT&.E39X6?b[.%:%[`M^JF\pdb[.q4E1/19niKP76$nfm:mN-N<.#g32U1+EAgVNigh`NILi/*=;QjW>*E,CdX4Gj8B[4]#nO+Z,<#N#]uVXf@pK@tm4%]^*cc"JT&5cQInA;oek$;?4oV40B%di#->I)a"K(fZ\W8MpWMt/O^n;c%p0b)BiW\ZBq9t+rL^qQID[DKSb;s_Q=Zh`]_qNCi\),%6?JdCA'>i640rLT.jUN:==c*D_b(3^WDd6-73b?gXdCq?BF%H<B"R!L0*4BQPMB=uH&J<P&>30,(g2_cLqSLtX[OIk/>CJAU(JU6%<^bT5!*.AT)aG7W4iU=2aK9Cp2H'_+?A:q:WDX;]>)Fk>A<pGSG!Xb9)[Bj\d1hX0AJc5X8S+ng"cP$$'9Z=Im6!ZX+oOhgmLd-g%^D4pEB5n"$3L%]f.HERu$tu.2!R.jWf:`r$TLOYV-U<J?1(/ZW9H:uWLur*hU*Z2j=peJi`ql(GBeMl<I[-9V65H<#0e>f9/2/9,%WbWcHE'TXV^5rU@a@687LaKF2Z5=B`LaE3l;QW)?)Ip:mR<RMMB8%Tj*o"lbKN*ru%jNdFFd_V#,?$<7&h48pZ@u4$h/")A="-\d%d"0-d?X449I!?K2bB<<YDu`t-]dV*e`0QEDZ<<uSCRcE++C$:P0hs0[7j:hG_cK8PQ.^kU+CmI^//HJm`#]a8N4.W[`)u)"kHIhG%QC^*WXhGY90n'M8WN_(&%C@%V&:FWhHq$ii@$lZNoh/t1W<QL25S.r!A9Td#FN@/DH;u;`ObtV]OPMUUAf@pJ+7(dJ&::bJ6SOuZ%XG%+`j]%chrG5n06[]Ctdu`d.02)BnBoBZdCmrF%J1-;gZiT2X,qr&Ufa<XL:`du>+0JE)X:0ZaKglq%3i)u;-R*L`#rIj%e>K=t%HZ\F';FT(;5j7>4Umst<63NNTX*mF/2BUS0Y.3nne'\R3F2eY.7U3(u;R9cjMQ-hq&su3J.B=SKFNjsP,FaAeU<$k*"C$H;%b&rR%[akLs2,S8n9G#kA("mR9h$QbYV5p\b!G+X"FX.BenYHZ"'*o_X,h'.Bctk1ckgUoRM.3PI@ZfR]M25Y4e`c!46?HA,KM.1F0r?[m%9"_cJJpU@k$#pr*3\(dL1r;A?m$2*Z,$Q0eB<-_G@T@$_OJP!D&fh6hPHH]MB;Ik`d7P\7X5KK,=>D=PD*B+:P8)_3'&GkZ8<?:`%A5<gCEV;om0Z*nQ'25cc@2Nc@I?,We'#DO574+6;8tKe'h$-E\848eI9k4fsc#=GOD&1LFhJu6)TMl0;X^Hs8S'<Y#"7+Em#t"JW%il2-LY@u$KC3!.NR6!]B9@0'_LM&)6AfSlm.gVnV^Fr9UR<hR/,O;J-#>!',J1n2pH\obm"=q]UrJ%"%C]t$C%4\uI65F]D[Ro<>%DhY&*n3WgF1#pH5VBRes,\td_LqZ,/lPPn"lhCfUD2JBHUqm>36bnp$2hZ!@U9E6(P6BhUOfhU-8ig0j(K;AAaD6FJq>_kcXHZ0i%D?R>JFBZfu1s.-V!SN#<Gm6(WJHporf]6HFgN\P1JFaNg<FY6&2s:V!]4@Z<A\)J/fqB`JFp!TD31<r\CBM5`-J#!2QU7m3:'S:#%A/@;H:_X-lgQk)?5nHL$KTK?66m6ZW&:7%a1cDI$Ru.L^AeMf0UcTeT9Sa8":N117:_=Fs=s[Ah<>N*?"R);qL6t[.nQ>*QcCfg`%C8APucpU'c3aYKhPIAUR."o[[qGgZtnr<8Lg%^<(,GA:RA8rXO)Lftd"-r8/;lQP]9gAbOm:.9e*jSA!QTj\Gik2'iNFo9>W?"G(%6(uHW+>GkdT]/.UelN8*l]b8P844:"Le1_Z$D$H^n;=:g<_\eCD3K3Q8><([]g5`*YSFGe3Y9GA;@?h;$q$;P'B,'?30$q#/i*FS%(?,1+OS3`FaUeS"ko)4.E6l$\7NMuDRgZ.8,#%?\cHI3^f()OCF9TK=:e7%>C(2Ms3&#Q01=;aNr#<bg2DAL/N"ggO*AkF^HYi&9%ba>a[oK?@,'R)";>KW[4`afr"_B9%1NMg9d#j-mUM'F`(!<]k^23A<1B#R,.7(8QA@%=s_=TmRtB#gUTGPtq999[0T:')Cjk]`.)%(p&s9ODS,[^ie+o"">lK2IoAj+#AE]IW2#kVf@?XnQja@G:D*)#bbp*h,%t()sq3.A%7AiF8F]r`GhUT+Lj;2kT_f1:B&A^fQ;=0%Fa-/&.[Hc:3EK;n/MVI\q'a(q5qF1)'-_ZGF<O7H0@;%j[[N#-,018\J;6]Q5(G>DX[`-'7(S;tor]AFlpo%A#YY5:#mJWkk.F@`%;tUBh[0FliqR"J(p2W-4_PD#q;jO=1Ftl2uHhG04iWOiO1p)S&'!nH8>p8RAG&LM;OmWsJ#Xj?3&dYuOFJfaS'RPK,1d#kI,;?F*%&g7TC&iuCF(h.Ib?s<tK>WO!H%KGn>^1Gp)*80TbnfP/9&i=K@HMZHNe@cLCOe=uHH75&S$D`*M+KGM4pWO51&`L.lag:6-:6+]V%%`cK9%bhRtAL90$?Z`0j/j(bN8*.S8V0P-8gR%ma%IWdKC;;+>6u%GAR@">5;LMRXEj224X,itX,?OQ9BBaPOcAA@U&Yfb*M.0qD%8XSRr+t)PQbH(4/)En)j/@qidlRihDhBO_J=K4PKQ>["Sh==9/.ZD"8aQL'U"FH+XXi;iJ["[,\JK,m^-MN!',t*oCm]Q<p.P^T%%+-Dl-\@k<l'J"tXKW]Bj<QFLSSLIumJ)+aeO!41eRHf$>1G[hoiTQ(p"scSsZ+D8U1.@UpnYDLMHU#8)/QT7R"D4Q[5%hPM:5^dS%SXieTINN/KO1BH-=bmUGGM4Qu(d&tNr#k%V_7l'?OWcb(RAMc\BZXhj8$.Qi@ZS*8VM*\7o>P:=]q#V!SbDh>>a@oY/MXgf.FD_[%?ZK:i7@,=`8L^S&_I`P0jK_l%hM99,`,lKU?+)9*7Y^dVr@l3)Dj8.EM&[`fAu8?rmN(XH\Ib1'UQKOW@o=j`FsH3Sc;m;-/:u<Y%'<BpG[SmTIC<AhYG1hg"X#5hk+<emah'Hcu.E\0>;_P?.HZ@`:K7!(9AKOU<o[>k>]WeCEQYk@XSh=eMWKPGJNVnLR3fjR7&7(T4%kd'&H\54m?NYY=#1WIeYA`_U@IBfmh;F?`9Z<3sQlZ?9TnT`=&<3[Af_)RQ63ard(.8`_(0?KA^;;gN*8pOEBjF#on_I]@sD[?El%1`f'B0[b@<p/#Yq,U3C=D.QYaH?d[#Z@Sg6-d58VPh\@Q?+<]bjc1+8]/+'<]$!FSXdtIDfImLfHa]-M6XZRH`"R`,G/qVT:'_(p%N$9AfMM^.8@?N'sh"dgJ??Kljqe)e<qOd&`]kZ1f$q$V*'LZ4P>3FP)'74o!Z56%r($P$J2-Ju6@^e+YDX)@;j0tZbq@X?[o9?AJ%g(,3MHV`sU)R%bp<U:0WW3"eKYr?dko/k/\VXj[+B)FjdL7dSeZW+Z,3pbO#Fa<VfE?!Y4Yp<tO6!lD>fN49C1$n,$39#^\rq&oG%\;ERhoZ)J(6nc)6a?m6<a;!CISLD[h1iOptoBljIJ2E??Q_fgXDUg>[\.R3CEoV8pn!:WZ_b"7j79XQ(&-O3).h(U(j1bh]d,;)_%`$20O2@_M1.]r?CiEdEf3tQb(F't0=8!"*R]U(hN&Ir^#N41W+VgQdI`=l!)Y?c!m[fXXk,9i3g@ZL@9inPKZ(0a(LEWQ4Dd;740%4:pD+%nU_GKO0mqrTl^:/TU(f/7"<cTKA,:Jo,%qq>#f!+`g1sI85Du_aF^W[ilb>.De?bFDUMi9Gs4=CFcrWE"$<")fUoeOcHB1%*iZ<tMXoSL-WjgmZ6$pVYt;W&H(YSN']`#A&^(Vi$kT>!#BG%fNYo1<j=M3""'7aAG/)Ppj@u'ADG9"tl>%Rd?$?'kC.)E@1^(LC%87F7Nh(<PJ@+@e+VrJEuIOlT:,/gA?#]Cr>gU>3m?W''i=[i:a8;-U)/"$b%3O_]Xs"!K&7AfZ?Jfp(B_uZ=0D5=[pf^+%)5k^B%%)@UP#>jmdYD#eTEP!U:3]sG0^!l5=s<_DdP=jI\AB>TeC;i,.gjCEhbOVs<,+OS>A%7/)\&udr'>6I_Cg'GELUqnA$,X=sS,PDmn%,YJh0fqq)Beb23)Z+$kgEqmPWLbrKP^dY)U8*m(m^H)2mVc^:$?jERPAYC4jC#"FP9cTTMFU]Omrq]E=NIA`0+SrNnMLRaE>WGF:%1F1"*U6UKPJs$?aEdo.=#d-:s&Y'M+j%Gb2JWqQ3p6Xi3XseF5ShtNRmoogSm'%O(#lF+9")Z,3&n,D]>duA3BS4m)!$=6F\,2iX%^;6DXJ&i(iN#^:Y3NhGG*^b`a*bPaN*fW_HH,q2be\`<aY!eFV'5$Z)9(&kK/_lUBd9Xk;;TGcDpS!Z7Xr]k7U[T[!(llW\Z?^`2%,)jm$)I]QN8`M^f7ScWu%/-%CLKr6Ka>k9'j%Jh*+b\WC_[JiQK+YXY%p=uEL,I%t+G\2S1F\Cu-,okH4NS>7:<oi,=8dOtplX?s%E<Ou#@h%D"(6D)Tl9PfhX+`FJ>m'$3*MU0/$Jj6ZUAk?TmUX/=4(=.!gm.D^B]Ut'T]D5ke=D@FJgCqA"PZ>mfFhct+=.g9HODQk%-&S.-;]W&6HQVrPm`O_oNIh`H)@kd=ah/IlTFirP5srm&a%_L^:J,^;p)!-1>e-%%kO+-\^2R/7+65nWh4''[&<XTrE()JB+cTm"%8/bgO9F.F^6*\0M:3&ds46+i6X7j7DpqYn%ol^I%*6WmD?]:nuLI6"KW?$PN?$336!Zqn@huh;BG1eq\4p\j8VtL'%ph9Du=&;i:%K%Qt'+5`d_h7uPW4[U!Wk2N^Hroe$D<rLrJqYNIg:"+D]hD$`HUjE+tCU;+<o,g7J;S&e-b@dU+\%Zk`,.k'k"V_SG2#Xf\bck_K%27n0i&h8'?1:eu?"!IG%AZBRkkn/l@V>$6aG`M!0d'(l=.n_pf-m@mnSg!1o$EhC0bS;al\'2>aBljiq"Ir'ians5TFH/]Gc?1Ps%<HWSmk$MZ5dE,RpQ4a;j32Q=aRCjhmeIp_Lk#+rb7h&.(38s8='sW%H8/aEA"F9@'BTt-oWY>=o&s\B]qE*dGP/iR,i;>n+ZK]T?%C5C/eP1T#52/k!&;0ot=847Okf.o]fmgpeBM&Z_8(^89lI(Yds7HYt-mJM]&?F?)j'#]HU&gUe:^aC,B5!No_0pV3'>OhTXE'DIa%B;tf+]G=T0>=3/,?0hqS-46/#p>s6\-M9A1b`b/dhnnH`D\hsY%*?5p`b1FI%"KV2Peb^6SWnlQ<Q,'DchoS0'N.q!ig1TRhn%Us%"<]?q!6cXD!AoPc"PR^,&9-XRn+6)$qhGg`l;`sM[eI52n:XSTfbW_hbHM56HUS/`o!dL*p3`3^KjE:C;,*%g#mZ9u!blLP&%>sW%""(KtATUSbMsJMV`K,Q3g+s9JH`jE@XZDWS$A/1c)F.T^?XIh&<l1q?k6_FPMcp\<(9T9Hr%9RI,FmebP"'8Em96L9/k1JhD+4,C%),O.r7TcSn+H!-<aKm+![rQ1-6*PG\+u),&.]9`CQ<JuiQbGQ1OSP`YI/`,6:jIC6;COuNTV=mn*H(Bp"=Xq_7pR,jV;mu^<i*u6%Iu2(c]?#_dKpb`AME=P8-u4$,Sio!eXt:FV^Wh-r?%,E8=Nsa-Sn@')I4J@5b^TG\9'BGrFHWsNm\6V8I;>^(+;MJ5kL_4a.g]l`%TZ^fPZDJloJLB7"()>m*We@Da)c_O(rPI8uf4p6J%u5\"/LHB,EGK+g%fuO2h\i;0$PFVad`^$DeJAZ5q(ei:K\c(H)<4_LRq[,%%BI%TXrC1OUP^AfneY4*TDn!Hc9ftQ\:DA-_[L&b7&YfJ"Lf.]+8X@@/j\;VOP?6#jE39(MlDI\#[07(>M1OYacDG2aP^r%IgJk![%BnVO*Cm&#?DV(SJP"_4cm\(M]`gs>H]<!`+U\*p6n$[:e%s)N2R+Ji7G[OaK=uj%tn=`fI1sERN_*59l=op6PHFB,aEH:\!03qW@%WpB'N`-F[/5%9`X.8a"00?KD_;<m54RX*H@CUeQH4m\*Q@YS0Dch\;Xg5mSCY,BUg<SM[ECW(piI:o/],fUpn)1N3<s+p*+(Qg0C%)B#G3Ed5]=nW?q/cQWHdc%Mr8%j'P$c"**0(3sJoQ(4.*;D'[b/IBg=fj/W%kD<M<[],Nnh1aJO0?J!rXq6b5XSB;nr?1-[IG/@G%';s?8/R%GsA?SC]JJ0io-RJToqb(6`Y39Z^SGno*9!:\-UsIh2CIP^##n)I_ijE"V9dQs60AbOQb]uN75%9`X.8a"00?KD_;<m4)%C$*q&ql&nig?H#t]@<#2!uiB),S4:?VaKL`CE'R>*aXb#Iim?ZM'T8Nk$C\IoNHDSDA5dTZN]CWO"n<:>&:;+[;md6<(A9gf?3g/%Ap;RYlL*>@Z-u4o]&9&C)B:JhJ:o<tG*dmH4Ak*KRp(*fh%:1E^P(32nFsMXD.)P?CA(ha=0HamXk_aDZRoXaYPT]Vf0Id"';i2[%Ph\Kt^[RuUb'bj$GCRhOFg&dO0g$+4>)ahL!\%.1TibrWc'!AU=&!%;-dEBgXO]'tJWqQ3p6Xi3XseF5:<gH:n&*3H;MCCJ*.*"P%4s([;@k-As%)hUE:]FQM5"k!!DhW(nODRnKA)A%B-j?Xma1`g8Ce\>G=1n$EnRDuGd*?"48!)\J/UN0"3bIC_1&kgoP\_EbfF2''%?4!04b--J_,3B;M]tWb81uq@j7_tZ\_#1\1T*a&&*?1lE55dX$DIacOUOAXQ"0&]]Rg@eD!aWo5UFXKpV(ul7rK(ifDuli0[*(%F%e.Nto,Ajp@Cb0.@?0<[`V#"dOFXP:@Qeu^XVBiRqd#Ei:/ue1'^4?d?&\IeBUbFB)<QuJJ.%rHt^+-\.>PGM@eGXc@p;hVCP"1im%PCXAS3I,gORa+mRg_gX9]P9+g]_E:',lF[s9dK3UVO);,hj*1O71fu`a;:m7k6.XaX=W1PeSFH3UdWFXE8Zbu_V01B8dJ"ZDVIj"%G?C[nN?jW8a<!8TK5mFC0ADjjYCbuXCZ$u9d7RmCM%TlNA"NWB)/gUbX"G8n'&s2Wd04&)E&*Z@pQ\23*/22!lVPa)lJ?Hj#4<l\%/rNfufAX#>c]=:cC_Vmj>umscNF[mu4Oo`\2BtD1@^LM17,RLZZ3**[iF^AY\=sKd47(Bc[]'ucMX>B8q05PZEEK#f`u:F@%4'RY%fjPm]V^#[5YYHSdf"9*8lV*#NSak(LX7#PUMgqG<i^A#5%Z?V2I5ieGC<C06=kU`..%B5']%1;l$/rZ?$bLULi>UQYFs(EIgrpWH%=%mq:_lfUihMnF6>H>1[8kAK\?Q9ij4]fa1D95)-(cNRu/g(gYPG+5RY:N</-j8sCB;M,uHeiW!LhN:gMtPu/fefpNga,$5<h%/^%GW9MdIV5$nCdX*8Q9@,LoN9/NA"Ad0#J3V]7&K0]A=Urdi?ai0(oAmDXB!Y?[#%].lR,2P78rFR;[!?$ZHEm&UJ$ur^^5^b]Xo^h%B.@H[N/(_G[21p-oG;^S1g5)Y%_7_NZc?NJ"P_46-?#P\nlVm^=0oGL,`Q"_)EnJT2qVF,+>QAMF2$mr=f^tp\7'tW=fE-f_]q80%K?VN)^[/+<-Ao_U::#0,gOMDrJ4p#>L-kIFZ6Z!9OLK;%F`Ju"_l_LmRYWY9OrXAs<pPgGI"/13^Q2+;B=[dgPs=&='hnbY[T!b2%K32Rq=FJYNVAk^AY3G6k=_(6SPTgBr>frb'SCul`>9/0Q[ZqjQ=q*W5e23@Sp<XK!5-]ca7"8:"]K9<=j-jETiLQ"#m(jJ,!!c'q%osCnH7jp&?_Ghe##cn:<NA!@=Pe![MWh60^Pi#c&+la<a[SoIT=P/G!GC?//`RTP+`cKPXXhUng4X[mS]i0E$Cpju^3kg;p,,l;P%'C-"j,'2OM&Y@_=EtC@(g,O'#_aJd'$%;-!QAi2?kC&*@RWh`gIc/DYOk.e6H!m!>ntR<b0`/Os:NAR8@mi5`U'(SbYS^l-7btMS%6>5(/SNYo,)hh1Vrm#E>!g@.PEXZ3ANC@09#1@UCW4t-i97eQ8["WbV-_pN5BU\T&eH%KX.m_fO''.2,E%Pg]9Ab/)RTPH'l>@BD%I(!5%]L.k0LbBlBSKR#D-I)G-dK0qge/*'Ij]3nPH_:'#(^ikNF45J.RS%,:1'83+=0pRm(:R4gSZ(m]XP#Wa:B6T+,GLb]e>nn$%3=n-DN(J`67-W:9C[1B>Wtf4Vaq]eZ(;""JS3OHjr/SbK!SCD+dJ)>8SAkkDHBH`]l4-;<CJ@Jgn4fFm):(kE&Rm5CT]C]^r^*-k%Pm]`7GK%40mrcs3r+RGcb0J#q\[%@Vgi'-RNS64L10_/coXb![ql2E6Fj4tWVqt(jr0_<fh(fU,'UX5N:i^K5rnt-,k@.],B*[Ui%,(+Vi7:=Fp=d,UX`O!CH$!B][UH=s[&lZ9qk6T(aUu;o\&4hY0@Xgt>jGH8Ok>]Z`p5\`aqh$GPm!-1')42C3Y:Ijk&g<Ba48>sI%1)G3\#Y`fTqY4g)fkjOI6DR(+(W37"V,!7Oj37[%g7LBa*KM^P\)tq0SC8L,GfaTf^+i<@F@o;M\mD<qH:'m;EU_I8hg4:O8/bdN%[O6,N8sC"d9@@pZ.!"lQ[Ck_kK;7s>pZ]!WJ2CEKep;LJ4n>+QPf(M:$MVUo/%HFAG1f,ioRXR7#:9,)kV)`C\Y?!aF*](OQ[Esj%(>I>R5&7HQpoK`Q3Vl*K&c50Ocf]=Cq<lXCM'VI$UX,)9I?sgXT-[S2=`R9^]^"rF*r!FrCR5gf9'1[4B"f<e'1*2g3DMZBg-Eau%VltP`YmEuH2iQ<`9(W\gQi)YEdG)`&*KoGUDS*=-7qs?Lp3WZIO.hX6*_Si=R)IP+gnfjK,&)E2@q`q3;,Za6acft,lJt'Ak1&8n%a5aaH#g^Hj?E)V!EU[%Hh.N=;1_oo,F.;<18=ka8U[.DS,0=n_d;qm9T$.,MPCb=Z\)?%i1<(-%MsZ#!jnJDS/pdOX-l'?ZQMW19%"!MZ<^e:;fF!>=G`$bdeU86FKOsdf7eB'^.o;]RcLtr$iSr855PS+K'ORorD4Vq2P2^/OLdL]HA;Ali3#q!%G\J_B/f#9>Ps.JF:%')dM3"]t,1_7BGRN%[:0n[_W@fkQJ64]`]?e^JSJ8YsYT<O3'C_)[XqEf"YZlsc2-.JB+h8ZjIaE]t[<FR&=i\4nVLqb%M;@\8\8%I##l=X5(Y^)0,I/(S@PpSJ(Ft+7%6s]]1FDZN#D;Z#2Qn.]u/AOE;eSmDTfO+EuMQA!cCnQe+#d2f_g]:QT$)rF\.<!r:BlTBeI@%8c1Lq8LBYONrH7G^95\F"HQ.c`\Sa4Z_%PI?hVQrK^et.\'X!fK1N7fAQ,#6/"]!^NhMCraJa:*?AI^"7<_-*CdgXP'#g:8UX7*t%og6s]C!US2b9#@g6&K0>>4Hk@[VFF`$(`7?f^mOY#Eg9`>T(Gs.C8BBHDKSLp+@P"r8U&.jbb5tgb5d,.&5Am/K79J-Ya\h]4HYV%8t&0`Ua?V6U//l[@m`pKGWq3m'tN0CK]GmTS%5k6<<Rmu"LPBn9pX^.)I(3\!hb2QkqL)JjXB@gk"`4J/+n)mFbG`-0=\%0K<@6S%a>0sX*^_1f^3$cA[!_7(`)ft=OpstMYB4J9oa:/=oQkl^K%TaH.Y);E/47T_#mY$Y6!@iY:WHoV!0(oRUQ9%S^3XsN6YsoTCJV&X%db6LRY$$'KDr'9_#"qMc^@'3g7XT.m;\?f;nT#ek"=rm6.84]2peHWMU;)G]>$h.Za4tL`9/!Mt[=E0)8E=`H*)M+5?55=[%gO9Z%5BDj"%P3/siM0a<,!"/q#fiL?]@nJVUGSPk@-?s4AjeH:>c&Kt=U3j1(N<[?e>XQKSZd&lP07T+7frP]Yhk,(csp[sWY!34@T5uO%ce6T7Z<1RZ'Mh=R-L#HX6^Ya@X@_KipfpBBmr\:iaDKE`'j8b_>fTfSKdndUCsO+YmqrfbAT,=Q9SSl[%k=OQJOuY_p)l_a5anlR%'UgF#Tg)I:%oPN<OS2_0<1WS^$!8ZEDj1F[ie\Sud'4HrnMXZZGak^/]G$^5`ADUBpJ:Z!L^`+\KekO66t0\[3.*)A$$g/dN6Y<,%gURfJ]W1?)[cq-O?,'RM%D+*!'%\&2Xot3V%N;5'&ugLEQ=/X#HKlVuc7*NG:E<t:%%@gbXEdK<#pIoL>L=BP`A<-+99?b5%T9aS%&'Kl#]4W=%aETU`X00Rk&uGT;hgXgnl[_]<$L*#`m^=JQ1*f=ZBLca^#Z4:P>o':n'bY`16S#@Oq]OU9X:[#;G1FJg*]EGLSJBO*%gfqp%2WZbJ3@hs[G^:C])@/hTOP;q_co9T]EZf!D]Zf'+,Pp&UZS&A&&8feY>a`gc[._&6W>YVsZVIWCR%0F4k`l^MeHsW+]sI(,%c;HX&EubU5<SJ*re%[/@?$\FhRDlHH<1"/5-Cj3U[GlQh66nq*4j!):K+,ks2M`\U6?EV&/A$ou'Fs8!LD)"_p.-*$E:k]gg7"3`%;*t6)qo)QTOF#1o)!*qdPt2=Dd#N(:&YbN&].?Tf.cfuUB:YQ]q]NQ&p?ATe['<,E<='SNO^/^T+`(pa=)IeW,$_Ni_SYB67)Dq1%d8c`4\>o9=mR*<(@q=?MOCJZ"7GMM0#?om;RTD8,.=1WNq^S%A/MU3]$Vk0"8;rK=L[TmE+n$t?d9-fb44g0f=1'&G[C/k47;V8S%fi:>Cfk7[;ef`Y#AHN#^^>#0L2+V'.LT(Ijj!NhV+,&E(fNiM>1.<Q8j)i5@diM)5lE9/`,r[LjV5a\[NrF![\WtB=PCoaN\-(Dh%("j271Fa*%pQ\23*/22!lVPa)l95WT[2XhmN_#O'T+@ju&WQ5ae+i6bJpif7cdDN2((+=6BkWAXdZQ,0-tXd+36/aDXD'0*0Ci>P%KJ&=E1t?YT85!9is7XH)(GG*pecaGM]lef49DqU[(&BY.WHE^4j"TieK<]\B;!aHd^BgAh]h*fM(<UtbUi?I[QjkRWei]6@UKn\F%DpJVe,u@+^ZhVr[JnW^&ZOjnVTJ,%?&<i96M,:H^]^3mffA;H4>Silq&6ZQX:lS1&?J*U5Yo'(B"^B*nY#Q,]M$_COoS7\F1<^@6%0?pm?N+^(a(RW;e#e?=s]+AR.jUr*D>q%FabAdmd6W6'HPtH4.@R@9WF!a@]lp@0l[D>=l%gckmCW`r@GHE\BO@BBT8]+;j,[3s,%MO)FZrS[o+o-kV[745.S3Gqi&qc)me>X=/Hm#i=HpN't6\8PBjd2c\Aqp%mW/NY[NB07Cq>%0+;T]C]^r^*-kPma.A]3a?.msUuu%*mA/Em@(@-9V^?d/c9`^d_Nb-EL$)Yr,nrPLVFHm6Vj*F.gaU1]sm(+A;U:XY3E,0>57EfGFYX4eO#:Q&e6"edpE\a=BG2t4M*q'%lGRp63':Y&!tq>qfNf+:RA.XA\1?Z0ECZI-rBp/-V_bua8ToXm2`pme_BH3Zc3B#)A*Yg9>j%O.;B7_$mEk5l3fFLGJt44V+\VG^%Z;!PW3i01B^.le1\it^<KQ*2h]Js]Ya&@hoY"=lkisF].Lf";N6n,CU,YN/HM*'`h.AuGpaD`]bWoU6cY;_5B+CY1?Q@l!N]:C$F%UaF)mlEETc0?.32)JT7,oSfco#9ii"kUq.Ao0aB>f5s@i/NN.n8S9t?6JT!i^,kr&s6'oWM<i6sMF*i0B4"@='hcc!Q%\A%ln8)`%RA-lGhk?3#D+BInrBkVUV+2?D.[Jp::54DqqkKbF[5?E=1;];nFIcoIfuj+hH3-0!r^&O,<FhAdQaB<Xgld9\BI$BF&tuGlS<!$G%?A8od&-3_ZCX./oP)UC"Tp$*8_u>hsa;(Q<N40(ISEbDBSWK0maZ\b=adq3#)-_=aPTn6=Z<:R(T$0(DiL[RQ3jO)F84-1?\L.^2%4kX+#%!cls$Ei4V@VF_lf^@$HInM*Bm`bYZ8KDD']>G6AaSooHIhLW>E,Z;t!(_f!@UD]ijG<@Rf<15PXl\2gr?8feYCBTpF10l"%l.J.<X/PE.=I2,ZCWQ_@RSHRX8g"R'T\C-!-l';r]*cRbL>9IoBm7Cpc5$.0V:P.`C>WN48kn3,*;r%O1\9[Yn5isYo:6F&NYj)#%KIA)=Q39dN-uSTMQ+SU7_oTb]H)*76-*be:-N9CTpS/DlqZnd$QAa'eq0mu`dNN:u9L^6Hb7P**JE%&7aKrNC:CM/KC,l>0nq;1q%,8fqoQFc`s`.o0jZi$=5L1,!B$r'YnD[X.R!@'d)n.eU0"I=@"Au,8XAA>Lo5>@j>BgF9?8c[P9(K:KS@q_/4h/GtU*am1_K(b'8%"!"":?I47DoNgl61G>]ViTX7#_5d05\?t,S7Cg+a]!`2SKp`sRYJh,jYEHA]EXH58,)K8p%%=Car"[D7mg2>TSeuS0bm'7MM*^;9%D/:fYUT$Rk^^hV<5IHeW!;a%Bs*JK+n+;qEbk$Dn-XrR-(UPCBQXIda"4n1H@ES1n0&1%T`Zm.8@:m<Pctumo]V(Ek9!$Y9K(_3H%F<_EN9"hegpYgTaL,(pRk?V[/`8i0K8(!4bh-P93fK)^W-VOpuO.\ll`F<Y!(Y.%-`1TLJ'8$pldMHrHLgbO;:jGgej\0R`Ss)jl%\016s5s&Dg!N@X11sG;Y,R1@SLF7-<hM[)=)6nP7%'#Yb`e[,dQPPDZ`lD8'obUrB4>l?eg:<6-CoUa;3Q)MMp4.`7?*tPI#;Ood%9/:3p6E5<5C/>@H8?J(]1GWrYaY.-@p3?M"@V;LdoeLu<BC+e(#L9]SV[3sDRm,b'K/4dn322[n'1g2S%_4NZ9E\!0]Eks&UqmY<%#Y9e]@Xgt:A;V!Ij4)5PmbUGo,frA5JfFt`5f#Wg&TrV&6u#PX9u&@3]Ha/%q9h'O3fjQJd*O%RM9Ma8]=$EsQWk=f_BH/a9+,Js%GEl;LQm!oq&WJo=&;31*OF$N&7'PaGMdW#F)I(&q:bbS,&\C]!,Z?=5B05a*kj2O$NU3Sb-jZ$@=9>UZ!Jb2i$qnqK)7lK+"qj96%bUl",\Q;1Ka`j7(pFigH(ZaM;UKX01)L3`^F?JEAqsp[Rpo+KN_G?"6[1]7,OqR_Xr?XZS;tO#O46bhUh"q@IE`8#;cn&4Fd*uqq%qN-][@h`@'.pM3ua1AR9o;D3_FqDqc-Kn=fP?u;G,hKCG6#NK<KHT@'L=D]J,fgV9(1]Lg_`io3Qsu:.(Nu.@8#BP0cF3&s78Mfu%Ca@VCOFUs$EJ/:*%lRtMoT2JNVM?b?22S-&';K?+&m^_"KtEEqF/`R%]e0L*Y/r(X[.6`h$$j$(GNM2J@*-8$_6jAZBF]%[,XWHS%ZQr+_7!Xu3WoR0"n"Ui\R>_fh<A9ZqB#Aj\Z7QSZci?4F5oWP6*Q^J[U:!&t3X!'hf*"2'>/@JU?OSH4PS&N&8tuYXa^YdZ4,ZT3%9-1AEY)/sJ-#@ju:F/C8Z*P]FZK/;<f<1)LNTI*.X"l!1qCJE9P%un-E(b/mIMIt[8LO9V2K]<:9I_mEDd\X6PpP0qe-/,1f8m3/%>MQ#D)PIZrA,5Nj./ZsDC2jYR/RS,b`E267"SO-OQf]CcP(.9"gB[?r3.QgJjBbQO30Uld@]:%@C$O`4RZ-@SJm7YL]Q)C->#H,E%hgrHik,E5EX9:pi82R,(`W[Ji"Ml;bWB&Bamg-.88TQ1.MBKB?99r7n!E>UTm8jMbM5^W.4SD4(j4<m)pR'[S2s>;"jOR?JEgWkp%+KZ&=I41Wl7*>NBdGM'1&hg.`;Q3D>TkL5=;Rn>=o@&Wq%YZ;^@Ir=9GN7ZRf$)=ikbENZ,_/:QGVr_`'23FR2I(]W7.M[,>umJh%h-KpD>+2:%KGi;qk#-KnU>H,bl><V,JJY(0Og;%g7R=aM+B>]d3.g$^FnDHZhM,8E\*KKY+'3=%QMX`>[]3BT;,Is^>aL_?`"EUe%`+fSBmteB3f`T;L"I#ba[AlDDHp3#([XCA0-i.(E^M6R<f0JaIN'C6ahch?g4TW$#D`Zsn<6&8Y3qY7_&AQ/ZVA?%-V3c(_g;B)X%h^Bm&aBHVd&g@?Eqjh49=_e1TQ_drZj59p&oLu#f;k^(Z=_/;Ne;-^PP*2S/4\);\*gVAIX\-!%%G-TX0Uh*nYM79/BE:;:c@q%r%0W8\SK!$Gb#(h_uWu;;&e:Qf9%n3-,4GGcC6PC;UP96N&LUiKa3V(7+\/rplbT/R7$s[]];lHLcQE8W3#BI>#C3=A\U]_Uu[XD.E%AiG,rb@^rZhr:s4)L^\G,pA?4h"EhIRP+L@Bp\[JA,m9R>1j:1![cCam!4c4NErTOnT^W<3i?@g'ZEatkE).c55`7$A,^rnB6_Oq%+2+t^TT<JAJZi*T?puP-C&7L_Zl(W%9%$9*i`1@QeteGfB@cA4^a^#>YR)EgKoJ0&O,7eGY9el@N"t'2mRC4;.f,0%B'7nuUYL)-%"`rlp$VAHP=Nm_N!.N3[0^Qu>4WfmU?f1YgKYQhVq43l[:Gt8N(/j6]BA:FM26=fjf4Dpnm\UN@U%DphHldppfsG^;E46M6[k@=T%>Ip\,<jVF%RBTYV(35R3dD';E\!F01H&=8C_7V]WO%]=YVdj2dUBj1g+1@c-6k;+8!qhoqV"A*a>%J"rVH&&+M@s;XTQ1ns1Gb+_%8@K_1J-slb+Y6-*5gS_rk>iT<%8*MY/%jZpcuN`TX78lQ(jBqj&/h'7Ckbqq?"?%n&2S$KGqZrd^9s(@UF-,S`*1fC*CP`1Gpa"D%B,s39*92PlYZ/FVds_$Y8@.Q'9IV<ta!uj:7*`ZU]EL%-lZJc#jIKAHe24j?mZ-QY;]N.8SH):Z<A6'4h<>,lku.';M+NG/E=L$?%,L<`8>>Rqc#+UZ\Aj%EF*s/oDA2h_U35c\-(Mf0KQ&'lmjl'Z`jbo%i1bDR=mLQ3pCLsYr%2><[7)kQp8gmisFBrF1-JgA9g`>NJ%>:G[`.FXta)<9B7j,>LCB8DGaKYUV&'IcnLWBU`\>Z!6$poF+uf+3I)YJdXFZK8dD&'rb9X+&rQRG's?R]ccLrsdVBK-nf\OsB-U%,h6Fa=ofAh-$degAm0HqOHJ!d=a+<Enf[[u^8+t]CM.M;!`&Id_Xt/ab=GNF_OeGkY/Q@J6D!S5qcfLb7"8iSD9[`t(uP/j4%rZd%Sc!FjRMo$q,Xbe4mO3'1Q1SUG^M5A&F282Y<tIFfWiQo67UVVQ,25"$d'(_%-5[`O=Q3,Z(%@H2f[ikVK]CYHqAH7/fJ>^I:&1S_%oV=M?<T#Jd+_@TS$CP;Up<%)_L1DNd<`?atM:0nMf$WBMq_;^Fb-q_oGs^f>INg%&651'E9;3\1/oU;TQ+ST,aZ6js)(>c@,O_&?%r?Yr,0aPmWrXkHF$aX&/[^OuVV?*Yi.I4+D<D0*pDX4E6Ebq1"KaVij;O=c3'e]=UjiLIdOkst_Se0Xll7-*2>XE9*2Ue#jR!@.d%]A!g4<tY\XHo`R%Hc%SWbgJAe4t<j"McNDl7`dT\\NdY$OI9:@$6V'p&.U@%-3W4BLS0qKF$ISlV-UCNQe#M<H?ln0Rh0+Gfs%kP%R0[Uo^Lm-XG*iETU5WsD(X6"FQu:f8F^dTm[j-uKPN]Y)@<cG<X#;Q=,OW0#CUJpg"1a][$+.;sDYjm4D3!t#e$B!E/QaON,,I3j%GFF+]/fq*^^;KNG\E\9_?!bSUaNmutL)m!k=ue5h4?pd4Dc'pqFn,0X.dtq@C/o+C;((>;mlMK)d,Zil4DH?:jP*irZ(Zl-&*2SP%!#^M;lt%Np\#Q13Y+_S*MtM0;_=EYnf#C(!r3DEM'SWC:]JhJ!0ma`PLJVi`*HMVTbDFcLpV$-9"ag,s*ok!PV%chC>.,M7F+^c%%OSinK'&NrWR-Op!N.?6+AYE.(RT3"<KO/W50\<!63FqAW/WrS@T>6GAq,o4=.?D?76@00D-"(9+[+YRZ_EN=a[*)Z_qc`7g[@(k`%V!0iZZ1sIs8?t_FEF(0;;spAqDAM='HKDG&h9*T:f#ijWi@SkO-\?\.\p6([$/D;a=l<T[ou(<""9]=3#VR@]rdFTYIi&!Q>VV)s%&<sDZXTtHXp>W])@[\ACaLJmi_QA`#UKs8=L0mD1OINfgWpR6092u#K+/<R=QVY)<\n8t=dW-?mSC/RTb0*2cm(9d)r_/3gg39f9%WN:,cbj2\e0TtSs5^L!0j)Z\gEk;KF,a17lgo?5sAD!bc?*TK_`5-Ed,cR\.;sIBO4>4,W&o?'T@jpO=on;&L%dV#!CZn_K29f^Z%du5<ZS6<.2VP^@*(YMM!;>84h3_@*SZ]V$d'10TgluR*qha1c\o<$b_H*m"OMP[1Ug,2X$Y4t=D2XdC=4Zc0'-+4t[a\?B1c/2rY%PM&FR$"7q]i<sl!P6OO+cI+hFlO`oZo)qnU#>E))g,QhHNoc>WS=3;BQ\8B?l6@kYpA&St.72'sS^8.\bDrEu$A%<AgV#&pnqe5o%\/LGa$BQS@!2)2AL7WH-87-SMP6So;X.8rL_X+aM-WUf>kPFW*<%<dJA1W#)+%4\84rMQ,!RC-YC^O:O0F:41T2,IpFpJhFnoClo%5/blfPCc$99M,8)Ss[g"iPKtOl<$5)SMO<&r2jCG+4*)E9QMSGEU"h6k?*JAZ]>o;G%)r=n^,9*=r6VmM<QeAkM5`(qlT&-`KJCI%N,X[K/S(E[EsrN"X=@:*@g?F-N_6R9a+&]"7u;8!*_Qj+4PW?-'-KZc0r]<7'$pnic^L^)gtegKb]6NpDL3?h^*dB&2/fT;a[)n>%j\cFXP\'-@&gpa[$9<T9h>=-M<bgo20DfX$PQV]h=jl;<iJRR(:U`eu^e*9,`MM.^;2M)L6ZQ!H>'UZM.,?m_,lKG7T`HIuap^Uh%:>d*RdY&mj-;7#B-V?g7nu)KTL_GuQgJ<OEq2O!-a7p'7TrD]n6/?OnAE$;=;<VO?.E`QX<Sqd<`D8W45'C]];hJS*C03ia-h:]7%A,.h'0cm2T!7(K%/F<K+;7M.@jii;nC_Un^[d7/>JOg>)T;=\Q]e'quOfd.kMf>2_/\)AR;)CF/>?KTn,<\YGJA*Tp+Zg,<nkkic%LKH%C%/'BBI#+WVqO*RXq)E6M$EbD?l?V+#=/XXlj#h234trV,5n[8D8$rlUX"A.E87JNFSd&b2q%.`.lBKO@HCVFJiV,\RiuH,#%[bR1t1q/kHG3'[jd>DKta5\QG4D5Tua7Ka<1f&5DfTLX^Q;s1&77VE%"d$"6*,q%p.L`]3oYbUi\cI)]gHGYKb[E_7%*R@/@q4,%%"V%%tWD8JZhur%Rb(Xh._gYlYKdWi-gV,dNeNAQ#+o8h,AT1_h`[!eW?rjm*<3>S?K\^JYd$Cq5m<De.34jFfrR(:L^Q[h(]"AXT%K*Zet6X.7gK2gcGg#6)?<:lVK(&L@t<5#>-e96(]:JD<OQ`XgbClP;\I^#O8s0ouII@j4ZS$ETf>c_&N=]#:Im0UNG_^\Yl2+LQ;%g_4qP$Koa)pamA+mAiB&;e;N.q(Gb0R*M#!4/<YCLl>SZg)&)(b,VHc\Q#=S>fgeK9GcBW96^(Zba-c48i#4,W'a^N$erDIEAia2%;q^A<L,(=66\GOgp1X1MLNns;bK`SSb[o/p<Oa>Z22c\XU]o5IjrG74DC_Y18A8%<XWIFb.iGVXZu_SG>&PqXAm)1.q_l4RKc3_@%I](e'i0ehpWEZE$Q^/PPWiLH8k%a<&^"^B4"A2"t5/0Gm\8l*&8bij4/:h]NY+]D^0#+1Db9TU->9@L)Br*W3L"%bC-C$#qDD6TX%ND:t:m%,R0Cb(FD:N!BYaIX.j+@_&WLAYJ70435/QO$$MPB5XQ^XM>c9=\MO6CU>LBA]=g2^'-t;6=-H%>SG='=)UZB]$iW`3Hc^%kT-.SgkgMEF!nn(-iVTE`s]:sD,\3V;Eg`p]BbHG*Bam6A7A<dj%Q:`/V8rnidmqLjR=D\Z/^:[85i7`''/dP2f9D](JG]qHTq]F%YM+Tq^2`94_M>>i[8a-C/D+_672ZiDF>)G6ZP1&RnS[_[4@+D%\+[W*HFI!,p8c.)#U3d94A^.$p1B*.8kH$IC3QTjfe5Hc^O<X>%f)gKEpIAN@OPZ>l#&JOmLB%(%+b/H*gq\'6rVYc^\@qfNF_mlNF6lQ>/j5QLWVW%"%'*$&l4(-7Ktk@N6&(D/1EM-U&r%m6U"h-u%O\7G7+sF;"UVJ:\me[L4!^ut0p'Pid;Uf<()qBnE@'eJhL=u+*p-Id!,kmK>ZfQ%g:KY/N?kuk,a0+sUL"d%u;b*r4j$<`9p0A]*%[ZYY7r6i`$mX&TBke5(04Vh1;Of7Z.+]5kY7_)d6>g<4e;olhO;q&.ljWoR2hjH&0J0D?ahUg/tc67lS,LbHW;ZbW5a30mJ."7.t%(+P9pZ;+r3I[lEb#SL1tfrHN?o((nn2KDK'h]d3'C<q0p]T*GjI;dfo[(T6kd)VR?TH]ooKjZM(!&8"%pa@Z0q]#cQq>U-W>2JqJ%R9I>s@kI`Y_uB15rTbR*o7'C4qXSQSps["RGQ#;So3_O`QXBa\Dnl>$5Q1)L5Q-@Erpnfnr;Du^rq>+85Q'X3^\mQXIf/<2J,S+d%Ieh$&s5WpuO+7!(\%ht'Dnl>Gj59mkhu4.Jk9o-a:Oi6(J,_/dr'*F(OB_~>%AI9_PrivateDataEnd